[{"path":"https://heli-xu.github.io/findSVI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Heli Xu Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"get-census-data-with-geometry","dir":"Articles","previous_headings":"","what":"Get census data with geometry","title":"Mapping SVI for spatial analysis","text":"First, using get_census_data() obtain ZCTA-level data simple feature geometry PA 2020 (Census API required). , showing first 10 rows data. geometry = TRUE, ’ll get tibble additional column containing simple feature geometry (MULTIPOLYGON).","code":"pa_zcta_2020_geo_data <- get_census_data(   year = 2020,    state = \"PA\",    geography = \"zcta\",    geometry = TRUE) #> Simple feature collection with 10 features and 134 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -80.48268 ymin: 40.10397 xmax: -79.73383 ymax: 40.83308 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 135 #>    GEOID NAME        B06009_002E B06009_002M B09001_001E B09001_001M B11012_010E #>    <chr> <chr>             <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 15001 ZCTA5 15001        1655         417        5450         582         724 #>  2 15003 ZCTA5 15003         441         125        2352         245         250 #>  3 15004 ZCTA5 15004          62          43          63          70          21 #>  4 15005 ZCTA5 15005         293          92        1380         200          65 #>  5 15006 ZCTA5 15006          37          58          13          28           0 #>  6 15007 ZCTA5 15007           0          11          22          35           0 #>  7 15009 ZCTA5 15009         404         121        3253         384         206 #>  8 15010 ZCTA5 15010        1237         242        5636         444         719 #>  9 15012 ZCTA5 15012         638         180        2750         302         336 #> 10 15014 ZCTA5 15014         136          75         527          96         105 #> # ℹ 128 more variables: B11012_010M <dbl>, B11012_015E <dbl>, #> #   B11012_015M <dbl>, B16005_007E <dbl>, B16005_007M <dbl>, B16005_008E <dbl>, #> #   B16005_008M <dbl>, B16005_012E <dbl>, B16005_012M <dbl>, B16005_013E <dbl>, #> #   B16005_013M <dbl>, B16005_017E <dbl>, B16005_017M <dbl>, B16005_018E <dbl>, #> #   B16005_018M <dbl>, B16005_022E <dbl>, B16005_022M <dbl>, B16005_023E <dbl>, #> #   B16005_023M <dbl>, B16005_029E <dbl>, B16005_029M <dbl>, B16005_030E <dbl>, #> #   B16005_030M <dbl>, B16005_034E <dbl>, B16005_034M <dbl>, …"},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"get-svi-with-geometry","dir":"Articles","previous_headings":"","what":"Get SVI with geometry","title":"Mapping SVI for spatial analysis","text":"getting data ready, can supply tibble simple feature geometry get_svi(). get_svi() return full SVI table every SVI variables, intermediate percentile ranks, theme-specific SVIs overall SVI (consistent CDC/ATSDR SVI database, without MOE). visualization purposes, ’ll simplify table keep GEOID, geometry SVIs.","code":"pa_zcta_2020_geo_svi <- get_svi(   year = 2020,    data = pa_zcta_2020_geo_data   ) pa_zcta_2020_geo_svi %>% glimpse() #> Rows: 1,776 #> Columns: 64 #> $ GEOID       <chr> \"15001\", \"15003\", \"15004\", \"15005\", \"15006\", \"15007\", \"150… #> $ NAME        <chr> \"ZCTA5 15001\", \"ZCTA5 15003\", \"ZCTA5 15004\", \"ZCTA5 15005\"… #> $ geometry    <MULTIPOLYGON [°]> MULTIPOLYGON (((-80.43758 4..., MULTIPOLYGON … #> $ E_TOTPOP    <dbl> 31129, 11212, 380, 9191, 292, 629, 15114, 27205, 15243, 30… #> $ E_HU        <dbl> 16070, 6084, 207, 4275, 131, 167, 7057, 12699, 7709, 1671,… #> $ E_HH        <dbl> 14093, 5104, 138, 3948, 131, 167, 6509, 11363, 6883, 1450,… #> $ E_POV150    <dbl> 5567, 2656, 75, 916, 0, 387, 1904, 4761, 2639, 761, 24, 14… #> $ E_UNEMP     <dbl> 787, 212, 0, 123, 0, 0, 323, 811, 376, 41, 11, 201, 0, 116… #> $ E_HBURD     <dbl> 3037, 1234, 6, 609, 0, 51, 1424, 2322, 1186, 334, 39, 1729… #> $ E_NOHSDP    <dbl> 1655, 441, 62, 293, 37, 0, 404, 1237, 638, 136, 25, 542, 2… #> $ E_UNINSUR   <dbl> 1319, 534, 38, 250, 0, 19, 315, 923, 470, 175, 21, 454, 13… #> $ E_AGE65     <dbl> 6395, 2090, 42, 2534, 58, 414, 3718, 5815, 3595, 464, 277,… #> $ E_AGE17     <dbl> 5450, 2352, 63, 1380, 13, 22, 3253, 5636, 2750, 527, 348, … #> $ E_DISABL    <dbl> 4871, 1656, 61, 1288, 0, 295, 2196, 4584, 2629, 379, 94, 1… #> $ E_SNGPNT    <dbl> 815, 356, 21, 92, 0, 0, 271, 820, 348, 162, 35, 319, 7, 3,… #> $ E_LIMENG    <dbl> 142, 86, 0, 19, 0, 0, 57, 42, 86, 0, 0, 46, 182, 0, 0, 4, … #> $ E_MINRTY    <dbl> 5764, 1771, 30, 459, 0, 0, 869, 3819, 1048, 264, 65, 1684,… #> $ E_MUNIT     <dbl> 955, 196, 0, 134, 0, 0, 528, 811, 353, 48, 10, 1290, 0, 0,… #> $ E_MOBILE    <dbl> 537, 38, 25, 23, 0, 0, 18, 251, 445, 0, 0, 3, 0, 93, 24, 3… #> $ E_CROWD     <dbl> 94, 8, 0, 0, 0, 0, 23, 135, 22, 7, 0, 70, 9, 0, 0, 23, 52,… #> $ E_NOVEH     <dbl> 1189, 587, 0, 135, 0, 0, 335, 1243, 481, 136, 10, 781, 46,… #> $ E_GROUPQ    <dbl> 619, 26, 0, 213, 0, 0, 304, 1268, 144, 91, 0, 438, 0, 0, 0… #> $ EP_POV150   <dbl> 18.2, 23.7, 19.7, 10.2, 0.0, 61.5, 12.8, 18.3, 17.3, 26.0,… #> $ EP_UNEMP    <dbl> 4.8, 3.5, 0.0, 2.5, 0.0, 0.0, 4.5, 6.1, 5.0, 2.5, 1.8, 2.5… #> $ EP_HBURD    <dbl> 21.5, 24.2, 4.3, 15.4, 0.0, 30.5, 21.9, 20.4, 17.2, 23.0, … #> $ EP_NOHSDP   <dbl> 7.0, 5.5, 22.5, 4.1, 13.3, 0.0, 3.6, 6.6, 5.7, 6.2, 2.9, 4… #> $ EP_UNINSUR  <dbl> 4.3, 4.8, 10.0, 2.8, 0.0, 3.0, 2.1, 3.4, 3.1, 5.9, 1.7, 3.… #> $ EP_AGE65    <dbl> 20.5, 18.6, 11.1, 27.6, 19.9, 65.8, 24.6, 21.4, 23.6, 15.2… #> $ EP_AGE17    <dbl> 17.5, 21.0, 16.6, 15.0, 4.5, 3.5, 21.5, 20.7, 18.0, 17.3, … #> $ EP_DISABL   <dbl> 15.9, 14.8, 16.1, 14.3, 0.0, 46.9, 14.8, 17.1, 17.2, 12.8,… #> $ EP_SNGPNT   <dbl> 5.8, 7.0, 15.2, 2.3, 0.0, 0.0, 4.2, 7.2, 5.1, 11.2, 7.1, 4… #> $ EP_LIMENG   <dbl> 0.5, 0.8, 0.0, 0.2, 0.0, 0.0, 0.4, 0.2, 0.6, 0.0, 0.0, 0.3… #> $ EP_MINRTY   <dbl> 18.5, 15.8, 7.9, 5.0, 0.0, 0.0, 5.7, 14.0, 6.9, 8.6, 5.1, … #> $ EP_MUNIT    <dbl> 5.9, 3.2, 0.0, 3.1, 0.0, 0.0, 7.5, 6.4, 4.6, 2.9, 2.0, 17.… #> $ EP_MOBILE   <dbl> 3.3, 0.6, 12.1, 0.5, 0.0, 0.0, 0.3, 2.0, 5.8, 0.0, 0.0, 0.… #> $ EP_CROWD    <dbl> 0.7, 0.2, 0.0, 0.0, 0.0, 0.0, 0.4, 1.2, 0.3, 0.5, 0.0, 1.0… #> $ EP_NOVEH    <dbl> 8.4, 11.5, 0.0, 3.4, 0.0, 0.0, 5.1, 10.9, 7.0, 9.4, 2.0, 1… #> $ EP_GROUPQ   <dbl> 2.0, 0.2, 0.0, 2.3, 0.0, 0.0, 2.0, 4.7, 0.9, 3.0, 0.0, 2.9… #> $ EPL_POV150  <dbl> 0.5313, 0.7039, 0.5837, 0.2295, 0.0000, 0.9920, 0.3109, 0.… #> $ EPL_UNEMP   <dbl> 0.5595, 0.3761, 0.0000, 0.2593, 0.0000, 0.0000, 0.5259, 0.… #> $ EPL_HBURD   <dbl> 0.5174, 0.6615, 0.0490, 0.2234, 0.0000, 0.8627, 0.5436, 0.… #> $ EPL_NOHSDP  <dbl> 0.4001, 0.2798, 0.9393, 0.1896, 0.7911, 0.0000, 0.1635, 0.… #> $ EPL_UNINSUR <dbl> 0.4804, 0.5417, 0.8597, 0.2890, 0.0000, 0.3186, 0.2186, 0.… #> $ EPL_AGE65   <dbl> 0.5516, 0.4240, 0.0959, 0.8678, 0.5091, 0.9881, 0.7832, 0.… #> $ EPL_AGE17   <dbl> 0.3258, 0.5840, 0.2690, 0.1986, 0.0545, 0.0499, 0.6317, 0.… #> $ EPL_DISABL  <dbl> 0.5877, 0.4991, 0.5997, 0.4594, 0.0000, 0.9903, 0.4991, 0.… #> $ EPL_SNGPNT  <dbl> 0.6929, 0.7989, 0.9641, 0.2963, 0.0000, 0.0000, 0.5322, 0.… #> $ EPL_LIMENG  <dbl> 0.6555, 0.7469, 0.0000, 0.5312, 0.0000, 0.0000, 0.6226, 0.… #> $ EPL_MINRTY  <dbl> 0.8173, 0.7860, 0.6118, 0.4801, 0.0000, 0.0000, 0.5176, 0.… #> $ EPL_MUNIT   <dbl> 0.7801, 0.6724, 0.0000, 0.6684, 0.0000, 0.0000, 0.8199, 0.… #> $ EPL_MOBILE  <dbl> 0.4422, 0.2872, 0.7499, 0.2775, 0.0000, 0.0000, 0.2479, 0.… #> $ EPL_CROWD   <dbl> 0.5305, 0.3886, 0.0000, 0.0000, 0.0000, 0.0000, 0.4479, 0.… #> $ EPL_NOVEH   <dbl> 0.7071, 0.8234, 0.0000, 0.3613, 0.0000, 0.0000, 0.5105, 0.… #> $ EPL_GROUPQ  <dbl> 0.8031, 0.5585, 0.0000, 0.8212, 0.0000, 0.0000, 0.8031, 0.… #> $ SPL_theme1  <dbl> 2.4887, 2.5630, 2.4317, 1.1908, 0.7911, 2.1733, 1.7625, 2.… #> $ SPL_theme2  <dbl> 2.8135, 3.0529, 1.9287, 2.3533, 0.5636, 2.0283, 3.0688, 3.… #> $ SPL_theme3  <dbl> 0.8173, 0.7860, 0.6118, 0.4801, 0.0000, 0.0000, 0.5176, 0.… #> $ SPL_theme4  <dbl> 3.2630, 2.7301, 0.7499, 2.1284, 0.0000, 0.0000, 2.8293, 3.… #> $ RPL_theme1  <dbl> 0.5028, 0.5380, 0.4745, 0.0999, 0.0392, 0.3785, 0.2236, 0.… #> $ RPL_theme2  <dbl> 0.7418, 0.8473, 0.2520, 0.4597, 0.0148, 0.2985, 0.8593, 0.… #> $ RPL_theme3  <dbl> 0.8173, 0.7860, 0.6118, 0.4801, 0.0000, 0.0000, 0.5176, 0.… #> $ RPL_theme4  <dbl> 0.8224, 0.6515, 0.1266, 0.4631, 0.0000, 0.0000, 0.6850, 0.… #> $ SPL_themes  <dbl> 9.3825, 9.1320, 5.7221, 6.1526, 1.3547, 4.2016, 8.1782, 9.… #> $ RPL_themes  <dbl> 0.8059, 0.7707, 0.2287, 0.2707, 0.0136, 0.1022, 0.6118, 0.… svi <- pa_zcta_2020_geo_svi %>%    select(GEOID, geometry, contains(\"RPL_theme\")) svi %>% head(10) %>% kable()"},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"interactive-maps-for-overall-svi","dir":"Articles","previous_headings":"","what":"Interactive maps for overall SVI","title":"Mapping SVI for spatial analysis","text":"simple feature geometry, can visualize SVI patterns perform spatial SVI analysis mapping tool. , ’re using powerful package leaflet interactive maps. First ’ll examine missing value. Looks like ZCTAs missing values SVIs. (Upon checking full SVI table, can see individual SVI variables 0 ZCTAs.) ’ll remove ZCTAs better visualization. set interactive map overall SVI, leaflet() heavy lifting. , ’ll just add customized color palette labels appearance. interactive map, can visualize easily SVI varies different regions PA zoom examine specific ZCTAs interest, making helpful approach explore new ideas, patterns analyses.","code":"missing <- svi %>% filter(is.na(RPL_theme1))  missing %>% glimpse() #> Rows: 13 #> Columns: 7 #> $ GEOID      <chr> \"15260\", \"15616\", \"15691\", \"16312\", \"17077\", \"17120\", \"1782… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-79.95539 4..., MULTIPOLYGON (… #> $ RPL_theme1 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_theme2 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_theme3 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_theme4 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_themes <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA svi_clean <- svi %>% drop_na()  #above shows CRS NAD83, change to 4326 (WGS84) to avoid warning as below: #Warning: sf layer has inconsistent datum (+proj=longlat +datum=NAD83 +no_defs). #Need '+proj=longlat +datum=WGS84' st_crs(svi_clean) <- 4326 #> Warning: st_crs<- : replacing crs does not reproject data; use st_transform for #> that  #set color palette pal <- colorNumeric(   palette = c(\"orange\",\"navy\"),   domain = svi_clean$RPL_themes )  #set label zcta_label <- glue(\"<h3 style='margin: 0px'>{svi_clean$GEOID}<\/h3>                     overall SVI: {svi_clean$RPL_themes}\") %>%   map(~HTML(.x))  leaflet(svi_clean) %>%    addProviderTiles(providers$CartoDB.Voyager) %>%    addPolygons(color = \"white\",                weight = 0.5,               smoothFactor = 0.5,               opacity = 1,               fillColor = ~pal(RPL_themes),               fillOpacity = 0.8,               highlightOptions = highlightOptions(                 weight = 5,                 color = \"white\",                 fillOpacity = 0.8,                 bringToFront = TRUE),               label = zcta_label,               labelOptions = labelOptions(                 style = list(                   \"font-family\" = \"Fira Sans, sans-serif\",                   \"font-size\" = \"1.2em\"                 ))               ) %>%    addLegend(\"bottomleft\",             pal = pal,             values = ~RPL_themes,             title = \"Overall SVI in all ZCTAs in PA (2020)\",             #labFormat = labelFormat(prefix = \"$\"),             opacity = 1)"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"what-is-svi","dir":"Articles","previous_headings":"","what":"What is SVI","title":"Introduction to findSVI","text":"First introduced 2011 (Flanagan , Gregory EW, Hallisey EJ, Heitgerd JL, Lewis B.), CDC/ATSDR Social Vulnerability Index (SVI) serves tool assess resilience communities considering socioeconomic demographic factors. valuable information plays crucial role preparing managing public health emergencies, enables effective planning social services public assistance. CDC/ATSDR Social Vulnerability Index (CDC/ATSDR SVI) utilizes 16 U.S. census variables grouped 4 domains/themes, obtains relative vulnerability level using percentile ranks geographic unit within region. Communities higher SVI considered vulnerable public health crisis. details, please refer CDC/ATSDR SVI website.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"why-we-might-need-to-calculate-svi","dir":"Articles","previous_headings":"","what":"Why we might need to calculate SVI","title":"Introduction to findSVI","text":"CDC/ATSDR releases SVI biannually shapefile csv format, counties/census tracts level within individual state US. SVI database useful, sometimes prefer --date census data different geographic levels. example, ’d like address questions ZCTA-level SVI Pennsylvania 2021, census tract-level SVI within counties Pennsylvania 2020, might need calculate SVI census data . findSVI aims support flexible specific SVI analysis cases additional options years (2012-2021) geographic levels (eg. ZCTA/places, combining multiple states). document introduces datasets basic tools findSVI census data retrieval SVI calculation.","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"census-variables-and-calculation-table","dir":"Articles","previous_headings":"Data: census variables","what":"Census variables and calculation table","title":"Introduction to findSVI","text":"retrieve census data calculate SVI based CDC/ATSDR documentation, series lists tables containing census variables information included package. census_variables_(2012-2021): list contains year-specific census variables needed SVI calculation. variable_ep_calculation_(2012-2021): table contains SVI variable names, theme group corresponding census variable(s) calculation formula. datasets documented ?census_variables ?variable_calculation.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"zcta-state-relationship-file-crosswalk","dir":"Articles","previous_headings":"Data: census variables","what":"ZCTA-state relationship file (crosswalk)","title":"Introduction to findSVI","text":"Currently, tidycensus::get_acs() support requests state-specific ZCTA-level data starting 2019(subject table)/2020(tables). likely due changes Census API, ZCTAs subgeographies states (ZCTAs cross state boundaries). obtain state-specific ZCTA-level data, three atasets ZCTA--state crosswalks included help selecting ZCTAs state(s) interest retrieving ZCTA data national level. crosswalk files documented ?zcta_state_xwalk.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"retrieve-census-data-with-get_census_data","dir":"Articles","previous_headings":"","what":"Retrieve census data with get_census_data()","title":"Introduction to findSVI","text":"get_census_data() uses tidycensus::get_acs() pre-defined list variables retrieves ACS data SVI calculation. list census variables built function, changes according year interest. Importantly, Census API key required function work, can obtained online set census_api_key(\"KEY GOES \"). arguments largely [tidycensus::get_acs()], including year, geography state. example, can retrieve ZCTA-level data Rhode Island 2018: (first 10 rows columns shown) Note ZCTA-level 2018, data retrieving state supported Census API/tidycensus. requests, get_census_data() first retrieves ZCTA-level data whole country, uses ZCTA--state relationship file (crosswalk) select ZCTAs state(s) interest. results longer running time requests.","code":"library(findSVI) data <- get_census_data(2018, \"zcta\", \"RI\") data[1:10, 1:10] #>    GEOID        NAME B17001_002E B17001_002M B19301_001E B19301_001M #> 1  02802 ZCTA5 02802         154         190       24925       14640 #> 2  02804 ZCTA5 02804         130          91       39065        6412 #> 3  02806 ZCTA5 02806         520         183       61534        3820 #> 4  02807 ZCTA5 02807          73          33       39287        7937 #> 5  02808 ZCTA5 02808         162         166       29356        3819 #> 6  02809 ZCTA5 02809        1619         368       34252        2269 #> 7  02812 ZCTA5 02812          31          52       41718        5771 #> 8  02813 ZCTA5 02813         605         271       42612        4889 #> 9  02814 ZCTA5 02814         722         253       37750        3056 #> 10 02815 ZCTA5 02815          13          21       71975       22744 #>    B06009_002E B06009_002M B09001_001E B09001_001M #> 1           80          87         220         161 #> 2           56          45         331         156 #> 3          383         111        4375         204 #> 4           19          22         143          87 #> 5          272         146         598         271 #> 6         2077         370        3201         241 #> 7           72          60         323         144 #> 8          411         157        1265         147 #> 9          381         115        1489         170 #> 10           0          13          74         113"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"compute-svi-with-get_svi","dir":"Articles","previous_headings":"","what":"Compute SVI with get_svi()","title":"Introduction to findSVI","text":"get_svi() takes year census data (retrieved get_census_data()) arguments, calculate SVI based CDC/ATSDR documentation. function uses built-variable_calculation tables populate SVI variables census variables directly, basic summation/percentage calculation census variables. SVI variable,geographic unit ranked others selected region, followed summing rankings variables within theme perform percentile ranking SVI theme overall SVI. example, obtain ZCTA-level SVI Rhode Island 2018: (first 10 rows columns shown. columns included individual SVI variables.)","code":"result <- get_svi(2018, data) result[1:10, 1:10] #>    GEOID        NAME E_TOTPOP E_HU E_HH E_POV E_UNEMP E_PCI E_NOHSDP E_AGE65 #> 1  02802 ZCTA5 02802      671  314  223   154      18 24925       80      15 #> 2  02804 ZCTA5 02804     2004  947  840   130      12 39065       56     351 #> 3  02806 ZCTA5 02806    16192 6393 6111   520     244 61534      383    2680 #> 4  02807 ZCTA5 02807      827 1856  429    73      21 39287       19     221 #> 5  02808 ZCTA5 02808     2565  969  889   162     171 29356      272     267 #> 6  02809 ZCTA5 02809    22258 9181 8442  1619     424 34252     2077    4578 #> 7  02812 ZCTA5 02812     1208  402  402    31      44 41718       72     144 #> 8  02813 ZCTA5 02813     7780 5173 3200   605     330 42612      411    1733 #> 9  02814 ZCTA5 02814     7673 3350 2903   722     167 37750      381    1207 #> 10 02815 ZCTA5 02815      208   76   76    13       0 71975        0      16"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"wrapper-and-more-find_svi","dir":"Articles","previous_headings":"","what":"Wrapper and more: find_svi()","title":"Introduction to findSVI","text":"retrieve census data compute SVI one step, use find_svi(). get_census_data() accepts single year year (multiple states state) just like tidycensus::get_acs(), find_svi() accepts pairing vectors year state geography level. allows processing multiple year-state combinations one function, separate data retrieval SVI calculation every year-state entry returning summarised SVI table pairs year-state values. One important difference data retrieval find_svi() get_census_data() year-state combinations always evaluated “one year one state” – , option get census data multiple states (one year) get_census_data() disabled find_svi(). exception one--one rule, single year supplied year, can set state = NULL default perform nation-level data retrieval SVI calculation. SVI table output, find_svi() default returns summarised SVI table GEOID, theme-specific SVIs SVI 4 themes year-state combination. Alternatively, ’s option return full SVI table every SVI variable intermediate ranking values (get_svi()) setting full.table = TRUE. options, corresponding year state information included two separate columns table.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"single-year-state-entry","dir":"Articles","previous_headings":"Wrapper and more: find_svi()","what":"Single year-state entry","title":"Introduction to findSVI","text":"Using example , obtain ZCTA-level census data calculate SVI Rhode Island 2018 one step: glimpse first 10 rows summarised SVI table (GEOID SVIs), additional columns indicating year state information.","code":"onestep_result <- find_svi(2018, \"RI\", \"zcta\") onestep_result %>% head(10) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> # A tibble: 10 × 8 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 02802     0.921       1          0.803      0.447     0.855   2018 RI    #>  2 02804     0.224       0.171      0          0.158     0.118   2018 RI    #>  3 02806     0.0395      0.342      0.487      0.224     0.158   2018 RI    #>  4 02807     0.316       0.724      0.145      0.816     0.526   2018 RI    #>  5 02808     0.829       0.210      0.276      0         0.224   2018 RI    #>  6 02809     0.645       0.263      0.592      0.474     0.553   2018 RI    #>  7 02812     0.447       0.316      0.316      0         0.145   2018 RI    #>  8 02813     0.618       0.382      0.171      0.632     0.460   2018 RI    #>  9 02814     0.5         0.487      0.224      0.342     0.382   2018 RI    #> 10 02815     0.0263      0.513      0.342      0         0.0789  2018 RI"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"multiple-year-state-entries","dir":"Articles","previous_headings":"Wrapper and more: find_svi()","what":"Multiple year-state entries","title":"Introduction to findSVI","text":"multiple year-state combinations, supply two vectors year state arguments ’ll treated pairs. example, obtain county-level SVI New Jersey Pennsylvania 2017 2018, respectively: result, (first 10 rows ) table summarising county-level SVI New Jersey 2017 Pennsylvania 2018, retrieving census data two year-state pairs. , data retrieval SVI calculation (percentile ranking) performed separately 2017-NJ 2018-PA, resulting SVIs combined summarised table. R functions accepts vectors arguments, another way supply year state pairs extract columns table. Suppose table called info_table containing year-state information ’d like include analysis: extract specific columns interest info_table year state arguments: likely make things easier especially long list year-state combinations.","code":"summarise_results <- find_svi(   year = c(2017, 2018),   state = c(\"NJ\", \"PA\"),   geography = \"county\" ) #> # A tibble: 10 × 8 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 34001       0.95       0.8        0.65       1          0.95  2017 NJ    #>  2 34003       0.2        0.3        0.55       0.45       0.25  2017 NJ    #>  3 34005       0.3        0.5        0.35       0.4        0.3   2017 NJ    #>  4 34007       0.7        0.9        0.55       0.6        0.75  2017 NJ    #>  5 34009       0.65       0.6        0.1        0.55       0.45  2017 NJ    #>  6 34011       1          0.95       0.75       0.95       1     2017 NJ    #>  7 34013       0.9        0.75       0.85       0.85       0.9   2017 NJ    #>  8 34015       0.35       0.7        0.15       0.15       0.35  2017 NJ    #>  9 34017       0.75       0          1          0.75       0.7   2017 NJ    #> 10 34019       0          0.05       0.05       0.1        0     2017 NJ #> # A tibble: 6 × 2 #>    year state #>   <dbl> <chr> #> 1  2017 AZ    #> 2  2018 FL    #> 3  2014 FL    #> 4  2018 PA    #> 5  2013 MA    #> 6  2020 KY all_results <- find_svi(   year = info_table$year,   state = info_table$state,   geography = \"county\" )"},{"path":"https://heli-xu.github.io/findSVI/articles/tract-level_SVI_in_Philly.html","id":"svi-using-ranks-against-tracts-in-pa","dir":"Articles","previous_headings":"","what":"SVI using ranks against tracts in PA","title":"Putting local SVI in context","text":"downloading shapefile CDC/ATSDR SVI database, can read R using sf package. data whole Pennsylvania, ’ll filter county keep data Philadelphia (happens city ). size package, ’m including Philadelphia data (cdc_svi_phl_2020). help leaflet, can create interactive map visualize results:","code":"library(dplyr) library(sf) library(leaflet) library(findSVI) library(purrr) library(htmltools) library(ggplot2) library(glue) library(tidyr) # unzip(\"../../Pennsylvania.zip\", #   exdir = \"pa_ct_2020_shapefile\", junkpaths = T, #   overwrite = F) #  # pa_ct_2020 <- st_read(\"pa_ct_2020_shapefile/SVI2020_PENNSYLVANIA_tract.shp\") #  # cdc_svi_phl_2020 <- pa_ct_2020 %>% #   select(1:7, contains(\"RPL_THEME\")) %>%  #   filter(RPL_THEMES>= 0, #     COUNTY == \"Philadelphia\") # # #To avoid Warning: sf layer has inconsistent datum (+proj=longlat +datum=NAD83 +no_defs). # #Need '+proj=longlat +datum=WGS84' # st_crs(cdc_svi_phl_2020) <- 4326  load(system.file(\"extdata\", \"cdc_svi_phl_2020.rda\", package = \"findSVI\"))  #set color palette pal2 <- colorNumeric(   palette = c(\"orange\",\"navy\"),   domain = cdc_svi_phl_2020$RPL_THEMES )   #set label ct_label <- glue(\"<h3 style='margin: 0px'>{cdc_svi_phl_2020$LOCATION}<\/h3>                     overall SVI: {cdc_svi_phl_2020$RPL_THEMES}\") %>%   map(~HTML(.x))   leaflet(cdc_svi_phl_2020) %>%   addProviderTiles(providers$CartoDB.Voyager) %>%   addPolygons(color = \"white\",     weight = 0.5,     smoothFactor = 0.5,     opacity = 1,     fillColor = ~pal2(RPL_THEMES),     fillOpacity = 0.8,     highlightOptions = highlightOptions(       weight = 5,       color = \"white\",       fillOpacity = 0.8,       bringToFront = TRUE),     label = ct_label,     labelOptions = labelOptions(       style = list(         \"font-family\" = \"Fira Sans, sans-serif\",         \"font-size\" = \"1.2em\"       ))   ) %>%   addLegend(\"bottomright\",     pal = pal2,     values = ~RPL_THEMES,     title = \"Tract-level SVI in Philly (2020)<br>source:CDC/ATSDR\",     #labFormat = labelFormat(prefix = \"$\"),     opacity = 1)"},{"path":"https://heli-xu.github.io/findSVI/articles/tract-level_SVI_in_Philly.html","id":"svi-using-ranks-against-tracts-in-philly","dir":"Articles","previous_headings":"","what":"SVI using ranks against tracts in Philly","title":"Putting local SVI in context","text":"mentioned Mapping SVI spatial analysis, use get_census_data() get_svi() retrieve data geometry calculate SVI within Philadelphia census tract level 2020. Similarly, ’ll use interactive map visualize results.","code":"load(system.file(\"extdata\", \"pa_ct_2020_geo_svi.rda\", package = \"findSVI\"))  svi <- pa_ct_2020_geo_svi %>%    select(GEOID, geometry, contains(\"RPL_theme\"))  svi_clean <- svi %>% drop_na()  #above shows CRS NAD83, change to 4326 (WGS84) to avoid warning as below: #Warning: sf layer has inconsistent datum (+proj=longlat +datum=NAD83 +no_defs). #Need '+proj=longlat +datum=WGS84' st_crs(svi_clean) <- 4326  #set color palette pal2 <- colorNumeric(   palette = c(\"orange\",\"navy\"),   domain = svi_clean$RPL_themes )  #set label ct_label2 <- glue(\"<h3 style='margin: 0px'>{svi_clean$GEOID}<\/h3>                     overall SVI: {svi_clean$RPL_themes}\") %>%   map(~HTML(.x))  leaflet(svi_clean) %>%    addProviderTiles(providers$CartoDB.Voyager) %>%    addPolygons(color = \"white\",                weight = 0.5,               smoothFactor = 0.5,               opacity = 1,               fillColor = ~pal2(RPL_themes),               fillOpacity = 0.8,               highlightOptions = highlightOptions(                 weight = 5,                 color = \"white\",                 fillOpacity = 0.8,                 bringToFront = TRUE),               label = ct_label2,               labelOptions = labelOptions(                 style = list(                   \"font-family\" = \"Fira Sans, sans-serif\",                   \"font-size\" = \"1.2em\"                 ))               ) %>%    addLegend(\"bottomright\",             pal = pal2,             values = ~RPL_themes,             title = \"Tract-level SVI in Philly (2020)<br>source: Census, findSVI\",             #labFormat = labelFormat(prefix = \"$\"),             opacity = 1)"},{"path":"https://heli-xu.github.io/findSVI/articles/tract-level_SVI_in_Philly.html","id":"potential-implications","dir":"Articles","previous_headings":"","what":"Potential implications","title":"Putting local SVI in context","text":"CDC/ATSDR SVI database offers valuable insights community vulnerabilities across United States state, including Pennsylvania. However, examining social vulnerability within smaller region, especially metropolitan areas/cities like Philadelphia, nuanced approach may necessary uncover disparities different communities. seen example , SVI using ranks tracts PA shows overall higher SVI (darker color), whereas SVI using ranks tracts Philly shows wider color range, revealing noticeable difference among tracts. plot versions overall SVI tract, can observe interesting pattern, correlate well ends SVI spectrum correlate poorly middle.  Quantitatively, correlation coefficient two versions SVI 0.9055097, suggesting discrepancy perhaps warrants discussion. case, comparing tracts within Philadelphia enables granular analysis better understand relative social vulnerability among communities. approach may help target interventions resources needed crisis management, also enhance public health research using SVI metric.","code":"join_svi <- cdc_svi_phl_2020 %>%   st_drop_geometry() %>%    rename(     GEOID = FIPS,     CDC_SVI = RPL_THEMES,     CDC_SVI1 = RPL_THEME1,     CDC_SVI2 = RPL_THEME2,     CDC_SVI3 = RPL_THEME3,     CDC_SVI4 = RPL_THEME4   ) %>%     left_join(svi_clean %>%          st_drop_geometry() %>%          rename(findSVI_SVI = RPL_themes),        by = \"GEOID\")    join_svi %>%    ggplot(aes(x = CDC_SVI, y = findSVI_SVI, color = findSVI_SVI)) +   geom_point()+   scale_color_gradient(low = \"orange\", high = \"navy\")+   geom_abline(slope = 1, intercept = 0, color = 'orange')+   labs(title = \"Tract-level overall SVI in Philadelphia (2020)\",        subtitle= \"Ranking aganist tracts in PA (CDC) vs. \\nranking against tracts in Philadelphia (findSVI)\",     x = \"CDC\",     y = \"findSVI\",     color = \"Overall SVI\")+   theme(     text = element_text(size = 13),     plot.title = element_text(size = 16, hjust = 0, face = \"bold\"),     plot.subtitle = element_text(color = \"#4D4948\", size = 12, hjust = 0),     axis.title = element_text(size = 12, face = \"bold\"),     legend.title = element_text(size = 13)   )"},{"path":"https://heli-xu.github.io/findSVI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Heli Xu. Author, maintainer.","code":""},{"path":"https://heli-xu.github.io/findSVI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xu H (2023). findSVI: Calculate CDC/ATSDR Social Vulnerability Index. https://github.com/heli-xu/findSVI, https://heli-xu.github.io/findSVI/.","code":"@Manual{,   title = {findSVI: Calculate CDC/ATSDR Social Vulnerability Index},   author = {Heli Xu},   year = {2023},   note = {https://github.com/heli-xu/findSVI, https://heli-xu.github.io/findSVI/}, }"},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"findsvi-","dir":"","previous_headings":"","what":"Calculate CDC/ATSDR Social Vulnerability Index","title":"Calculate CDC/ATSDR Social Vulnerability Index","text":"goal findSVI calculate regional CDC/ATSDR Social Vulnerability Index (SVI) geographic level interest using US census data American Community Survey.","code":""},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Calculate CDC/ATSDR Social Vulnerability Index","text":"CDC/ATSDR releases SVI biannually counties/census tracts level US individual state (can downloaded ). findSVI aims support flexible specific SVI analysis additional options years (2012-2021) geographic levels (e.g., ZCTA/places, combining multiple states). find SVI one multiple year-state pair(s): find_svi(): retrieves US census data (Census API key required) calculates SVI based CDC/ATSDR SVI documentation year-state pair geography level. cases, find_svi() easiest option. customized requests census data retrieval (e.g., different geography level year-state pair, multiple states one year), can process individual entry using following: get_census_data(): retrieves US census data (Census API key required); get_svi(): calculates SVI census data supplied. Essentially, find_svi() wrapper function get_census_data() get_svi() also supports iteration 1-year--1-state pairs geography level.","code":""},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate CDC/ATSDR Social Vulnerability Index","text":"can install development version findSVI GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"heli-xu/findSVI\")"},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calculate CDC/ATSDR Social Vulnerability Index","text":"(first ten rows shown) (first ten rows columns shown) (first ten rows columns shown)","code":"summarise_results <- find_svi(   year = c(2017, 2018),   state = c(\"NJ\", \"PA\"),   geography = \"county\" ) summarise_results %>% head(10) #> # A tibble: 10 × 8 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 34001       0.95       0.8        0.65       1          0.95  2017 NJ    #>  2 34003       0.2        0.3        0.55       0.45       0.25  2017 NJ    #>  3 34005       0.3        0.5        0.35       0.4        0.3   2017 NJ    #>  4 34007       0.7        0.9        0.55       0.6        0.75  2017 NJ    #>  5 34009       0.65       0.6        0.1        0.55       0.45  2017 NJ    #>  6 34011       1          0.95       0.75       0.95       1     2017 NJ    #>  7 34013       0.9        0.75       0.85       0.85       0.9   2017 NJ    #>  8 34015       0.35       0.7        0.15       0.15       0.35  2017 NJ    #>  9 34017       0.75       0          1          0.75       0.7   2017 NJ    #> 10 34019       0          0.05       0.05       0.1        0     2017 NJ library(findSVI) data <- get_census_data(2020, \"county\", \"PA\") data[1:10, 1:10] #> # A tibble: 10 × 10 #>    GEOID NAME    B0600…¹ B0600…² B0900…³ B0900…⁴ B1101…⁵ B1101…⁶ B1101…⁷ B1101…⁸ #>    <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 42001 Adams …    7788     602   20663      NA    1237     215     482     171 #>  2 42003 Allegh…   45708    1713  228296      49   24311    1147    5378     525 #>  3 42005 Armstr…    3973     305   12516       9     912     161     247      85 #>  4 42007 Beaver…    7546     640   31915      NA    3380     380     787     174 #>  5 42009 Bedfor…    3996     317    9386      11     468      99     213      50 #>  6 42011 Berks …   36488    1356   93714      44    8812     662    1695     304 #>  7 42013 Blair …    7292     679   24920      19    2552     363     544     169 #>  8 42015 Bradfo…    4395     362   13358      NA     969     177     428     117 #>  9 42017 Bucks …   25651    1306  128008      53    8222     749    3174     581 #> 10 42019 Butler…    6118     468   37577      NA    2121     337     813     198 #> # … with abbreviated variable names ¹​B06009_002E, ²​B06009_002M, ³​B09001_001E, #> #   ⁴​B09001_001M, ⁵​B11012_010E, ⁶​B11012_010M, ⁷​B11012_015E, ⁸​B11012_015M result <- get_svi(2020, data) restult[1:10, 1:10] #> # A tibble: 10 × 10 #>    GEOID NAME      E_TOT…¹   E_HU   E_HH E_POV…² E_UNEMP E_HBURD E_NOH…³ E_UNI…⁴ #>    <chr> <chr>       <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 42001 Adams Co…  102627  42525  39628   13573    2049    9088    7788    5656 #>  2 42003 Alleghen… 1218380 602416 545695  212117   32041  133524   45708   46333 #>  3 42005 Armstron…   65356  32852  28035   13566    1735    5719    3973    2632 #>  4 42007 Beaver C…  164781  79587  72086   28766    4249   15764    7546    6242 #>  5 42009 Bedford …   48154  24405  19930   10130    1033    3952    3996    3310 #>  6 42011 Berks Co…  419062 167514 156389   77317   12196   40982   36488   25627 #>  7 42013 Blair Co…  122495  56960  51647   27397    2765   12146    7292    6155 #>  8 42015 Bradford…   60721  30691  25084   13731    1331    5520    4395    3992 #>  9 42017 Bucks Co…  627668 251373 240763   59899   14477   57197   25651   25208 #> 10 42019 Butler C…  187798  84106  77725   24141    4498   15043    6118    6151 #> # … with abbreviated variable names ¹​E_TOTPOP, ²​E_POV150, ³​E_NOHSDP, ⁴​E_UNINSUR"},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"List of census variables for SVI calculation — census_variables","title":"List of census variables for SVI calculation — census_variables","text":"datasets contains list census variable names year 2012-2021.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of census variables for SVI calculation — census_variables","text":"","code":"census_variables_2012  census_variables_2013  census_variables_2014  census_variables_2015  census_variables_2016  census_variables_2017  census_variables_2018  census_variables_2019  census_variables_2020  census_variables_2021"},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of census variables for SVI calculation — census_variables","text":"## list census variables, grouped sublists named t0-t5 t0-t4 (2012).   t1-t4 represent 4 themes corresponding SVI   variables categorized :   * Socioeconomic   * Household Composition/Disability   * Minority Status/Language   * Housing Type/Transportation t0 represents 3 census variables total counts, corresponding   SVI variables categorized theme. t5 contains census   variables SVI \"adjunct variables\", included reference   used SVI calculation. 2012, adjunct variables included,   variable listed 2014 documentation 2012 Census data,   adjunct variables 2010 documentation. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List of census variables for SVI calculation — census_variables","text":"CDC/ATSDR SVI Documentation   <https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html>","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Census Data and Calculate Social Vulnerability Index (SVI) for One or\nMultiple Year(s)/State(s) — find_svi","title":"Retrieve Census Data and Calculate Social Vulnerability Index (SVI) for One or\nMultiple Year(s)/State(s) — find_svi","text":"wrapper [findSVI::get_census_data()]  [findSVI::get_svi()] retrieves census data produces SVI one  multiple years(s) state(s). multiple year-state entries, SVI  obtained entry-specific percentile ranking summarised one  table.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Census Data and Calculate Social Vulnerability Index (SVI) for One or\nMultiple Year(s)/State(s) — find_svi","text":"","code":"find_svi(year, state = NULL, geography, key = NULL, full.table = FALSE)"},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Census Data and Calculate Social Vulnerability Index (SVI) for One or\nMultiple Year(s)/State(s) — find_svi","text":"year vector containing years interest (available 2012-2021). Length >=1. Acting pairs `state`, `year` length `state`. exception single year entry (length 1), providing one state interest, supply `state = NULL` default `state = 'US'` retrieves processes nation level data obtain SVI. state vector containing states interest. Length >=0. Length 0 (`state = NULL`), `state = 'US'` must used single year argument, SVI calculated nation-level census data. cases, `state` must elements `year` (length). geography One geography level interest year-state combination (e.g.\"county\", \"zcta\", \"tract\"). key Census API key. Obtain one <https://api.census.gov/data/key_signup.html>. set , use `census_api_key(\"KEY GOES \")`, include argument. full.table Default `FALSE`, returning SVI table \"GEOID\", SVI theme themes. set `TRUE`, full SVI table individual SVI variables intermediate ranking calculations also included addition theme-related SVIs (similar style tables [CDC/ATSDR database](https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html)).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Census Data and Calculate Social Vulnerability Index (SVI) for One or\nMultiple Year(s)/State(s) — find_svi","text":"tibble summarised SVI one multiple year-state combination  interest. Rows represent geographic units, columns represent  SVI theme themes. Additional two columns end  indicate corresponding state year information. `full.table =  TRUE`, estimated count percentage values individual SVI variables  also included. description variable names (column names), please  refer [CDC/ATSDR  documentation](https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Census Data and Calculate Social Vulnerability Index (SVI) for One or\nMultiple Year(s)/State(s) — find_svi","text":"","code":"if (FALSE) { census_api_key(\"YOUR KEY GOES HERE\")  # Use with vectors for year and state ## for one year-state information (all ZCTAs of PA in 2019) find_svi(       year = 2019,       state = \"PA\",       geography = \"tract\"    )   ## for multiple year-state combination (all ZCTAs of RI in 2017 and PA in 2018) find_svi(       year = c(2017, 2018),       state = c(\"RI\", \"PA\"),       geography = \"zcta\"    )  # Use with a table of year-state information info <- tribble(     ~state, ~year,     \"AZ\", 2015,     \"AZ\", 2016,     \"PA\", 2020,     \"RI\", 2018)  find_svi(     year = info$year,     state = info$state,     geography = \"county\"    ) }"},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve census data for American Community Survey (with Tidycensus) — get_census_data","title":"Retrieve census data for American Community Survey (with Tidycensus) — get_census_data","text":"function uses [tidycensus::get_acs()] pre-defined  list variables retrieves ACS data SVI calculation. Note  Census API key required function work, can obtained  <https://api.census.gov/data/key_signup.html>. set key, use  `census_api_key(\"KEY GOES \")`, include argument.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve census data for American Community Survey (with Tidycensus) — get_census_data","text":"","code":"get_census_data(   year,   state = NULL,   geography,   county = NULL,   key = NULL,   geometry = FALSE,   ... )"},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve census data for American Community Survey (with Tidycensus) — get_census_data","text":"year year interest (available 2012-2021). state (Optional) Specify state interest. data multiple states retrieved together, ranking SVI calculation performed among states. `state = NULL` default, `state = 'US'` return nation-level data. geography geography interest (eg. state, county, zcta, tract) county (Optional) Specify county(s) interest, must combined value supplied \"state\". key Census API key. obtain one <https://api.census.gov/data/key_signup.html>. geometry Default FALSE regular tibble census data. set TRUE, returns tibble additional `geometry` column containing simple feature geometry. ... arguments; details please see [tidycensus::get_acs()]","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve census data for American Community Survey (with Tidycensus) — get_census_data","text":"tibble ACS data row represents enumeration unit  column represents variables (\"wide\" form).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve census data for American Community Survey (with Tidycensus) — get_census_data","text":"","code":"if (FALSE) { census_api_key(\"YOUR KEY GOES HERE\") get_census_data(2018, \"county\", \"PA\")}"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Social Vulnerability Index (SVI) for a Region from Census Data — get_svi","title":"Calculate Social Vulnerability Index (SVI) for a Region from Census Data — get_svi","text":"function calculates constructs SVI table  geographic level interest based [CDC/ATSDR SVI  documentation](<https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html>).  Briefly, SVI includes 4 themes variables represent different aspects  socioeconomic challenges, uses percentile ranking within geographic  level indicate relative social vulnerability subunits  geographic level.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Social Vulnerability Index (SVI) for a Region from Census Data — get_svi","text":"","code":"get_svi(year, data)"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Social Vulnerability Index (SVI) for a Region from Census Data — get_svi","text":"year year interest (available 2014-2021), must match year specified retrieving census data. data census data retrieved `get_census_data()`.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Social Vulnerability Index (SVI) for a Region from Census Data — get_svi","text":"tibble SVI rows representing geographic subunits,  columns indicating variable names (first two columns containing geographic  information). detailed description variable names (column names),  please refer [CDC/ATSDR documentation](https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Social Vulnerability Index (SVI) for a Region from Census Data — get_svi","text":"","code":"if (FALSE) { census_api_key(\"YOUR KEY GOES HERE\") pa2018 <- get_census_data(2018, \"county\", \"PA\") get_svi(2018, pa2018)}"},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"reference table valid input `state` `get_census_data()` `find_svi()`. addition, `state = \"US\"` `state = NULL` also accepted nation-level data.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"","code":"state_valid"},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"## data frame 3 columns 52 rows: st_abbr 2-letter abbreviation states. state State full name. fips_code Federal Information Processing System (FIPS) Codes states.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"County-state reference file 2020   https://www.census.gov/programs-surveys/popest/geographies/reference-files.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of census variables and formula for SVI calculation — variable_calculation","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"datasets contains table SVI variable names, related census variable names corresponding calculation formula year 2012-2021. used construct SVI results variables starting \"E_\"(estimate) \"EP_\"(percentage) obtaining census data. Sometimes SVI variables directly linked census variables, times one census variable(s) included derive SVI variable.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"","code":"variable_e_ep_calculation_2012  variable_e_ep_calculation_2013  variable_e_ep_calculation_2014  variable_e_ep_calculation_2015  variable_e_ep_calculation_2016  variable_e_ep_calculation_2017  variable_e_ep_calculation_2018  variable_e_ep_calculation_2019  variable_e_ep_calculation_2020  variable_e_ep_calculation_2021"},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"## data frame 3 columns various number rows, depending year: _variable_name prefix \"x\" followed year, eg. x2018_variable_name, column SVI variable name theme SVI variables categorized four themes/domains:   socioeconomic, household composition/disability, minority status/language   housing type/transportation. Theme 0 used 3 variables   representing total counts, theme 5 used adjunct variables (  included calculation). Adjunct variables included 2012 due   unavailable data/documentation. _table_field_calculation prefix \"x\" followed year, eg. x2018_table_field_calculation,   column contains corresponding census variable names, /calculation   using SVI/census variables. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"CDC/ATSDR SVI Documentation   <https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html>","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"tables contains ZIP Code Tabulation Areas (ZCTAs), intersecting counties states (state name, abbreviation, state FIPS code) nested . used `get_census_data()` retrieving ZCTA-level census data state, [tidycensus::get_acs()] (CRAN version) currently support obtaining state-specific ZCTA-level data.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"","code":"zcta_state_xwalk2021  zcta_state_xwalk2020  zcta_state_xwalk2019"},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"## data frame 5 columns various number rows, depending year: ZCTA 5 digit ZCTA code. st_code Federal Information Processing System (FIPS) Codes States. county County name within state ZCTA intersects/corresponds . state State full name corresponding FIPS code. st_abb Two-letter state abbreviation. object class tbl_df (inherits tbl, data.frame) 542995 rows 5 columns. object class data.frame 523727 rows 5 columns.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"Census ZCTA-county relationship file (2010)   https://www.census.gov/geographies/reference-files/time-series/geo/relationship-files.2010.html#list-tab-1709067297   Geocorr ZCTA-county relationship file (2020)   https://mcdc.missouri.edu/applications/geocorr2022.html   County-state reference file (2019, 2020, 2021)   https://www.census.gov/programs-surveys/popest/geographies/reference-files.html","code":""}]
