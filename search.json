[{"path":"https://heli-xu.github.io/findSVI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Heli Xu Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"get-census-data-with-geometry","dir":"Articles","previous_headings":"","what":"Get census data with geometry","title":"Mapping SVI for Spatial Analysis","text":"First, using get_census_data() obtain ZCTA-level data simple feature geometry Philadelphia (county), PA 2020 (Census API required). , showing first 10 rows data. geometry = TRUE, ’ll get tibble additional column containing simple feature geometry (MULTIPOLYGON).","code":"phl_zcta_2020_geo_data <- get_census_data(   year = 2020,    state = \"PA\",    county = \"Philadelphia\",   geography = \"zcta\",    geometry = TRUE) #> Simple feature collection with 10 features and 134 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.21402 ymin: 39.87734 xmax: -74.97371 ymax: 40.11273 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 135 #>    GEOID NAME        B06009_002E B06009_002M B09001_001E B09001_001M B11012_010E #>    <chr> <chr>             <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 19102 ZCTA5 19102           0          15         117         114          59 #>  2 19103 ZCTA5 19103         468         122        1503         378          66 #>  3 19104 ZCTA5 19104        3044         411        8411        1246        1891 #>  4 19106 ZCTA5 19106         565         198         715         187         101 #>  5 19107 ZCTA5 19107         961         258        1019         384         118 #>  6 19109 ZCTA5 19109           0          11           0          11           0 #>  7 19111 ZCTA5 19111        6489         746       16620        1410        2115 #>  8 19112 ZCTA5 19112           0          11           0          11           0 #>  9 19114 ZCTA5 19114        2085         500        6085         933         480 #> 10 19115 ZCTA5 19115        2568         551        6851         800         711 #> # ℹ 128 more variables: B11012_010M <dbl>, B11012_015E <dbl>, #> #   B11012_015M <dbl>, B16005_007E <dbl>, B16005_007M <dbl>, B16005_008E <dbl>, #> #   B16005_008M <dbl>, B16005_012E <dbl>, B16005_012M <dbl>, B16005_013E <dbl>, #> #   B16005_013M <dbl>, B16005_017E <dbl>, B16005_017M <dbl>, B16005_018E <dbl>, #> #   B16005_018M <dbl>, B16005_022E <dbl>, B16005_022M <dbl>, B16005_023E <dbl>, #> #   B16005_023M <dbl>, B16005_029E <dbl>, B16005_029M <dbl>, B16005_030E <dbl>, #> #   B16005_030M <dbl>, B16005_034E <dbl>, B16005_034M <dbl>, …"},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"get-svi-with-geometry","dir":"Articles","previous_headings":"","what":"Get SVI with geometry","title":"Mapping SVI for Spatial Analysis","text":"getting data ready, can supply tibble simple feature geometry get_svi(). get_svi() return full SVI table every SVI variables, intermediate percentile ranks, theme-specific SVIs overall SVI (consistent CDC/ATSDR SVI database, without MOE). visualization purposes, ’ll simplify table keep GEOID, geometry SVIs.","code":"phl_zcta_2020_geo_svi <- get_svi(   year = 2020,    data = phl_zcta_2020_geo_data   ) phl_zcta_2020_geo_svi %>% glimpse() #> Rows: 48 #> Columns: 64 #> $ GEOID       <chr> \"19102\", \"19103\", \"19104\", \"19106\", \"19107\", \"19109\", \"191… #> $ NAME        <chr> \"ZCTA5 19102\", \"ZCTA5 19103\", \"ZCTA5 19104\", \"ZCTA5 19106\"… #> $ geometry    <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.16854 3..., MULTIPOLYGON … #> $ E_TOTPOP    <dbl> 5335, 25113, 52480, 13536, 14689, 0, 67159, 0, 31448, 3550… #> $ E_HU        <dbl> 3967, 18038, 20416, 8597, 8920, 0, 26250, 0, 13909, 14976,… #> $ E_HH        <dbl> 3365, 15765, 16508, 7625, 7823, 0, 24355, 0, 13032, 14391,… #> $ E_POV150    <dbl> 834, 3494, 21918, 894, 3350, 0, 17235, 0, 4817, 5594, 7856… #> $ E_UNEMP     <dbl> 84, 453, 1692, 261, 388, 0, 2208, 0, 856, 1042, 840, 247, … #> $ E_HBURD     <dbl> 931, 4870, 8191, 1670, 2891, 0, 8433, 0, 3906, 4598, 4698,… #> $ E_NOHSDP    <dbl> 0, 468, 3044, 565, 961, 0, 6489, 0, 2085, 2568, 2640, 290,… #> $ E_UNINSUR   <dbl> 165, 608, 2605, 463, 677, 0, 6089, 0, 1143, 2386, 2143, 43… #> $ E_AGE65     <dbl> 896, 5330, 3771, 2521, 1485, 0, 10956, 0, 5758, 8673, 7151… #> $ E_AGE17     <dbl> 117, 1503, 8411, 715, 1019, 0, 16620, 0, 6085, 6851, 6812,… #> $ E_DISABL    <dbl> 333, 2147, 5885, 1057, 1723, 0, 11275, 0, 4722, 5561, 5217… #> $ E_SNGPNT    <dbl> 59, 71, 2060, 101, 146, 0, 2562, 0, 589, 1032, 438, 183, 9… #> $ E_LIMENG    <dbl> 0, 490, 877, 156, 732, 0, 6133, 0, 771, 4160, 5210, 133, 2… #> $ E_MINRTY    <dbl> 1270, 7579, 35619, 2864, 7181, 0, 39350, 0, 8930, 12535, 1… #> $ E_MUNIT     <dbl> 3543, 12841, 6474, 5989, 6123, 0, 3367, 0, 2321, 4401, 240… #> $ E_MOBILE    <dbl> 28, 48, 22, 0, 13, 0, 42, 0, 9, 96, 27, 0, 14, 16, 23, 0, … #> $ E_CROWD     <dbl> 42, 265, 750, 187, 380, 0, 1255, 0, 129, 573, 458, 57, 96,… #> $ E_NOVEH     <dbl> 1591, 8644, 8893, 2061, 4527, 0, 3579, 0, 1028, 2009, 1513… #> $ E_GROUPQ    <dbl> 410, 571, 14238, 1246, 1615, 0, 588, 0, 386, 513, 788, 108… #> $ EP_POV150   <dbl> 16.9, 14.2, 56.3, 7.2, 24.7, NaN, 25.9, NaN, 15.5, 16.1, 2… #> $ EP_UNEMP    <dbl> 2.2, 2.7, 7.4, 2.9, 4.1, NA, 6.6, NA, 5.2, 6.2, 5.1, 4.3, … #> $ EP_HBURD    <dbl> 27.7, 30.9, 49.6, 21.9, 37.0, NaN, 34.6, NaN, 30.0, 32.0, … #> $ EP_NOHSDP   <dbl> 0.0, 2.2, 13.3, 4.7, 8.3, NA, 14.1, NA, 8.9, 9.6, 10.3, 3.… #> $ EP_UNINSUR  <dbl> 3.1, 2.4, 5.0, 3.7, 4.6, NA, 9.1, NA, 3.7, 6.8, 6.4, 4.1, … #> $ EP_AGE65    <dbl> 16.8, 21.2, 7.2, 18.6, 10.1, NA, 16.3, NA, 18.3, 24.4, 21.… #> $ EP_AGE17    <dbl> 2.2, 6.0, 16.0, 5.3, 6.9, NaN, 24.7, NaN, 19.3, 19.3, 20.0… #> $ EP_DISABL   <dbl> 6.2, 8.7, 11.4, 8.5, 11.8, NA, 16.9, NA, 15.1, 15.9, 15.6,… #> $ EP_SNGPNT   <dbl> 1.8, 0.5, 12.5, 1.3, 1.9, NaN, 10.5, NaN, 4.5, 7.2, 3.4, 3… #> $ EP_LIMENG   <dbl> 0.0, 2.0, 1.7, 1.2, 5.1, NaN, 9.9, NaN, 2.6, 12.6, 16.2, 1… #> $ EP_MINRTY   <dbl> 23.8, 30.2, 67.9, 21.2, 48.9, NaN, 58.6, NaN, 28.4, 35.3, … #> $ EP_MUNIT    <dbl> 89.3, 71.2, 31.7, 69.7, 68.6, NaN, 12.8, NaN, 16.7, 29.4, … #> $ EP_MOBILE   <dbl> 0.7, 0.3, 0.1, 0.0, 0.1, NA, 0.2, NA, 0.1, 0.6, 0.2, 0.0, … #> $ EP_CROWD    <dbl> 1.2, 1.7, 4.5, 2.5, 4.9, NaN, 5.2, NaN, 1.0, 4.0, 3.6, 1.2… #> $ EP_NOVEH    <dbl> 47.3, 54.8, 53.9, 27.0, 57.9, NA, 14.7, NA, 7.9, 14.0, 11.… #> $ EP_GROUPQ   <dbl> 7.7, 2.3, 27.1, 9.2, 11.0, NaN, 0.9, NaN, 1.2, 1.4, 2.3, 1… #> $ EPL_POV150  <dbl> 0.2000, 0.0889, 0.9778, 0.0000, 0.4222, NA, 0.4667, NA, 0.… #> $ EPL_UNEMP   <dbl> 0.0000, 0.0222, 0.5111, 0.0444, 0.1333, NA, 0.4222, NA, 0.… #> $ EPL_HBURD   <dbl> 0.2222, 0.3111, 1.0000, 0.0222, 0.6000, NA, 0.5333, NA, 0.… #> $ EPL_NOHSDP  <dbl> 0.0000, 0.0222, 0.6222, 0.1333, 0.2667, NA, 0.6444, NA, 0.… #> $ EPL_UNINSUR <dbl> 0.0444, 0.0000, 0.2889, 0.0889, 0.2444, NA, 0.8222, NA, 0.… #> $ EPL_AGE65   <dbl> 0.7556, 0.9333, 0.0222, 0.8667, 0.2000, NA, 0.6889, NA, 0.… #> $ EPL_AGE17   <dbl> 0.0000, 0.0444, 0.2000, 0.0222, 0.0889, NA, 0.8222, NA, 0.… #> $ EPL_DISABL  <dbl> 0.0000, 0.0667, 0.1778, 0.0444, 0.2000, NA, 0.6444, NA, 0.… #> $ EPL_SNGPNT  <dbl> 0.0667, 0.0222, 0.6667, 0.0444, 0.0889, NA, 0.5778, NA, 0.… #> $ EPL_LIMENG  <dbl> 0.0000, 0.4667, 0.4000, 0.3333, 0.6444, NA, 0.8000, NA, 0.… #> $ EPL_MINRTY  <dbl> 0.0889, 0.1778, 0.5556, 0.0444, 0.4000, NA, 0.5111, NA, 0.… #> $ EPL_MUNIT   <dbl> 1.0000, 0.9778, 0.8667, 0.9556, 0.9333, NA, 0.5111, NA, 0.… #> $ EPL_MOBILE  <dbl> 0.9111, 0.7111, 0.2667, 0.0000, 0.2667, NA, 0.5333, NA, 0.… #> $ EPL_CROWD   <dbl> 0.1556, 0.3111, 0.8667, 0.5556, 0.9111, NA, 0.9556, NA, 0.… #> $ EPL_NOVEH   <dbl> 0.8889, 0.9778, 0.9556, 0.4667, 1.0000, NA, 0.2222, NA, 0.… #> $ EPL_GROUPQ  <dbl> 0.8667, 0.5556, 1.0000, 0.8889, 0.9556, NA, 0.2889, NA, 0.… #> $ SPL_theme1  <dbl> 0.4666, 0.4444, 3.4000, 0.2888, 1.6666, NA, 2.8888, NA, 1.… #> $ SPL_theme2  <dbl> 0.8223, 1.5333, 1.4667, 1.3110, 1.2222, NA, 3.5333, NA, 2.… #> $ SPL_theme3  <dbl> 0.0889, 0.1778, 0.5556, 0.0444, 0.4000, NA, 0.5111, NA, 0.… #> $ SPL_theme4  <dbl> 3.8223, 3.5334, 3.9557, 2.8668, 4.0667, NA, 2.5111, NA, 1.… #> $ RPL_theme1  <dbl> 0.0444, 0.0222, 0.6889, 0.0000, 0.3333, NA, 0.5778, NA, 0.… #> $ RPL_theme2  <dbl> 0.0222, 0.2222, 0.2000, 0.1111, 0.0667, NA, 0.8667, NA, 0.… #> $ RPL_theme3  <dbl> 0.0889, 0.1778, 0.5556, 0.0444, 0.4000, NA, 0.5111, NA, 0.… #> $ RPL_theme4  <dbl> 0.9556, 0.9333, 0.9778, 0.7111, 1.0000, NA, 0.5778, NA, 0.… #> $ SPL_themes  <dbl> 5.2001, 5.6889, 9.3780, 4.5110, 7.3555, NA, 9.4443, NA, 5.… #> $ RPL_themes  <dbl> 0.1778, 0.2667, 0.6889, 0.0444, 0.3778, NA, 0.7111, NA, 0.… svi <- phl_zcta_2020_geo_svi %>%    select(GEOID, geometry, contains(\"RPL_theme\")) svi %>% head(10)  #> Simple feature collection with 10 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.21402 ymin: 39.87734 xmax: -74.97371 ymax: 40.11273 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 7 #>    GEOID                    geometry RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 #>    <chr>          <MULTIPOLYGON [°]>      <dbl>      <dbl>      <dbl>      <dbl> #>  1 19102 (((-75.16854 39.94663, -75…     0.0444     0.0222     0.0889      0.956 #>  2 19103 (((-75.18166 39.95151, -75…     0.0222     0.222      0.178       0.933 #>  3 19104 (((-75.21367 39.96003, -75…     0.689      0.2        0.556       0.978 #>  4 19106 (((-75.15476 39.94573, -75…     0          0.111      0.0444      0.711 #>  5 19107 (((-75.16506 39.95361, -75…     0.333      0.0667     0.4         1     #>  6 19109 (((-75.16434 39.94935, -75…    NA         NA         NA          NA     #>  7 19111 (((-75.10653 40.04938, -75…     0.578      0.867      0.511       0.578 #>  8 19112 (((-75.19692 39.90088, -75…    NA         NA         NA          NA     #>  9 19114 (((-75.03509 40.07462, -75…     0.178      0.422      0.156       0.111 #> 10 19115 (((-75.07456 40.08912, -75…     0.378      0.822      0.289       0.822 #> # ℹ 1 more variable: RPL_themes <dbl>"},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"interactive-maps-for-overall-svi","dir":"Articles","previous_headings":"","what":"Interactive maps for overall SVI","title":"Mapping SVI for Spatial Analysis","text":"simple feature geometry, can visualize SVI patterns perform spatial SVI analysis mapping tool. , ’re using powerful package leaflet interactive maps. First ’ll examine missing value. Looks like ZCTAs missing values SVIs. (Upon checking full SVI table, can see individual SVI variables 0 ZCTAs.) ’ll remove ZCTAs better visualization. set interactive map overall SVI, leaflet() heavy lifting. , ’ll just add customized color palette labels appearance. interactive map, can visualize easily SVI varies different regions PA zoom examine specific ZCTAs interest, making helpful approach explore new ideas, patterns analyses.","code":"svi %>% filter(is.na(RPL_theme1))  #> Simple feature collection with 2 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.19692 ymin: 39.87734 xmax: -75.13541 ymax: 39.95011 #> Geodetic CRS:  NAD83 #> # A tibble: 2 × 7 #>   GEOID                     geometry RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 #> * <chr>           <MULTIPOLYGON [°]>      <dbl>      <dbl>      <dbl>      <dbl> #> 1 19109 (((-75.16434 39.94935, -75.…         NA         NA         NA         NA #> 2 19112 (((-75.19692 39.90088, -75.…         NA         NA         NA         NA #> # ℹ 1 more variable: RPL_themes <dbl> svi_clean <- svi %>% drop_na()  #above shows CRS NAD83, change to 4326 (WGS84) to avoid warning as below: #Warning: sf layer has inconsistent datum (+proj=longlat +datum=NAD83 +no_defs). #Need '+proj=longlat +datum=WGS84' st_crs(svi_clean) <- 4326 #> Warning: st_crs<- : replacing crs does not reproject data; use st_transform for #> that  #set color palette pal <- colorNumeric(   palette = c(\"orange\",\"navy\"),   domain = svi_clean$RPL_themes )  #set label zcta_label <- glue(\"<h3 style='margin: 0px'>{svi_clean$GEOID}<\/h3>                     overall SVI: {svi_clean$RPL_themes}\") %>%   map(~HTML(.x))  leaflet(svi_clean) %>%    addProviderTiles(providers$CartoDB.Voyager) %>%    addPolygons(color = \"white\",                weight = 0.5,               smoothFactor = 0.5,               opacity = 1,               fillColor = ~pal(RPL_themes),               fillOpacity = 0.8,               highlightOptions = highlightOptions(                 weight = 5,                 color = \"white\",                 fillOpacity = 0.8,                 bringToFront = TRUE),               label = zcta_label,               labelOptions = labelOptions(                 style = list(                   \"font-family\" = \"Fira Sans, sans-serif\",                   \"font-size\" = \"1.2em\"                 ))               ) %>%    addLegend(\"bottomleft\",             pal = pal,             values = ~RPL_themes,             title = \"Overall SVI in all ZCTAs in Philadelphia, PA (2020)\",             #labFormat = labelFormat(prefix = \"$\"),             opacity = 1)"},{"path":"https://heli-xu.github.io/findSVI/articles/custom_geo.html","id":"commuting-zones","dir":"Articles","previous_headings":"","what":"Commuting zones","title":"SVI Calculation for Custom Geographic Boundaries","text":"First proposed Tolbert Killian 1987 updated Fowler, Jensen Rhubart 2016, commuting zones (CZs) offer geographic delineation understand regional labor market, taking account commuter flow data American Community Survey (ACS) data. Geographically, CZs based counties (.e., counties fully nested CZs) cover entire US. Therefore, calculate SVI CZs, can retrieve data county level use crosswalk combine counties CZs level.","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/articles/custom_geo.html","id":"set-up-a-crosswalk","dir":"Articles","previous_headings":"Workflow","what":"Set up a crosswalk","title":"SVI Calculation for Custom Geographic Boundaries","text":"addition year region interest SVI calculation, need supply user-defined crosswalk (relationship file) Census geography customized geography. example, crosswalk CZ county 2020 downloaded Penn State Commuting Zones / Labor Markets data repository, modified keep IDs counties CZs. resulting table cty_cz_2020_xwalk stored package example template crosswalk. Note crosswalk data frame, column names GEOID representing Census geography (county) GEOID2 representing user-defined geography (CZ). GEOID completed nested GEOID2 census data can accurately aggregated customized geographic level. Optionally, crosswalk can include another column NAME description name user-defined geography, included final SVI output.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/custom_geo.html","id":"find_svi_x","dir":"Articles","previous_headings":"Workflow","what":"find_svi_x()","title":"SVI Calculation for Custom Geographic Boundaries","text":"obtain SVI geometries CZs US 2020, can use find_svi_x() retrieve nation-level census data, aggregate CZ level, calculate CZ-level SVIs. Alternatively, can separate data retrieval SVI calculation fine-tuning action, via get_census_data() exp=TRUE get_svi_x() visualize overall SVI CZ US (higher SVI, vulnerable community considered):  spatial information needed, can leave geometry argument (geometry = FALSE default) find_svi_x() get_census_data() obtain SVI variables.","code":"cz_svi_geo <- find_svi_x(   year = 2020,   geography = \"county\",   xwalk = cty_cz_2020_xwalk, #county-commuting zone crosswalk   geometry = TRUE ) data_geo <- get_census_data(   year = 2020,    geography = \"county\",   geometry = TRUE,   exp = TRUE )  svi_geo <- get_svi_x(   year = 2020,   data = data_geo,   xwalk = cty_cz_2020_xwalk #county-commuting zone crosswalk ) continent <- ggplot()+    geom_sf(data = svi_geo, aes(fill = RPL_themes))+   coord_sf(xlim = c(-130, -60), ylim = c(23, 50)) +     # Adjust xlim and ylim to focus on continental US   scale_fill_viridis_c(option = \"inferno\", direction = -1) +   labs(     title = \"Social Vulnerability Index of US Commuting Zones (2020)\",     caption = \"Data source: Census ACS and https://sites.psu.edu/psucz/\",     fill = \"Overall SVI\"     ) +   theme_minimal()+   theme(     plot.title = element_text(face = \"bold\", hjust = 0.5),     plot.caption = element_text(size = 8),     axis.text = element_blank(),     panel.grid = element_blank(),     legend.key.size = unit(0.5, \"cm\"),     legend.position = \"inside\",     legend.position.inside = c(0.9, 0.3),     legend.frame = element_rect(color = \"white\", linewidth = 1),     #legend.background = element_rect(color = \"black\"),     legend.box.background = element_rect(color = \"black\"),     legend.box.margin = margin(0,1,3,0, unit = \"mm\")   )  #Alaska inset_ak <- ggplot() +   geom_sf(data = svi_geo, aes(fill = RPL_themes)) +   coord_sf(xlim = c(-179.5,-130), ylim = c(51.2, 71.5)) +   scale_fill_viridis_c(option = \"inferno\", direction = -1) +   theme_minimal()+   theme(     axis.text = element_blank(),     panel.grid = element_blank(),     legend.position = \"none\"   )  #Hawaii inset_hi <- ggplot()+    geom_sf(data = svi_geo, aes(fill = RPL_themes))+   coord_sf(xlim = c(-178.3, -154.8), ylim = c(18.9, 28.5)) +     scale_fill_viridis_c(option = \"inferno\", direction = -1) +   theme_minimal()+   theme(     axis.text = element_blank(),     panel.grid = element_blank(),     legend.position = \"none\"   )  ggdraw(continent) +    draw_plot(inset_ak, -0.3, -0.3, scale = 0.3) +   draw_plot(inset_hi, -0.2, -0.3, scale = 0.3)"},{"path":"https://heli-xu.github.io/findSVI/articles/custom_geo.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"SVI Calculation for Custom Geographic Boundaries","text":"Validation SVI results, documented comparison SVI results findSVI CDC database standard operation. validate modified variable list calculation table exp=TRUE, ’ll use pseudo-crosswalk replicating county IDs (county-county crosswalk) compare results find_svi_x() CDC SVI. first 10 rows pseudo-crosswalk look like : Supplying crosswalk find_svi_x(), “aggregating” county , producing county-level SVIs comparison CDC SVI. main goal validate modified variable calculations using explicit denominators percent estimates produce results consistent CDC database. Now ready compare result CDC’s county-level SVI PA 2020 downloaded CDC/ATSDR SVI data","code":"ps_xwalk <- cty_cz_2020_xwalk %>%   select(GEOID) %>%    mutate(GEOID2 = GEOID)  ps_xwalk %>% head(10) #>    GEOID GEOID2 #> 1  01069  01069 #> 2  01023  01023 #> 3  01005  01005 #> 4  01107  01107 #> 5  01033  01033 #> 6  04012  04012 #> 7  04001  04001 #> 8  05081  05081 #> 9  05121  05121 #> 10 06037  06037 pa_cty_svi_x2020 <- find_svi_x(   year = 2020,   geography = \"county\",   state = \"PA\",   xwalk = ps_xwalk ) load(system.file(\"testdata\",\"cdc_pa_cty_svi2020.rda\",package = \"findSVI\")) #FIPS renamed to GEOID   join_RPL <- cdc_pa_cty_svi2020 %>%     select(GEOID,       cdc_RPL_themes = RPL_THEMES,       cdc_RPL_theme1 = RPL_THEME1,       cdc_RPL_theme2 = RPL_THEME2,       cdc_RPL_theme3 = RPL_THEME3,       cdc_RPL_theme4 = RPL_THEME4) %>%     mutate(GEOID = paste(GEOID)) %>%     left_join(pa_cty_svi_x2020 %>%         select(GEOID,           RPL_themes,           RPL_theme1,           RPL_theme2,           RPL_theme3,           RPL_theme4)) %>%     drop_na() %>%   ## remove NA rows     filter_all(all_vars(. >= 0)) #-999 in cdc data #> Joining with `by = join_by(GEOID)`  coeff <- cor(join_RPL$cdc_RPL_themes, join_RPL$RPL_themes)  join_RPL %>%    ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +   geom_point(color = \"#004C54\")+   geom_abline(slope = 1, intercept = 0)+   labs(     title = \"CDC vs. find_svi_x() county-level SVI for PA, 2020\",     subtitle = paste0(\"Comparison of overall percentile rankings (RPLs), correlation coefficient = \", coeff),     y = \"find_svi_x()\",     x = \"CDC\")+   theme(plot.title = element_text(size= 14, face = \"bold\"))"},{"path":"https://heli-xu.github.io/findSVI/articles/custom_geo.html","id":"appendix-mapping-svi-percentage-variables-to-census-variables","dir":"Articles","previous_headings":"","what":"Appendix: mapping SVI (percentage) variables to census variables","title":"SVI Calculation for Custom Geographic Boundaries","text":"Currently, variable retrieval process get_census_data() follows CDC/ATSDR SVI documentation strictly, SVI variables starting “EP_” (percent estimate) sometimes obtained directly Census, cases values computed Census variables. example, variable table 2020, calculation field (last column) EP_UNEMP Census variable calculation formula EP_POV150. result, DP03_0009PE Census directly used EP_UNEMP, whereas S1701_C01_001E obtained Census used calculate EP_POV150 (along E_POV150). However, aggregation purposes, percent estimates summed directly larger geographic level. Instead, need use summed “E_” SVI variables (count estimate) corresponding “total” count calculate CZ-level percent. Therefore, need modify variables like DP03_0009PE EP_UNEMP calculation field “EP_” variables formula explicitly defined denominator (total counts). example: integrate modified variable lists get_census_data(), introduce another argument exp, can specify two variables list used: (Default) exp = FALSE: use variables following CDC/ATSDR documentation. exp = TRUE: use variables explicitly defined denominator. use get_svi_x(), exp = TRUE recommended.","code":"variable_e_ep_calculation_2020 %>%   filter(     !theme == 5,      str_starts(x2020_variable_name, \"EP_\")     )  #> # A tibble: 16 × 3 #>    x2020_variable_name theme x2020_table_field_calculation    #>    <chr>               <dbl> <chr>                            #>  1 EP_POV150               1 (E_POV150 /S1701_C01_001E) * 100 #>  2 EP_UNEMP                1 DP03_0009PE                      #>  3 EP_HBURD                1 (E_HBURD /S2503_C01_001E) *100   #>  4 EP_NOHSDP               1 S0601_C01_033E                   #>  5 EP_UNINSUR              1 S2701_C05_001E                   #>  6 EP_AGE65                2 S0101_C02_030E                   #>  7 EP_AGE17                2 (E_AGE17 /E_TOTPOP) * 100        #>  8 EP_DISABL               2 DP02_0072PE                      #>  9 EP_SNGPNT               2 (E_SNGPNT/E_HH) *100             #> 10 EP_LIMENG               2 (E_LIMENG /B16005_001E) * 100    #> 11 EP_MINRTY               3 (E_MINRTY /E_TOTPOP) * 100       #> 12 EP_MUNIT                4 (E_MUNIT / E_HU) *100            #> 13 EP_MOBILE               4 DP04_0014PE                      #> 14 EP_CROWD                4 (E_CROWD /DP04_0002E) * 100      #> 15 EP_NOVEH                4 DP04_0058PE                      #> 16 EP_GROUPQ               4 (E_GROUPQ /E_TOTPOP) * 100 variable_cal_exp_2020 %>%    filter(     !theme == 5,      str_starts(x2020_variable_name, \"EP_\")     )  #> # A tibble: 16 × 3 #>    x2020_variable_name theme x2020_table_field_calculation     #>    <chr>               <dbl> <chr>                             #>  1 EP_POV150               1 (E_POV150 /S1701_C01_001E) * 100  #>  2 EP_UNEMP                1 (E_UNEMP /DP03_0003E) * 100       #>  3 EP_HBURD                1 (E_HBURD /S2503_C01_001E) *100    #>  4 EP_NOHSDP               1 (E_NOHSDP /B06009_001E) * 100     #>  5 EP_UNINSUR              1 (E_UNINSUR /S2701_C01_001E) * 100 #>  6 EP_AGE65                2 (E_AGE65 /E_TOTPOP) * 100         #>  7 EP_AGE17                2 (E_AGE17 /E_TOTPOP) * 100         #>  8 EP_DISABL               2 (E_DISABL /S2701_C01_001E) * 100  #>  9 EP_SNGPNT               2 (E_SNGPNT/E_HH) *100              #> 10 EP_LIMENG               2 (E_LIMENG /B16005_001E) * 100     #> 11 EP_MINRTY               3 (E_MINRTY /E_TOTPOP) * 100        #> 12 EP_MUNIT                4 (E_MUNIT / E_HU) *100             #> 13 EP_MOBILE               4 (E_MOBILE /DP04_0001E) * 100      #> 14 EP_CROWD                4 (E_CROWD /DP04_0002E) * 100       #> 15 EP_NOVEH                4 (E_NOVEH /DP04_0002E) * 100       #> 16 EP_GROUPQ               4 (E_GROUPQ /E_TOTPOP) * 100"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"what-is-svi","dir":"Articles","previous_headings":"","what":"What is SVI","title":"Introduction to findSVI","text":"First introduced 2011 (Flanagan , Gregory EW, Hallisey EJ, Heitgerd JL, Lewis B.), CDC/ATSDR Social Vulnerability Index (SVI) serves tool assess resilience communities considering socioeconomic demographic factors. valuable information plays crucial role preparing managing public health emergencies, enables effective planning social services public assistance. CDC/ATSDR Social Vulnerability Index (CDC/ATSDR SVI) utilizes 16 U.S. census variables grouped 4 domains/themes, obtains relative vulnerability level using percentile ranks geographic unit within region. Communities higher SVI considered vulnerable public health crisis. details, please refer CDC/ATSDR SVI website.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"why-we-might-need-to-calculate-svi","dir":"Articles","previous_headings":"","what":"Why we might need to calculate SVI","title":"Introduction to findSVI","text":"CDC/ATSDR releases SVI biannually shapefile csv format, counties/census tracts level within individual state US. SVI database useful, sometimes prefer --date census data different geographic levels. example, ’d like address questions ZCTA-level SVI Pennsylvania 2021, census tract-level SVI within counties Pennsylvania 2020, might need calculate SVI census data . findSVI aims support flexible specific SVI analysis cases additional options years (2012-2022) geographic levels (eg. ZCTA/places, combining multiple states). document introduces datasets basic tools findSVI census data retrieval SVI calculation.","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"census-variables-and-calculation-table","dir":"Articles","previous_headings":"Data: census variables","what":"Census variables and calculation table","title":"Introduction to findSVI","text":"retrieve census data calculate SVI based CDC/ATSDR documentation, series lists tables containing census variables information included package. census_variables_(2012-2022): list contains year-specific census variables needed SVI calculation. variable_ep_calculation_(2012-2022): table contains SVI variable names, theme group corresponding census variable(s) calculation formula. datasets documented ?census_variables ?variable_calculation.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"zcta-state-relationship-file-crosswalk","dir":"Articles","previous_headings":"Data: census variables","what":"ZCTA-state relationship file (crosswalk)","title":"Introduction to findSVI","text":"Currently, tidycensus::get_acs() support requests state-specific ZCTA-level data starting 2019(subject table)/2020(tables). likely due changes Census API, ZCTAs subgeographies states (ZCTAs cross state boundaries). obtain state-specific ZCTA-level data, three atasets ZCTA--state crosswalks included help selecting ZCTAs state(s) interest retrieving ZCTA data national level. crosswalk files documented ?zcta_state_xwalk.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"retrieve-census-data-with-get_census_data","dir":"Articles","previous_headings":"","what":"Retrieve census data with get_census_data()","title":"Introduction to findSVI","text":"get_census_data() uses tidycensus::get_acs() pre-defined list variables retrieves ACS data SVI calculation. list census variables built function, changes according year interest. Importantly, Census API key required function work, can obtained online set tidycensus::census_api_key(\"KEY GOES \"). arguments largely tidycensus::get_acs(), including year, geography state. example, can retrieve ZCTA-level data Rhode Island 2018: (First 10 rows columns shown, rest columns census variables.) Note ZCTA-level 2018, data retrieving state supported Census API/tidycensus. requests, get_census_data() first retrieves ZCTA-level data whole country, uses ZCTA--state relationship file (crosswalk) select ZCTAs state(s) interest. results longer running time requests.","code":"data <- get_census_data(2018, \"zcta\", \"RI\") data[1:10, 1:10] #> # A tibble: 10 × 10 #>    GEOID NAME        B17001_002E B17001_002M B19301_001E B19301_001M B06009_002E #>    <chr> <chr>             <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 02802 ZCTA5 02802         154         190       24925       14640          80 #>  2 02804 ZCTA5 02804         130          91       39065        6412          56 #>  3 02806 ZCTA5 02806         520         183       61534        3820         383 #>  4 02807 ZCTA5 02807          73          33       39287        7937          19 #>  5 02808 ZCTA5 02808         162         166       29356        3819         272 #>  6 02809 ZCTA5 02809        1619         368       34252        2269        2077 #>  7 02812 ZCTA5 02812          31          52       41718        5771          72 #>  8 02813 ZCTA5 02813         605         271       42612        4889         411 #>  9 02814 ZCTA5 02814         722         253       37750        3056         381 #> 10 02815 ZCTA5 02815          13          21       71975       22744           0 #> # ℹ 3 more variables: B06009_002M <dbl>, B09001_001E <dbl>, B09001_001M <dbl>"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"compute-svi-with-get_svi","dir":"Articles","previous_headings":"","what":"Compute SVI with get_svi()","title":"Introduction to findSVI","text":"get_svi() takes year census data (retrieved get_census_data()) arguments, calculate SVI based CDC/ATSDR documentation. function uses built-variable_calculation tables populate SVI variables census variables directly, basic summation/percentage calculation census variables. SVI variable,geographic unit ranked others selected region, followed summing rankings variables within theme perform percentile ranking SVI theme-specific overall SVI. example, obtain ZCTA-level SVI Rhode Island 2018: Columns include geographic unit information, individual SVI variables (“E_xx” “EP_xx”), intermediate percentile rankings (“EPL_xx” “SPL_xx”), theme-specific overall SVIs (“RPL_xx”).","code":"result <- get_svi(2018, data) glimpse(result) #> Rows: 77 #> Columns: 60 #> $ GEOID      <chr> \"02802\", \"02804\", \"02806\", \"02807\", \"02808\", \"02809\", \"0281… #> $ NAME       <chr> \"ZCTA5 02802\", \"ZCTA5 02804\", \"ZCTA5 02806\", \"ZCTA5 02807\",… #> $ E_TOTPOP   <dbl> 671, 2004, 16192, 827, 2565, 22258, 1208, 7780, 7673, 208, … #> $ E_HU       <dbl> 314, 947, 6393, 1856, 969, 9181, 402, 5173, 3350, 76, 14272… #> $ E_HH       <dbl> 223, 840, 6111, 429, 889, 8442, 402, 3200, 2903, 76, 13304,… #> $ E_POV      <dbl> 154, 130, 520, 73, 162, 1619, 31, 605, 722, 13, 2575, 143, … #> $ E_UNEMP    <dbl> 18, 12, 244, 21, 171, 424, 44, 330, 167, 0, 1016, 123, 459,… #> $ E_PCI      <dbl> 24925, 39065, 61534, 39287, 29356, 34252, 41718, 42612, 377… #> $ E_NOHSDP   <dbl> 80, 56, 383, 19, 272, 2077, 72, 411, 381, 0, 2011, 158, 523… #> $ E_AGE65    <dbl> 15, 351, 2680, 221, 267, 4578, 144, 1733, 1207, 16, 5520, 8… #> $ E_AGE17    <dbl> 220, 331, 4375, 143, 598, 3201, 323, 1265, 1489, 74, 6322, … #> $ E_DISABL   <dbl> 194, 200, 1453, 96, 184, 2234, 149, 818, 1172, 53, 5630, 39… #> $ E_SNGPNT   <dbl> 94, 47, 254, 36, 45, 447, 10, 202, 134, 0, 824, 176, 396, 9… #> $ E_MINRTY   <dbl> 87, 0, 1426, 49, 264, 1850, 146, 476, 518, 37, 2058, 606, 2… #> $ E_LIMENG   <dbl> 18, 0, 98, 0, 0, 416, 0, 0, 0, 0, 205, 47, 91, 0, 10, 14, 0… #> $ E_MUNIT    <dbl> 72, 0, 147, 90, 0, 592, 0, 38, 46, 0, 1119, 158, 1163, 60, … #> $ E_MOBILE   <dbl> 0, 13, 0, 37, 0, 0, 0, 232, 174, 0, 841, 98, 100, 231, 8, 0… #> $ E_CROWD    <dbl> 18, 0, 11, 10, 0, 71, 0, 68, 11, 0, 166, 44, 69, 15, 33, 0,… #> $ E_NOVEH    <dbl> 10, 13, 151, 11, 0, 530, 0, 90, 83, 0, 472, 0, 563, 29, 61,… #> $ E_GROUPQ   <dbl> 0, 0, 34, 39, 0, 3559, 0, 49, 10, 0, 452, 33, 59, 288, 20, … #> $ EP_POV     <dbl> 23.0, 6.5, 3.2, 8.8, 6.4, 8.6, 2.6, 7.8, 9.5, 6.3, 8.0, 2.4… #> $ EP_UNEMP   <dbl> 6.4, 1.0, 2.9, 4.6, 11.4, 3.6, 6.7, 7.4, 3.8, 0.0, 5.5, 3.3… #> $ EP_PCI     <dbl> 24925, 39065, 61534, 39287, 29356, 34252, 41718, 42612, 377… #> $ EP_NOHSDP  <dbl> 20.1, 3.9, 3.4, 2.8, 15.7, 14.0, 8.9, 7.0, 6.7, 0.0, 8.4, 3… #> $ EP_AGE65   <dbl> 2.2, 17.5, 16.6, 26.7, 10.4, 20.6, 11.9, 22.3, 15.7, 7.7, 1… #> $ EP_AGE17   <dbl> 32.8, 16.5, 27.0, 17.3, 23.3, 14.4, 26.7, 16.3, 19.4, 35.6,… #> $ EP_DISABL  <dbl> 28.9, 10.0, 9.0, 11.6, 7.2, 10.3, 12.5, 10.5, 15.3, 25.5, 1… #> $ EP_SNGPNT  <dbl> 42.2, 5.6, 4.2, 8.4, 5.1, 5.3, 2.5, 6.3, 4.6, 0.0, 6.2, 8.1… #> $ EP_MINRTY  <dbl> 13.0, 0.0, 8.8, 5.9, 10.3, 8.3, 12.1, 6.1, 6.8, 17.8, 6.3, … #> $ EP_LIMENG  <dbl> 3.1, 0.0, 0.6, 0.0, 0.0, 1.9, 0.0, 0.0, 0.0, 0.0, 0.7, 0.8,… #> $ EP_MUNIT   <dbl> 22.9, 0.0, 2.3, 4.8, 0.0, 6.4, 0.0, 0.7, 1.4, 0.0, 7.8, 6.6… #> $ EP_MOBILE  <dbl> 0.0, 1.4, 0.0, 2.0, 0.0, 0.0, 0.0, 4.5, 5.2, 0.0, 5.9, 4.1,… #> $ EP_CROWD   <dbl> 8.1, 0.0, 0.2, 2.3, 0.0, 0.8, 0.0, 2.1, 0.4, 0.0, 1.2, 2.0,… #> $ EP_NOVEH   <dbl> 4.5, 1.5, 2.5, 2.6, 0.0, 6.3, 0.0, 2.8, 2.9, 0.0, 3.5, 0.0,… #> $ EP_GROUPQ  <dbl> 0.0, 0.0, 0.2, 4.7, 0.0, 16.0, 0.0, 0.6, 0.1, 0.0, 1.4, 0.5… #> $ EPL_POV    <dbl> 0.9054, 0.4054, 0.1486, 0.5405, 0.3919, 0.5135, 0.0946, 0.4… #> $ EPL_UNEMP  <dbl> 0.6842, 0.1053, 0.1711, 0.4079, 0.9605, 0.2632, 0.7105, 0.8… #> $ EPL_PCI    <dbl> 0.8684, 0.4605, 0.0263, 0.4211, 0.7763, 0.6711, 0.3158, 0.2… #> $ EPL_NOHSDP <dbl> 0.9211, 0.2500, 0.1842, 0.1447, 0.8553, 0.8026, 0.5921, 0.4… #> $ EPL_AGE65  <dbl> 0.0789, 0.5132, 0.4474, 0.9605, 0.1842, 0.7895, 0.2105, 0.8… #> $ EPL_AGE17  <dbl> 0.9737, 0.2632, 0.9211, 0.3684, 0.8158, 0.1579, 0.9079, 0.2… #> $ EPL_DISABL <dbl> 1.0000, 0.1867, 0.1467, 0.4000, 0.1067, 0.2267, 0.4667, 0.2… #> $ EPL_SNGPNT <dbl> 0.9865, 0.4324, 0.2838, 0.7027, 0.3649, 0.3919, 0.1216, 0.5… #> $ EPL_MINRTY <dbl> 0.6447, 0.0000, 0.4211, 0.2237, 0.5000, 0.4079, 0.5921, 0.2… #> $ EPL_LIMENG <dbl> 0.8289, 0.0000, 0.4342, 0.0000, 0.0000, 0.7500, 0.0000, 0.0… #> $ EPL_MUNIT  <dbl> 0.9459, 0.0000, 0.2838, 0.3919, 0.0000, 0.4459, 0.0000, 0.2… #> $ EPL_MOBILE <dbl> 0.0000, 0.7973, 0.0000, 0.8378, 0.0000, 0.0000, 0.0000, 0.9… #> $ EPL_CROWD  <dbl> 1.0000, 0.0000, 0.2973, 0.8243, 0.0000, 0.4865, 0.0000, 0.7… #> $ EPL_NOVEH  <dbl> 0.4054, 0.1757, 0.2162, 0.2297, 0.0000, 0.5946, 0.0000, 0.2… #> $ EPL_GROUPQ <dbl> 0.0000, 0.0000, 0.2368, 0.8158, 0.0000, 0.9342, 0.0000, 0.4… #> $ SPL_theme1 <dbl> 3.3791, 1.2212, 0.5302, 1.5142, 2.9840, 2.2504, 1.7130, 1.9… #> $ SPL_theme2 <dbl> 3.0391, 1.3955, 1.7990, 2.4316, 1.4716, 1.5660, 1.7067, 1.9… #> $ SPL_theme3 <dbl> 1.4736, 0.0000, 0.8553, 0.2237, 0.5000, 1.1579, 0.5921, 0.2… #> $ SPL_theme4 <dbl> 2.3513, 0.9730, 1.0341, 3.0995, 0.0000, 2.4612, 0.0000, 2.6… #> $ RPL_theme1 <dbl> 0.9211, 0.2237, 0.0395, 0.3158, 0.8289, 0.6447, 0.4474, 0.6… #> $ RPL_theme2 <dbl> 1.0000, 0.1711, 0.3421, 0.7237, 0.2105, 0.2632, 0.3158, 0.3… #> $ RPL_theme3 <dbl> 0.8026, 0.0000, 0.4868, 0.1447, 0.2763, 0.5921, 0.3158, 0.1… #> $ RPL_theme4 <dbl> 0.4474, 0.1579, 0.2237, 0.8158, 0.0000, 0.4737, 0.0000, 0.6… #> $ SPL_themes <dbl> 10.2431, 3.5897, 4.2186, 7.2690, 4.9556, 7.4355, 4.0118, 6.… #> $ RPL_themes <dbl> 0.8553, 0.1184, 0.1579, 0.5263, 0.2237, 0.5526, 0.1447, 0.4…"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"wrapper-and-more-find_svi","dir":"Articles","previous_headings":"","what":"Wrapper and more: find_svi()","title":"Introduction to findSVI","text":"retrieve census data compute SVI one step, use find_svi(). get_census_data() accepts single year year (multiple states state) just like tidycensus::get_acs(), find_svi() accepts pairing vectors year state geography level. allows processing multiple year-state combinations one function, separate data retrieval SVI calculation every year-state entry returning summarised SVI table pairs year-state values. One important difference data retrieval find_svi() get_census_data() year-state combinations always evaluated “one year one state” – , option get census data multiple states (one year) get_census_data() disabled find_svi(). exception one--one rule, single year supplied year, can set state = NULL default perform nation-level data retrieval SVI calculation. SVI table output, find_svi() default returns summarised SVI table GEOID, theme-specific SVIs SVI 4 themes year-state combination. Alternatively, ’s option return full SVI table every SVI variable intermediate ranking values (get_svi()) setting full.table = TRUE. options, corresponding year state information included two separate columns table.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"single-year-state-entry","dir":"Articles","previous_headings":"Wrapper and more: find_svi()","what":"Single year-state entry","title":"Introduction to findSVI","text":"Using example , obtain ZCTA-level census data calculate SVI Rhode Island 2018 one step: glimpse first 10 rows summarised SVI table, additional columns indicating year state information. default, summarised table keeps GEOID SVIs. Set full.table = TRUE complete SVI table individual SVI variables census data (like result get_svi() shown previous section).","code":"onestep_result <- find_svi(2018, \"RI\", \"zcta\") onestep_result %>% head(10) #> # A tibble: 10 × 8 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 02802     0.921       1          0.803      0.447     0.855   2018 RI    #>  2 02804     0.224       0.171      0          0.158     0.118   2018 RI    #>  3 02806     0.0395      0.342      0.487      0.224     0.158   2018 RI    #>  4 02807     0.316       0.724      0.145      0.816     0.526   2018 RI    #>  5 02808     0.829       0.210      0.276      0         0.224   2018 RI    #>  6 02809     0.645       0.263      0.592      0.474     0.553   2018 RI    #>  7 02812     0.447       0.316      0.316      0         0.145   2018 RI    #>  8 02813     0.618       0.382      0.171      0.632     0.460   2018 RI    #>  9 02814     0.5         0.487      0.224      0.342     0.382   2018 RI    #> 10 02815     0.0263      0.513      0.342      0         0.0789  2018 RI"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"multiple-year-state-entries","dir":"Articles","previous_headings":"Wrapper and more: find_svi()","what":"Multiple year-state entries","title":"Introduction to findSVI","text":"multiple year-state combinations, supply two vectors year state arguments ’ll treated pairs. example, obtain county-level SVI New Jersey Pennsylvania 2017 2018, respectively: result, table summarising county-level SVI New Jersey 2017 Pennsylvania 2018, retrieving census data two year-state pairs (first 5 rows SVI results pair shown ). , data retrieval SVI calculation (percentile ranking) performed separately 2017-NJ 2018-PA, resulting SVIs combined summarised table. R functions accepts vectors arguments, another way supply year state pairs extract columns table. Suppose table called info_table containing year-state information ’d like include analysis: extract specific columns interest info_table year state arguments: , showing first 3 rows results year-state combination, ’re actually getting table SVIs counties 6 year-state pairs columns info_table. likely make things easier especially ’s long list year-state combinations process.","code":"summarise_results <- find_svi(   year = c(2017, 2018),   state = c(\"NJ\", \"PA\"),   geography = \"county\" )   summarise_results %>%    group_by(year, state) %>%    slice_head(n = 5) #> # A tibble: 10 × 8 #> # Groups:   year, state [2] #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 34001      0.95      0.8        0.65        1          0.95   2017 NJ    #>  2 34003      0.2       0.3        0.55        0.45       0.25   2017 NJ    #>  3 34005      0.3       0.5        0.35        0.4        0.3    2017 NJ    #>  4 34007      0.7       0.9        0.55        0.6        0.75   2017 NJ    #>  5 34009      0.65      0.6        0.1         0.55       0.45   2017 NJ    #>  6 42001      0.212     0.242      0.697       0.227      0.182  2018 PA    #>  7 42003      0.136     0.0758     0.742       0.576      0.212  2018 PA    #>  8 42005      0.621     0.530      0.0152      0.167      0.227  2018 PA    #>  9 42007      0.182     0.409      0.530       0.348      0.197  2018 PA    #> 10 42009      0.712     0.606      0.0758      0.288      0.394  2018 PA #>   year state #> 1 2017    AZ #> 2 2018    FL #> 3 2014    FL #> 4 2018    PA #> 5 2013    MA #> 6 2020    KY all_results <- find_svi(   year = info_table$year,   state = info_table$state,   geography = \"county\" )  all_results %>%    group_by(year, state) %>%    slice_head(n = 3) #> # A tibble: 18 × 8 #> # Groups:   year, state [6] #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 25001      0.231     0.462      0.0769     0           0      2013 MA    #>  2 25003      0.769     0.769      0.308      0.692       0.692  2013 MA    #>  3 25005      0.923     0.923      0.615      0.538       0.846  2013 MA    #>  4 12001      0.333     0          0.485      0.727       0.242  2014 FL    #>  5 12003      0.485     0.803      0.0606     0.424       0.454  2014 FL    #>  6 12005      0.242     0.652      0.197      0.394       0.288  2014 FL    #>  7 04001      1         0.929      0.857      0.714       1      2017 AZ    #>  8 04003      0.214     0.714      0.571      0.429       0.357  2017 AZ    #>  9 04005      0.357     0          0.214      0.857       0.286  2017 AZ    #> 10 12001      0.439     0          0.606      0.636       0.242  2018 FL    #> 11 12003      0.485     0.894      0.0758     0.439       0.439  2018 FL    #> 12 12005      0.318     0.803      0.318      0.5         0.470  2018 FL    #> 13 42001      0.212     0.242      0.697      0.227       0.182  2018 PA    #> 14 42003      0.136     0.0758     0.742      0.576       0.212  2018 PA    #> 15 42005      0.621     0.530      0.0152     0.167       0.227  2018 PA    #> 16 21001      0.580     0.109      0.538      0.689       0.445  2020 KY    #> 17 21003      0.664     0.782      0.277      0.353       0.555  2020 KY    #> 18 21005      0.235     0.622      0.487      0.0084      0.118  2020 KY"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"custom-boundaries-find_svi_x","dir":"Articles","previous_headings":"","what":"Custom Boundaries: find_svi_x()","title":"Introduction to findSVI","text":"calculate SVI custom geographic boundaries, use find_svi_x() supply additional crosswalk (relationship table) custom boundaries Census geographic level. census geographic level fully nested custom geographic boundaries, census data can aggregated custom level SVI calculation. example template, crosswalk US counties commuting zones 2020 stored package documented ?cty_cz_2020_xwalk2020. Using find_svi_x(), can retrieve census data county level, aggregate data commuting zone level, calculate SVI commuting zones. shows overall theme-specific SVIs commuting zones 1-10 (GEOID represents commuting zone IDs). Alternatively, also use get_census_data() exp=TRUE get_svi_x(). details, please see SVI Calculation Custom Geographic Boundaries.","code":"cz_svi2020 <- find_svi_x(   year = 2020,   geography = \"county\",   xwalk = cty_cz_2020_xwalk #county-commuting zone crosswalk )  cz_svi2020 %>%   select(GEOID, contains(\"RPL\")) %>%   head(10) #> # A tibble: 10 × 6 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes #>    <int>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #>  1     1      0.778      0.833      0.885     0.730       0.826 #>  2     2      0.734      0.436      0.698     0.388       0.625 #>  3     3      0.871      0.892      0.703     0.570       0.833 #>  4     4      0.881      0.498      0.838     0.947       0.876 #>  5     5      0.560      0.675      0.684     0.333       0.606 #>  6     6      0.799      0.813      0.605     0.302       0.720 #>  7     7      0.821      0.680      0.802     0.875       0.842 #>  8     8      0.694      0.888      0.438     0.0842      0.570 #>  9     9      0.899      0.969      0.838     0.918       0.962 #> 10    10      0.357      0.507      0.589     0.134       0.335"},{"path":"https://heli-xu.github.io/findSVI/articles/geo_context_of_svi.html","id":"nationwide-and-statewide-svi","dir":"Articles","previous_headings":"","what":"Nationwide and statewide SVI","title":"Geographic Context of SVI","text":"Although use findSVI nationwide- statewide-SVI, may convenient download data CDC/ATSDR Social Vulnerability Index (SVI) database, especially nationwide census tract-level data geometry. obtaining nationwide statewide(Pennsylvania) SVI either findSVI CDC’s database, filter result county keep data Philadelphia.","code":"#source: https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html #choose map data (recently changed to ESTI geodatabase), unzip files  # nationwide us_svi <- st_read(\"../../SVI2020_US_tract.gdb/\")  # statewide (PA) pa_svi <- st_read(\"../../SVI2020_PENNSYLVANIA_tract.gdb/\") # old format: pa_svi <- st_read(\"pa_ct_2020_shapefile/SVI2020_PENNSYLVANIA_tract.shp\")  # alternative: findSVI # us_data <- get_census_data(2020,  #   state = \"US\", #\"PA\" for statewide data #   geography = \"tract\",  #   geometry = TRUE) #  # us_svi <- get_svi(2020, us_data) # nationwide us_svi_phl <- us_svi %>%   select(1:7, contains(\"RPL_THEME\")) %>%   rename(GEOID = FIPS,     #format switched to ESRI gdb, col name change -7/28/23     geometry = Shape) %>%     #CDC use -999 as NAs   filter(RPL_THEMES >= 0,     ST_ABBR == \"PA\",     COUNTY == \"Philadelphia\")  glimpse(us_svi_phl) #> Rows: 388 #> Columns: 13 #> $ ST         <chr> \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\",… #> $ STATE      <chr> \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvan… #> $ ST_ABBR    <chr> \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\",… #> $ STCNTY     <chr> \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"4210… #> $ COUNTY     <chr> \"Philadelphia\", \"Philadelphia\", \"Philadelphia\", \"Philadelph… #> $ GEOID      <chr> \"42101000101\", \"42101000102\", \"42101000200\", \"42101000300\",… #> $ LOCATION   <chr> \"Census Tract 1.01, Philadelphia County, Pennsylvania\", \"Ce… #> $ RPL_THEME1 <dbl> 0.2486, 0.2251, 0.6340, 0.1153, 0.3515, 0.0017, 0.0473, 0.7… #> $ RPL_THEME2 <dbl> 0.1972, 0.0037, 0.0497, 0.2564, 0.2988, 0.0013, 0.0688, 0.0… #> $ RPL_THEME3 <dbl> 0.4678, 0.2809, 0.8235, 0.6105, 0.5988, 0.3492, 0.3249, 0.7… #> $ RPL_THEME4 <dbl> 0.4840, 0.8570, 0.9504, 0.9106, 0.9205, 0.3731, 0.6343, 0.9… #> $ RPL_THEMES <dbl> 0.2888, 0.1676, 0.6587, 0.4253, 0.5832, 0.0044, 0.1433, 0.7… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.152 39...., MULTIPOLYGON (… # statewide (PA) pa_svi_phl <- pa_svi %>%   select(1:7, contains(\"RPL_THEME\")) %>%   rename(GEOID = FIPS) %>%   filter(RPL_THEMES>= 0,     COUNTY == \"Philadelphia\")  glimpse(pa_svi_phl) #> Rows: 388 #> Columns: 13 #> $ ST         <chr> \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\",… #> $ STATE      <chr> \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvan… #> $ ST_ABBR    <chr> \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\",… #> $ STCNTY     <chr> \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"4210… #> $ COUNTY     <chr> \"Philadelphia\", \"Philadelphia\", \"Philadelphia\", \"Philadelph… #> $ GEOID      <chr> \"42101000101\", \"42101000102\", \"42101000200\", \"42101000300\",… #> $ LOCATION   <chr> \"Census Tract 1.01, Philadelphia County, Pennsylvania\", \"Ce… #> $ RPL_THEME1 <dbl> 0.3105, 0.2976, 0.7757, 0.1388, 0.4349, 0.0029, 0.0567, 0.8… #> $ RPL_THEME2 <dbl> 0.2015, 0.0029, 0.0464, 0.2955, 0.2479, 0.0012, 0.0620, 0.1… #> $ RPL_THEME3 <dbl> 0.7213, 0.5299, 0.9150, 0.8115, 0.8057, 0.6070, 0.5797, 0.8… #> $ RPL_THEME4 <dbl> 0.5494, 0.9005, 0.9729, 0.9576, 0.9582, 0.3605, 0.6789, 0.9… #> $ RPL_THEMES <dbl> 0.3802, 0.2253, 0.7677, 0.5244, 0.6817, 0.0059, 0.1658, 0.8… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.152 39...., MULTIPOLYGON (…"},{"path":"https://heli-xu.github.io/findSVI/articles/geo_context_of_svi.html","id":"county-specific-svi","dir":"Articles","previous_headings":"","what":"County-specific SVI","title":"Geographic Context of SVI","text":"retrieving data calculation geographic level state, need use get_census_data() followed get_svi(). (nation- state-level data processing without geometry, easiest option one-step find_svi().)","code":"phl_ct_2020_data <- get_census_data(   2020,    state = \"PA\",   county = \"Philadelphia\",   geography = \"tract\",   geometry = TRUE )  phl_ct_svi_2020 <- get_svi(2020, phl_ct_2020_data)%>%   select(GEOID, contains(\"RPL_theme\")) %>%   drop_na() glimpse(phl_ct_svi_2020) #> Rows: 390 #> Columns: 7 #> $ GEOID      <chr> \"42101000101\", \"42101000102\", \"42101000200\", \"42101000300\",… #> $ RPL_theme1 <dbl> 0.1080, 0.1414, 0.4267, 0.0437, 0.2057, 0.0026, 0.0180, 0.5… #> $ RPL_theme2 <dbl> 0.2128, 0.0103, 0.1333, 0.2282, 0.2641, 0.0026, 0.1179, 0.1… #> $ RPL_theme3 <dbl> 0.1769, 0.0436, 0.5359, 0.3051, 0.2923, 0.0769, 0.0615, 0.4… #> $ RPL_theme4 <dbl> 0.3846, 0.7282, 0.9154, 0.9128, 0.9436, 0.3308, 0.8436, 0.9… #> $ RPL_themes <dbl> 0.1385, 0.0846, 0.4692, 0.2538, 0.3974, 0.0000, 0.1333, 0.5… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.152 39...., MULTIPOLYGON (…  # matching id from nation/statewide SVI for mapping match_id <- pa_svi_phl$GEOID  phl_svi <- phl_ct_svi_2020 %>%    filter(GEOID %in% match_id)"},{"path":"https://heli-xu.github.io/findSVI/articles/geo_context_of_svi.html","id":"angles-of-a-story","dir":"Articles","previous_headings":"","what":"3 angles of a story","title":"Geographic Context of SVI","text":"visualization, ’ll create maps color scale.  can see, SVI values (actual color) vary among three maps depending percentile ranking performed obtain SVI, generally show pattern (tracts darker/lighter map). Overall, total areas included percentile ranking affect resulting SVI values, provide different perspectives look story. another note, studying social vulnerability within smaller region, especially metropolitan areas/cities, may helpful consider geographic context interpreting SVI better understand disparities among communities.","code":"plot_phl <- function(data, var){   ggplot(data)+     geom_sf(aes(fill={{var}}), size = 0.1)+     coord_sf(crs = st_crs(26915))+     scale_fill_distiller(       name = \"SVI (by tract):\",       breaks = c(0, 0.25, 0.5, 0.75, 1),       limits = c(0, 1),       palette = \"YlGn\",       direction = 1     )+     theme_minimal()+     theme(       plot.title = element_text(size = 12, hjust = 0.01),       plot.title.position = \"panel\",       legend.title = element_text(size = 9, margin = margin(b=10)),       axis.text = element_blank(),       panel.grid = element_blank(),       legend.position = \"inside\",       legend.position.inside = c(0.8, 0.18),       legend.key.size = unit(0.3, \"cm\"),       legend.key.height = unit(0.25, \"cm\"),       legend.ticks = element_blank()     ) }  nation <- us_svi_phl %>%   select(GEOID, geometry, RPL_THEMES) %>%   drop_na() %>%   plot_phl(.,RPL_THEMES)+   labs(title = \"Nationwide SVI: \\nPhiladelphia subset\")  state <- pa_svi_phl %>%   select(GEOID, geometry, RPL_THEMES) %>%   drop_na() %>%   plot_phl(., RPL_THEMES)+   labs(title = \"Statewide SVI: \\nPhiladelphia subset\")  county <- phl_svi %>%   select(GEOID, geometry, RPL_themes) %>%   drop_na() %>%   plot_phl(., RPL_themes)+   labs(title = \"County-specific SVI: \\nPhiladelphia\")  plot_grid(nation, state, county, nrow = 1)"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"zcta-level-svi-in-philadelphia-for-2020","dir":"Articles","previous_headings":"","what":"ZCTA-level SVI in Philadelphia for 2020","title":"SVI and Health Outcome","text":"retrieving census data geometry, ’ll use get_census_data() get_svi() obtain SVI. ’ll keep GEOID(ZCTA) SVI-related columns resulting SVI table.","code":"phl_zcta_2020_geo_data <- get_census_data(   2020,   geography = \"zcta\",   state = \"PA\",   county = \"Philadelphia\",   geometry = TRUE )  phl_zcta_2020_geo_svi <- get_svi(2020,   data = phl_zcta_data_geo_2020) %>%   select(GEOID, contains(\"RPL_theme\"))  phl_zcta_2020_geo_svi #> Simple feature collection with 48 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.28027 ymin: 39.84987 xmax: -74.95578 ymax: 40.13799 #> Geodetic CRS:  NAD83 #> # A tibble: 48 × 7 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #>  1 19102     0.0444     0.0222     0.0889      0.956     0.178  #>  2 19103     0.0222     0.222      0.178       0.933     0.267  #>  3 19104     0.689      0.2        0.556       0.978     0.689  #>  4 19106     0          0.111      0.0444      0.711     0.0444 #>  5 19107     0.333      0.0667     0.4         1         0.378  #>  6 19109    NA         NA         NA          NA        NA      #>  7 19111     0.578      0.867      0.511       0.578     0.711  #>  8 19112    NA         NA         NA          NA        NA      #>  9 19114     0.178      0.422      0.156       0.111     0.2    #> 10 19115     0.378      0.822      0.289       0.822     0.533  #> # ℹ 38 more rows #> # ℹ 1 more variable: geometry <MULTIPOLYGON [°]>"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"zcta-level-covid-19-data-in-philadelphia","dir":"Articles","previous_headings":"","what":"ZCTA-level COVID-19 data in Philadelphia","title":"SVI and Health Outcome","text":"Disease-related data ZCTA level usually easily accessible privacy reasons. , ’ll use data COVID-19 Health Inequities Cities Dashboard, great resource released Drexel University’s Urban Health Collaborative Big Cities Health Coalition (BCHC). addition data available download, dashboard provides informative visualizations COVID-19 related outcomes inequities time across BCHC cities. downloading raw data, can select Philadelphia city variables interest (hospitalization per 100k).","code":"#source:https://github.com/Drexel-UHC/covid_inequities_project #bchc_raw <- read_csv(\"../../byZCTA_bchc.csv\")  phl_hosp <- bchc_raw %>%   filter(city == \"Philadelphia\") %>%   mutate(GEOID = paste(zcta), .after = zcta) %>%   select(GEOID, hosp_per_100k)  glimpse(phl_hosp) #> Rows: 46 #> Columns: 2 #> $ GEOID         <chr> \"19102\", \"19103\", \"19104\", \"19106\", \"19107\", \"19111\", \"1… #> $ hosp_per_100k <dbl> 194.288, 846.618, 1280.807, 405.019, 1555.831, 1133.411,…"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"joining-data-for-visualzation","dir":"Articles","previous_headings":"","what":"Joining data for visualzation","title":"SVI and Health Outcome","text":"ZCTA-level SVI COVID-19 data ready, can join together GEOID(ZCTA), keeping spatial information.","code":"phl_svi_covid <- phl_hosp %>%   left_join(phl_zcta_2020_geo_svi, by = \"GEOID\") %>%   #although geometry sticky, after wrangling, class() become df   st_as_sf(sf_column_name = \"geometry\")  phl_svi_covid %>%    select(GEOID, NAME, hosp_per_100k, RPL_themes, geometry) %>%    head(10) #> Simple feature collection with 10 features and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.24074 ymin: 39.92578 xmax: -74.97371 ymax: 40.13799 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 5 #>    GEOID NAME        hosp_per_100k RPL_themes                           geometry #>    <chr> <chr>               <dbl>      <dbl>                 <MULTIPOLYGON [°]> #>  1 19102 ZCTA5 19102          194.     0.178  (((-75.16854 39.94663, -75.16845 … #>  2 19103 ZCTA5 19103          847.     0.267  (((-75.18166 39.95151, -75.18091 … #>  3 19104 ZCTA5 19104         1281.     0.689  (((-75.21367 39.96003, -75.21204 … #>  4 19106 ZCTA5 19106          405.     0.0444 (((-75.15476 39.94573, -75.15449 … #>  5 19107 ZCTA5 19107         1556.     0.378  (((-75.16506 39.95361, -75.16332 … #>  6 19111 ZCTA5 19111         1133.     0.711  (((-75.10653 40.04938, -75.10457 … #>  7 19114 ZCTA5 19114         1336.     0.2    (((-75.03509 40.07462, -75.03081 … #>  8 19115 ZCTA5 19115         1502.     0.533  (((-75.07456 40.08912, -75.07127 … #>  9 19116 ZCTA5 19116         1226.     0.489  (((-75.04426 40.11571, -75.04386 … #> 10 19118 ZCTA5 19118         1038.     0.133  (((-75.24022 40.0836, -75.23895 4…"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"maps","dir":"Articles","previous_headings":"Joining data for visualzation","what":"Maps","title":"SVI and Health Outcome","text":"visualize spatial pattern directly, can plot SVI COVID-19 data Philadelphia neighborhoods (ZCTAs) directly maps:","code":"plot_data <- phl_svi_covid %>%   select(GEOID, geometry, RPL_themes, hosp_per_100k) %>%   drop_na()  # function for map plot_phl <- function(data, var){   ggplot(data)+     geom_sf(aes(fill=cut({{var}},       breaks = quantile({{var}}, probs = seq(0, 1, 0.2)), dig.lab = 4, include.lowest = TRUE)),       size = 0.1)+     coord_sf(crs = st_crs(26915))+     theme_minimal()+     theme(       legend.title = element_text(size = 10),       axis.text = element_blank(),       panel.grid = element_blank(),       legend.position = \"inside\",       legend.position.inside = c(0.82, 0.03),       legend.text = element_text(size = 9),       legend.key.size = unit(0.4, \"cm\"),       plot.background = element_rect(color = \"black\", fill=NA, linewidth = 0.1),       plot.margin = unit(c(0, 0.5, 1, 0.5), \"cm\")     ) }  # assemble plots svi <- plot_phl(plot_data, RPL_themes)+   scale_fill_brewer(     name = \"Overall SVI (2020)\",     labels = c(\"0.0 - 0.2\", \"0.2 - 0.4\", \"0.4 - 0.6\", \"0.6 - 0.8\", \"0.8 - 1.0\"),     palette = \"Blues\"   )+   labs(title = \"Social Vulnerability\")+   theme(plot.title = element_text(size = 13, hjust = -0.1, vjust = -0.1))  covid_hosp <- plot_phl(plot_data, hosp_per_100k)+   scale_fill_brewer(     name = \"Hospitalizations/100k\",     labels = c(\"194 - 1,038\", \"1,038 - 1,336\", \"1,336 - 1,654\", \"1,654 - 1,921\", \"1,921 - 2,913\"),     palette = \"YlOrBr\"   )+   labs(title = \"COVID-19 Hospitalizations\")+   theme(plot.title = element_text(size = 13, hjust = -0.2, vjust = -0.1))  maps <- plot_grid(svi, covid_hosp)  title <- ggdraw() +    draw_label(     \"SVI and COVID-19 hospitalizations in Philadelphia Neighborhoods (ZCTAs)\",     fontface = 'bold',     size = 14,     x = 0,     hjust = 0   ) +   theme(plot.margin = margin(0, 0, 0, 7))  caption <- ggdraw()+   draw_label(     \"COVID-19 data are cumulative till 8/2022\",      size = 9,     x = 0.7,     hjust = 0)+   theme(plot.margin = margin(0, 7, 0, 0))  plot_grid(   title, maps, caption,   ncol = 1,   rel_heights = c(0.1, 1, 0.05) )"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"correlation","dir":"Articles","previous_headings":"Joining data for visualzation","what":"Correlation","title":"SVI and Health Outcome","text":"look possible correlation SVI COVID-19 hospitalizations, ’ll use scatter plot visualize relationships:  correlation coefficient 0.7030584, overall SVI shown strongly associated COVID-19 hospitalizations Philadelphia neighborhoods, higher hospitalization rate found neighborhoods higher social vulnerability. consistent story COVID-19 Health Inequities Cities Dashboard, found socially vulnerable neighborhoods 129.4% higher hospitalizations per 100k compared least socially vulnerable neighborhoods.","code":"phl_svi_covid %>%   ggplot(aes(x = RPL_themes, y = hosp_per_100k)) +   geom_point()+   labs(     title = \"Social Vulnerability and COVID-19 Hospitalizations \\nin Philadelphia Neighborhoods\",     caption = \"COVID-19 data are cumulative till 8/2022\",      x = \"Overall SVI (2020)\",     y = \"Hospitalizations per 100k\") +   theme_bw()+   theme(     text = element_text(size = 13),     plot.title = element_text(size = 14, face = \"bold\"),     axis.title = element_text(size = 12, face = \"bold\"),     legend.title = element_text(size = 13),     plot.caption = element_text(size = 9, color = \"#4D4948\")   )"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"SVI and Health Outcome","text":"Diez Roux, ., Kolker, J., Barber, S., Bilal, U., Mullachery, P., Schnake-Mahl, ., McCulley, E., Vaidya, V., Ran, L., Rollins, H., Furukawa, ., Koh, C., Sharaf, ., Dureja, K. (2021). COVID-19 Health Inequities Cities Dashboard. Drexel University: Urban Health Collaborative. http://www.covid-inequities.info/.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/svi-validation.html","id":"svi-variables-and-census-variables","dir":"Articles","previous_headings":"","what":"SVI variables and Census variables","title":"Validation of SVI results","text":"year 2012-2021, include dataset package containing SVI variable names, theme group corresponding Census variable(s) calculation formula. information extracted CDC/ATSDR SVI documentation years available, modified years CDC/ATSDR SVI database cover (Census variable names different, otherwise information adjacent year used). datasets documented ?variable_calculation. show datasets one table easier search reference, columns represent: year: year columns data correspond . SVI_var: SVI variable names (“E_xx” counts, “EP_xx” normalized values). Theme: SVI variables categorized four themes/domains: 1) Socioeconomic Status, 2) Household Characteristics, 3) Racial & Ethnic Minority Status 4) Housing Type/Transportation. Theme 0 used 3 variables representing total counts, theme 5 used adjunct variables (included calculation). Census_var: Census variable name(s) corresponding SVI variable, /calculation using SVI/census variables.","code":"datasets <- list(    variable_e_ep_calculation_2012,   variable_e_ep_calculation_2013,   variable_e_ep_calculation_2014,   variable_e_ep_calculation_2015,   variable_e_ep_calculation_2016,   variable_e_ep_calculation_2017,   variable_e_ep_calculation_2018,    variable_e_ep_calculation_2019,   variable_e_ep_calculation_2020,   variable_e_ep_calculation_2021,   variable_e_ep_calculation_2022 )  process_file <- function(file) {   data_tmp <- file   year_info <- colnames(file)      data_tmp %>%      mutate(year = str_sub(year_info[1], 2, 5), .before = 1) %>%      rename(SVI_var = 2,     Theme = 3,     Census_var = 4)  }    all_datasets <- datasets %>%    map(process_file) %>%    list_rbind() reactable(   all_datasets,   filterable = TRUE,   searchable = TRUE,   resizable = TRUE,   bordered = TRUE,   minRows = 10,   highlight = TRUE,   showPageSizeOptions = TRUE,   pageSizeOptions = c(10,20,30),   defaultPageSize = 10 )"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-validation.html","id":"correlation-between-cdcatsdr-and-findsvi-results","dir":"Articles","previous_headings":"","what":"Correlation between CDC/ATSDR and findSVI results","title":"Validation of SVI results","text":"part automatic unit testing package, county-level SVI calculations Pennsylvania 2014, 2016, 2018 2020 compared SVI results downloaded CDC/ATSDR SVI database tests considered passed correlation coefficient higher 0.9995. example, comparing two versions SVIs 2020:  Similarly, visualize two versions census tract-level SVIs Delaware 2020. (considerations datasets size package, census tract-level SVI comparisons included automated testing.)","code":"#source:https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html #rename FIPS to GEOID load(system.file(\"testdata\",\"cdc_pa_cty_svi2020.rda\",package = \"findSVI\"))  #Census API key required for raw data retrieval pa_cty_raw <- load(system.file(\"testdata\",\"pa_cty_raw2020.rda\",package = \"findSVI\")) %>%     get()  output <- get_svi(2020, pa_cty_raw)  join_RPL <- cdc_pa_cty_svi2020 %>%     select(GEOID,       cdc_RPL_themes = RPL_THEMES,       cdc_RPL_theme1 = RPL_THEME1,       cdc_RPL_theme2 = RPL_THEME2,       cdc_RPL_theme3 = RPL_THEME3,       cdc_RPL_theme4 = RPL_THEME4) %>%     mutate(GEOID = paste(GEOID)) %>%     left_join(output %>%         select(GEOID,           RPL_themes,           RPL_theme1,           RPL_theme2,           RPL_theme3,           RPL_theme4)) %>%     drop_na() %>%   ## remove NA rows     filter_all(all_vars(. >= 0)) #-999 in cdc data #> Joining with `by = join_by(GEOID)`  coeff1 <- cor(join_RPL$cdc_RPL_themes, join_RPL$RPL_themes)  join_RPL %>%    ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +   geom_point(color = \"#004C54\")+   geom_abline(slope = 1, intercept = 0)+   labs(title = \"CDC vs. findSVI CTY-level SVI for Pennsylvania in 2020\",     subtitle = paste0(\"Comparison of overall percentile ranking (RPLs), correlation coefficient = \", coeff1),     y = \"findSVI\",     x = \"CDC\")+   theme(plot.title = element_text(size= 15)) load(system.file(\"extdata\",\"cdc_de_ct_svi2020.rda\",package = \"findSVI\"))  de_ct_raw <- load(system.file(\"extdata\",\"de_ct_raw2020.rda\",package = \"findSVI\")) %>%     get()  output2 <- get_svi(2020, de_ct_raw)  join_RPL2 <- cdc_de_ct_svi2020 %>%     select(GEOID,       cdc_RPL_themes = RPL_THEMES,       cdc_RPL_theme1 = RPL_THEME1,       cdc_RPL_theme2 = RPL_THEME2,       cdc_RPL_theme3 = RPL_THEME3,       cdc_RPL_theme4 = RPL_THEME4) %>%     mutate(GEOID = paste(GEOID)) %>%     left_join(output2 %>%         select(GEOID,           RPL_themes,           RPL_theme1,           RPL_theme2,           RPL_theme3,           RPL_theme4)) %>%     drop_na() %>%   ## remove NA rows     filter_all(all_vars(. >= 0)) #-999 in cdc data #> Joining with `by = join_by(GEOID)`  coeff2 <- round(cor(join_RPL2$cdc_RPL_themes, join_RPL2$RPL_themes),6)  join_RPL2 %>%    ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +   geom_point(color = \"#004C54\")+   geom_abline(slope = 1, intercept = 0)+   labs(title = \"CDC vs. findSVI CT-level SVI for Delaware in 2020\",     subtitle = paste0(\"Comparison of overall percentile ranking (RPLs), correlation coefficient = \", coeff2),     y = \"findSVI\",     x = \"CDC\")+   theme(plot.title = element_text(size= 15))"},{"path":"https://heli-xu.github.io/findSVI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Heli Xu. Author, maintainer, copyright holder. Ran Li. Contributor. Usama Bilal. Contributor.","code":""},{"path":"https://heli-xu.github.io/findSVI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xu H (2025). findSVI: Calculate Social Vulnerability Index Communities. R package version 0.1.2.9000, https://heli-xu.github.io/findSVI/, https://github.com/heli-xu/findSVI.","code":"@Manual{,   title = {findSVI: Calculate Social Vulnerability Index for Communities},   author = {Heli Xu},   year = {2025},   note = {R package version 0.1.2.9000,     https://heli-xu.github.io/findSVI/},   url = {https://github.com/heli-xu/findSVI}, }"},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"findsvi-","dir":"","previous_headings":"","what":"Calculate Social Vulnerability Index for Communities","title":"Calculate Social Vulnerability Index for Communities","text":"goal findSVI calculate regional CDC/ATSDR Social Vulnerability Index (SVI) geographic level interest using US census data American Community Survey.","code":""},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Calculate Social Vulnerability Index for Communities","text":"CDC/ATSDR releases SVI biannually counties/census tracts level US individual state (can downloaded ). findSVI aims support flexible specific SVI analysis additional options years (2012-2022) geographic levels (e.g., ZCTA/places, combining multiple states). find SVI one multiple year-state pair(s): find_svi(): retrieves US census data (Census API key required) calculates SVI based CDC/ATSDR SVI documentation year-state pair geography level. cases, find_svi() easiest option. ’d like include simple feature geometry customized requests census data retrieval (e.g., different geography level year-state pair, multiple states one year), can process individual entry using following: get_census_data(): retrieves US census data (Census API key required); get_svi(): calculates SVI census data supplied. Essentially, find_svi() wrapper function get_census_data() get_svi() also supports iteration 1-year--1-state pairs geography level.","code":""},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Social Vulnerability Index for Communities","text":"Install findSVI package via CRAN: Alternatively, can install development version findSVI GitHub :","code":"install.packages(\"findSVI\") # install.packages(\"devtools\") devtools::install_github(\"heli-xu/findSVI\")"},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calculate Social Vulnerability Index for Communities","text":"find county-level SVI New Jersey (NJ) 2017, Pennsylvania (PA) 2018: (First 5 rows results 2017-NJ 2018-PA shown. ‘RPL_themes` indicates overall SVI, ’RPL_theme1’ ‘RPL_theme4’ indicate theme-specific SVIs.) retrieve county-level census data get SVI PA 2020: (First 10 rows columns shown, rest columns census variables SVI calculation.) find SVI custom geographic boundaries: …xwalk supplied users define relationship Census geography (‘GEOID’) custom geographic level (‘GEOID2’). Census geography fully nested custom geographic level interest. example, first 10 rows county-commuting zone crosswalk shown : crosswalk, county-level census data aggregated commuting zone-level, SVI calculated commuting zone. shows overall theme-specific SVI first 10 rows, GEOIDs representing commuting zone IDs.","code":"library(findSVI) library(dplyr)  summarise_results <- find_svi(   year = c(2017, 2018),   state = c(\"NJ\", \"PA\"),   geography = \"county\" ) summarise_results %>%    group_by(year, state) %>%    slice_head(n = 5) #> # A tibble: 10 × 8 #> # Groups:   year, state [2] #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 34001      0.95      0.8        0.65        1          0.95   2017 NJ    #>  2 34003      0.2       0.3        0.55        0.45       0.25   2017 NJ    #>  3 34005      0.3       0.5        0.35        0.4        0.3    2017 NJ    #>  4 34007      0.7       0.9        0.55        0.6        0.75   2017 NJ    #>  5 34009      0.65      0.6        0.1         0.55       0.45   2017 NJ    #>  6 42001      0.212     0.242      0.697       0.227      0.182  2018 PA    #>  7 42003      0.136     0.0758     0.742       0.576      0.212  2018 PA    #>  8 42005      0.621     0.530      0.0152      0.167      0.227  2018 PA    #>  9 42007      0.182     0.409      0.530       0.348      0.197  2018 PA    #> 10 42009      0.712     0.606      0.0758      0.288      0.394  2018 PA data <- get_census_data(2020, \"county\", \"PA\") data[1:10, 1:10] #> # A tibble: 10 × 10 #>    GEOID NAME        B06009_002E B06009_002M B09001_001E B09001_001M B11012_010E #>    <chr> <chr>             <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 42001 Adams Coun…        7788         602       20663          NA        1237 #>  2 42003 Allegheny …       45708        1713      228296          49       24311 #>  3 42005 Armstrong …        3973         305       12516           9         912 #>  4 42007 Beaver Cou…        7546         640       31915          NA        3380 #>  5 42009 Bedford Co…        3996         317        9386          11         468 #>  6 42011 Berks Coun…       36488        1356       93714          44        8812 #>  7 42013 Blair Coun…        7292         679       24920          19        2552 #>  8 42015 Bradford C…        4395         362       13358          NA         969 #>  9 42017 Bucks Coun…       25651        1306      128008          53        8222 #> 10 42019 Butler Cou…        6118         468       37577          NA        2121 #> # ℹ 3 more variables: B11012_010M <dbl>, B11012_015E <dbl>, B11012_015M <dbl> result <- get_svi(2020, data) glimpse(result) #> Rows: 67 #> Columns: 63 #> $ GEOID       <chr> \"42001\", \"42003\", \"42005\", \"42007\", \"42009\", \"42011\", \"420… #> $ NAME        <chr> \"Adams County, Pennsylvania\", \"Allegheny County, Pennsylva… #> $ E_TOTPOP    <dbl> 102627, 1218380, 65356, 164781, 48154, 419062, 122495, 607… #> $ E_HU        <dbl> 42525, 602416, 32852, 79587, 24405, 167514, 56960, 30691, … #> $ E_HH        <dbl> 39628, 545695, 28035, 72086, 19930, 156389, 51647, 25084, … #> $ E_POV150    <dbl> 13573, 212117, 13566, 28766, 10130, 77317, 27397, 13731, 5… #> $ E_UNEMP     <dbl> 2049, 32041, 1735, 4249, 1033, 12196, 2765, 1331, 14477, 4… #> $ E_HBURD     <dbl> 9088, 133524, 5719, 15764, 3952, 40982, 12146, 5520, 57197… #> $ E_NOHSDP    <dbl> 7788, 45708, 3973, 7546, 3996, 36488, 7292, 4395, 25651, 6… #> $ E_UNINSUR   <dbl> 5656, 46333, 2632, 6242, 3310, 25627, 6155, 3992, 25208, 6… #> $ E_AGE65     <dbl> 20884, 230745, 14496, 35351, 10950, 72293, 25372, 12948, 1… #> $ E_AGE17     <dbl> 20663, 228296, 12516, 31915, 9386, 93714, 24920, 13358, 12… #> $ E_DISABL    <dbl> 13860, 163671, 11431, 25878, 7797, 57961, 20278, 8731, 653… #> $ E_SNGPNT    <dbl> 1719, 29689, 1159, 4167, 681, 10507, 3096, 1397, 11396, 29… #> $ E_LIMENG    <dbl> 1318, 9553, 130, 606, 64, 16570, 388, 172, 11502, 449, 185… #> $ E_MINRTY    <dbl> 11624, 269795, 2096, 18205, 1672, 123611, 7120, 2733, 1089… #> $ E_MUNIT     <dbl> 821, 82729, 1180, 4563, 635, 11010, 3629, 1011, 25508, 660… #> $ E_MOBILE    <dbl> 2882, 4147, 3289, 3012, 3491, 4628, 4094, 4419, 4764, 6464… #> $ E_CROWD     <dbl> 468, 4697, 238, 693, 217, 1878, 451, 472, 2916, 489, 446, … #> $ E_NOVEH     <dbl> 1726, 72338, 2058, 5824, 961, 13331, 4216, 2086, 11711, 49… #> $ E_GROUPQ    <dbl> 4140, 33976, 795, 2933, 481, 13171, 3289, 736, 9462, 5592,… #> $ EP_POV150   <dbl> 13.8, 17.9, 21.0, 17.7, 21.4, 19.0, 22.9, 22.9, 9.7, 13.2,… #> $ EP_UNEMP    <dbl> 3.9, 4.9, 5.5, 5.1, 4.5, 5.6, 4.7, 4.7, 4.2, 4.6, 5.2, 10.… #> $ EP_HBURD    <dbl> 22.9, 24.5, 20.4, 21.9, 19.8, 26.2, 23.5, 22.0, 23.8, 19.4… #> $ EP_NOHSDP   <dbl> 10.8, 5.2, 8.2, 6.2, 11.3, 12.8, 8.3, 10.2, 5.7, 4.6, 8.0,… #> $ EP_UNINSUR  <dbl> 5.6, 3.8, 4.1, 3.8, 6.9, 6.2, 5.1, 6.6, 4.1, 3.3, 4.1, 3.2… #> $ EP_AGE65    <dbl> 20.3, 18.9, 22.2, 21.5, 22.7, 17.3, 20.7, 21.3, 18.7, 18.8… #> $ EP_AGE17    <dbl> 20.1, 18.7, 19.2, 19.4, 19.5, 22.4, 20.3, 22.0, 20.4, 20.0… #> $ EP_DISABL   <dbl> 13.7, 13.6, 17.6, 15.8, 16.3, 14.0, 16.8, 14.5, 10.5, 12.8… #> $ EP_SNGPNT   <dbl> 4.3, 5.4, 4.1, 5.8, 3.4, 6.7, 6.0, 5.6, 4.7, 3.8, 5.3, 8.1… #> $ EP_LIMENG   <dbl> 1.4, 0.8, 0.2, 0.4, 0.1, 4.2, 0.3, 0.3, 1.9, 0.3, 0.1, 0.0… #> $ EP_MINRTY   <dbl> 11.3, 22.1, 3.2, 11.0, 3.5, 29.5, 5.8, 4.5, 17.4, 5.6, 7.6… #> $ EP_MUNIT    <dbl> 1.9, 13.7, 3.6, 5.7, 2.6, 6.6, 6.4, 3.3, 10.1, 7.9, 5.7, 2… #> $ EP_MOBILE   <dbl> 6.8, 0.7, 10.0, 3.8, 14.3, 2.8, 7.2, 14.4, 1.9, 7.7, 4.7, … #> $ EP_CROWD    <dbl> 1.2, 0.9, 0.8, 1.0, 1.1, 1.2, 0.9, 1.9, 1.2, 0.6, 0.8, 1.2… #> $ EP_NOVEH    <dbl> 4.4, 13.3, 7.3, 8.1, 4.8, 8.5, 8.2, 8.3, 4.9, 6.4, 11.0, 9… #> $ EP_GROUPQ   <dbl> 4.0, 2.8, 1.2, 1.8, 1.0, 3.1, 2.7, 1.2, 1.5, 3.0, 5.1, 1.7… #> $ EPL_POV150  <dbl> 0.0758, 0.2727, 0.5303, 0.2424, 0.5606, 0.3788, 0.6818, 0.… #> $ EPL_UNEMP   <dbl> 0.1212, 0.4242, 0.6818, 0.5000, 0.2576, 0.6970, 0.3636, 0.… #> $ EPL_HBURD   <dbl> 0.5303, 0.6970, 0.2424, 0.4394, 0.1970, 0.8636, 0.5909, 0.… #> $ EPL_NOHSDP  <dbl> 0.7273, 0.0152, 0.2424, 0.1061, 0.8182, 0.9091, 0.2727, 0.… #> $ EPL_UNINSUR <dbl> 0.5152, 0.1061, 0.1364, 0.1061, 0.7424, 0.6667, 0.3939, 0.… #> $ EPL_AGE65   <dbl> 0.4848, 0.2727, 0.7879, 0.7121, 0.8788, 0.0909, 0.5606, 0.… #> $ EPL_AGE17   <dbl> 0.5909, 0.1970, 0.2576, 0.3333, 0.3939, 0.9091, 0.6212, 0.… #> $ EPL_DISABL  <dbl> 0.2576, 0.2273, 0.7727, 0.5000, 0.5909, 0.3333, 0.6667, 0.… #> $ EPL_SNGPNT  <dbl> 0.2273, 0.6364, 0.1515, 0.7424, 0.0455, 0.8636, 0.7879, 0.… #> $ EPL_LIMENG  <dbl> 0.7576, 0.6515, 0.0909, 0.2879, 0.0303, 0.9697, 0.1667, 0.… #> $ EPL_MINRTY  <dbl> 0.6515, 0.8636, 0.0303, 0.6364, 0.0455, 0.9242, 0.2879, 0.… #> $ EPL_MUNIT   <dbl> 0.1515, 0.9545, 0.4242, 0.6970, 0.1970, 0.7727, 0.7576, 0.… #> $ EPL_MOBILE  <dbl> 0.4394, 0.0303, 0.6818, 0.2121, 0.9091, 0.1515, 0.5000, 0.… #> $ EPL_CROWD   <dbl> 0.4091, 0.1818, 0.0909, 0.2576, 0.3333, 0.4091, 0.1818, 0.… #> $ EPL_NOVEH   <dbl> 0.0000, 0.9848, 0.4545, 0.5909, 0.0455, 0.6818, 0.6061, 0.… #> $ EPL_GROUPQ  <dbl> 0.6667, 0.4697, 0.0758, 0.2879, 0.0455, 0.5455, 0.4394, 0.… #> $ SPL_theme1  <dbl> 1.9698, 1.5152, 1.8333, 1.3940, 2.5758, 3.5152, 2.3029, 2.… #> $ SPL_theme2  <dbl> 2.3182, 1.9849, 2.0606, 2.5757, 1.9394, 3.1666, 2.8031, 2.… #> $ SPL_theme3  <dbl> 0.6515, 0.8636, 0.0303, 0.6364, 0.0455, 0.9242, 0.2879, 0.… #> $ SPL_theme4  <dbl> 1.6667, 2.6211, 1.7272, 2.0455, 1.5304, 2.5606, 2.4849, 2.… #> $ RPL_theme1  <dbl> 0.2424, 0.1667, 0.1970, 0.1364, 0.5455, 0.9242, 0.3636, 0.… #> $ RPL_theme2  <dbl> 0.3788, 0.2121, 0.2273, 0.5758, 0.1667, 0.9091, 0.6970, 0.… #> $ RPL_theme3  <dbl> 0.6515, 0.8636, 0.0303, 0.6364, 0.0455, 0.9242, 0.2879, 0.… #> $ RPL_theme4  <dbl> 0.1212, 0.5606, 0.1515, 0.2576, 0.0455, 0.5152, 0.4848, 0.… #> $ SPL_themes  <dbl> 6.6062, 6.9848, 5.6514, 6.6516, 6.0911, 10.1666, 7.8788, 8… #> $ RPL_themes  <dbl> 0.2273, 0.2879, 0.0909, 0.2424, 0.1667, 0.9545, 0.5152, 0.… cz_svi <- find_svi_x(   year = 2020,   geography = \"county\",   xwalk = cty_cz_2020_xwalk #county-commuting zone crosswalk ) cty_cz_2020_xwalk %>% head(10) #>    GEOID GEOID2 #> 1  01069      3 #> 2  01023      9 #> 3  01005      3 #> 4  01107      4 #> 5  01033     10 #> 6  04012     37 #> 7  04001     32 #> 8  05081     55 #> 9  05121     46 #> 10 06037     37 cz_svi %>%    select(GEOID, contains(\"RPL\")) %>%   head(10) #> # A tibble: 10 × 6 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes #>    <int>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #>  1     1      0.778      0.833      0.885     0.730       0.826 #>  2     2      0.734      0.436      0.698     0.388       0.625 #>  3     3      0.871      0.892      0.703     0.570       0.833 #>  4     4      0.881      0.498      0.838     0.947       0.876 #>  5     5      0.560      0.675      0.684     0.333       0.606 #>  6     6      0.799      0.813      0.605     0.302       0.720 #>  7     7      0.821      0.680      0.802     0.875       0.842 #>  8     8      0.694      0.888      0.438     0.0842      0.570 #>  9     9      0.899      0.969      0.838     0.918       0.962 #> 10    10      0.357      0.507      0.589     0.134       0.335"},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"List of census variables for SVI calculation — census_variables","title":"List of census variables for SVI calculation — census_variables","text":"datasets contains list census variable names year 2012-2022.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of census variables for SVI calculation — census_variables","text":"","code":"census_variables_2012  census_variables_2013  census_variables_2014  census_variables_2015  census_variables_2016  census_variables_2017  census_variables_2018  census_variables_2019  census_variables_2020  census_variables_2021  census_variables_2022  census_variables_exp_2012  census_variables_exp_2013  census_variables_exp_2014  census_variables_exp_2015  census_variables_exp_2016  census_variables_exp_2017  census_variables_exp_2018  census_variables_exp_2019  census_variables_exp_2020  census_variables_exp_2021  census_variables_exp_2022"},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of census variables for SVI calculation — census_variables","text":"object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 5. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"a-list-of-census-variables-grouped-into-sublists-named-t-t-or","dir":"Reference","previous_headings":"","what":"a list of census variables, grouped into sublists named t0-t5 or","title":"List of census variables for SVI calculation — census_variables","text":"t0-t4 (2012). t1-t4 represent 4 themes corresponding SVI variables categorized : Socioeconomic Household Composition/Disability Minority Status/Language Housing Type/Transportation t0 represents 3 census variables total counts, corresponding SVI variables categorized theme. t5 contains census variables SVI \"adjunct variables\", included reference used SVI calculation. 2012, adjunct variables included, variable listed 2014 documentation 2012 Census data, adjunct variables 2010 documentation. Datasets starting census_variable_ contains variables corresponding variable_e_ep_calculation_ series tables, \"EP_\" (percent) variables retrieved directly Census available; Datasets starting census_variables_exp_ contains variables corresponding variable_cal_exp_ tables, denominators \"EP_\" variables explicitly defined using census variables (adjunct variables modified).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List of census variables for SVI calculation — census_variables","text":"CDC/ATSDR SVI Documentation https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/cty_cz_2020_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationship file (crosswalk) between US counties and commuting zones — cty_cz_2020_xwalk","title":"Relationship file (crosswalk) between US counties and commuting zones — cty_cz_2020_xwalk","text":"table contains GEOIDs US counties commuting zones nested . Commuting zones can used study regional economy considerations urban-rural interconnections across state lines. details refer papers  Fowler Jensen Rhubart (2016) Fowler (2024).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/cty_cz_2020_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship file (crosswalk) between US counties and commuting zones — cty_cz_2020_xwalk","text":"","code":"cty_cz_2020_xwalk"},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/cty_cz_2020_xwalk.html","id":"a-data-frame-with-columns-and-rows-","dir":"Reference","previous_headings":"","what":"A data frame with 2 columns and 3222 rows:","title":"Relationship file (crosswalk) between US counties and commuting zones — cty_cz_2020_xwalk","text":"GEOID US county FIPS code. GEOID2 Commuting zone ID year 2020.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/cty_cz_2020_xwalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Relationship file (crosswalk) between US counties and commuting zones — cty_cz_2020_xwalk","text":"https://sites.psu.edu/psucz/data/","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/findSVI-package.html","id":null,"dir":"Reference","previous_headings":"","what":"findSVI: Calculate Social Vulnerability Index for Communities — findSVI-package","title":"findSVI: Calculate Social Vulnerability Index for Communities — findSVI-package","text":"Developed CDC/ATSDR (Centers Disease Control Prevention/ Agency Toxic Substances Disease Registry), Social Vulnerability Index (SVI) serves tool assess resilience communities taking account socioeconomic demographic factors. Provided year(s), region(s) geographic level interest, 'findSVI' retrieves required variables US census data calculates SVI communities specified area based CDC/ATSDR SVI documentation. Reference calculation methods: Flanagan , Gregory EW, Hallisey EJ, Heitgerd JL, Lewis B (2011) doi:10.2202/1547-7355.1792 .","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/findSVI-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"findSVI: Calculate Social Vulnerability Index for Communities — findSVI-package","text":"Maintainer: Heli Xu xuheli91@gmail.com (ORCID) [copyright holder] contributors: Ran Li rl627@drexel.edu (ORCID) [contributor] Usama Bilal ub45@drexel.edu (ORCID) [contributor]","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"find_svi() like wrapper get_census_data() get_svi() retrieves census data produces SVI one multiple years(s) state(s). multiple year-state entries, SVI obtained percentile rankings entry summarised one table. Note Census API key required function work, can obtained https://api.census.gov/data/key_signup.html set using tidycensus::census_api_key().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"","code":"find_svi(year, state = NULL, geography, key = NULL, full.table = FALSE)"},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"year vector containing years interest (available 2012-2022). Length >=1. Acting pairs state, year length state. exception single year entry (length 1), providing one state interest, supply state = NULL default state = 'US' retrieves processes nation level data obtain SVI. state vector containing states interest. Length >=0. Length 0 (state = NULL), state = 'US' must used single year argument, SVI calculated nation-level census data. cases, state must elements year (length). geography One geography level interest year-state combination (e.g.\"county\", \"zcta\", \"tract\"). key Census API key. Obtain one https://api.census.gov/data/key_signup.html. set , use tidycensus::census_api_key(\"KEY GOES \"), include argument. full.table Default FALSE, returning SVI table \"GEOID\", SVI theme themes. set TRUE, full SVI table individual SVI variables intermediate ranking calculations also included addition theme-related SVIs (similar style tables CDC/ATSDR database).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"tibble summarised SVI one multiple year-state combination(s) interest. Rows represent geographic units, columns represent SVI theme themes. Additional two columns end indicate corresponding state year information. full.table = TRUE, estimated count percentage values individual SVI variables also included. description variable names (column names), please refer CDC/ATSDR documentation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required # For one year-state entry find_svi(       year = 2019,       state = \"AZ\",       geography = \"county\"    )   # For multiple year-state pairs ## All ZCTAs for 2017-AZ; 2017-DE; and 2018-DC year <- c(2017, 2017, 2018) state <- c(\"AZ\", \"DE\", \"DC\") info <- data.frame(year, state)  find_svi(       year = info$year,       state = info$state,       geography = \"zcta\"    )  }"},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve census data and calculate SVI for a customized geographic level — find_svi_x","title":"Retrieve census data and calculate SVI for a customized geographic level — find_svi_x","text":"find_svi_x() like wrapper get_census_data() get_svi_x() retrieves census data produces SVI customized geographic level consisted Census geography. census data retrieved Census geographic level, estimate counts summed across customized geographic level calculate SVI. Note Census API key required function work, can obtained https://api.census.gov/data/key_signup.html set using tidycensus::census_api_key().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve census data and calculate SVI for a customized geographic level — find_svi_x","text":"","code":"find_svi_x(   year,   geography,   state = NULL,   county = NULL,   key = NULL,   geometry = FALSE,   xwalk )"},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve census data and calculate SVI for a customized geographic level — find_svi_x","text":"year year interest (available 2012-2022). geography Census geography level interest (e.g.\"county\", \"zcta\", \"tract\"). state (Optional) Specify state interest. Default state = NULL state = 'US' return nation-level data. county (Optional) Specify county interest, must combined value supplied \"state\". key Census API key. Obtain one https://api.census.gov/data/key_signup.html. set , use tidycensus::census_api_key(\"KEY GOES \"), include argument. geometry Default FALSE retrieving census data without spatial information. Set TRUE retrieving census data additional geometry column containing simple feature geometry. xwalk crosswalk (relationship table) Census geographic level customized geographic level interest. crosswalk US counties commuting zones cty_cz_2020_xwalk included example, please set column names crosswalk follows: GEOID Identifiers Census geographic level. Must contain values GEOID column data, compatible data type (character). GEOID2 Identifiers (characters numeric values) customized geographic level larger geographic Census geographic level. Census geographic level nested customized geographic level. NAME optional column names description customized geographic level.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve census data and calculate SVI for a customized geographic level — find_svi_x","text":"tibble SVI rows representing customized geographic units (column name GEOID), columns indicating variable names (first two columns containing geographic information). detailed description variable names (column names), please refer CDC/ATSDR documentation.","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve census data and calculate SVI for a customized geographic level — find_svi_x","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required    find_svi_x(     year = 2020,     geography = \"county\",     xwalk = cty_cz_2020_xwalk     ) }"},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve American Community Survey data for SVI variables — get_census_data","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"function uses tidycensus::get_acs() pre-defined list variables retrieves ACS data SVI calculation. Note Census API key required function work, can obtained https://api.census.gov/data/key_signup.html set using tidycensus::census_api_key().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"","code":"get_census_data(   year,   geography,   state = NULL,   county = NULL,   key = NULL,   geometry = FALSE,   exp = FALSE,   ... )"},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"year year interest (available 2012-2022). geography geography interest (eg. state, county, zcta, tract) state (Optional) Specify state interest. data multiple states retrieved together, ranking SVI calculation performed among states. state = NULL default, state = 'US' return nation-level data. county (Optional) Specify county(s) interest, must combined value supplied \"state\". key Census API key. Obtain one https://api.census.gov/data/key_signup.html. Include argument set key using tidycensus::census_api_key(\"KEY GOES \"). geometry Default FALSE regular tibble census data. set TRUE, returns tibble additional geometry column containing simple feature geometry. exp Default FALSE retrieving EP_(percent estimate) variables directly ACS available (described CDC/ADSTR SVI dictionary). set TRUE, uses explicitly defined denominators retrieves ACS data calculate EP variables easier aggregation downstream analysis (e.g. get_svi_x()). ... arguments; details please see tidycensus::get_acs()","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"tibble ACS data row represents enumeration (geographic) unit column represents census variable (\"wide\" form).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required  get_census_data(     year = 2018,     geography = \"county\",     state = \"PA\"   ) }"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SVI for communities in a region from census data — get_svi","title":"Calculate SVI for communities in a region from census data — get_svi","text":"get_svi() calculates constructs SVI table geographic level interest based CDC/ATSDR SVI documentation. Briefly, taking account 4 themes census variables represent challenges socioeconomic status, household characteristics, racial ethnic minority status housing/transportation, SVI uses percentile ranking within region indicate relative social vulnerability geographic units (communities) region.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SVI for communities in a region from census data — get_svi","text":"","code":"get_svi(year, data)"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SVI for communities in a region from census data — get_svi","text":"year year interest (available 2012-2021), must match year specified retrieving census data. data census data retrieved get_census_data().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate SVI for communities in a region from census data — get_svi","text":"tibble SVI rows representing geographic units, columns indicating variable names (first two columns containing geographic information). detailed description variable names (column names), please refer CDC/ATSDR documentation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate SVI for communities in a region from census data — get_svi","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required  pa2018 <- get_census_data(     year = 2018,     geography = \"county\",     state = \"PA\")   get_svi(2018, pa2018) }"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SVI for communities from census data using customized boundaries — get_svi_x","title":"Calculate SVI for communities from census data using customized boundaries — get_svi_x","text":"get_svi_x() calculates constructs SVI table customized geographic level interest based CDC/ATSDR SVI documentation. supplying crosswalk (relationship table) Census geographic level customized geographic level, census data summed across customized geographic units, SVI calculated accordingly indicate relative social vulnerability geographic units (communities).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SVI for communities from census data using customized boundaries — get_svi_x","text":"","code":"get_svi_x(year, data, xwalk)"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SVI for communities from census data using customized boundaries — get_svi_x","text":"year year interest (available 2012-2021), must match year specified retrieving census data. data census data retrieved get_census_data(). xwalk crosswalk (relationship table) Census geographic level customized geographic level interest. crosswalk US counties commuting zones cty_cz_2020_xwalk included example, please set column names crosswalk follows: GEOID Identifiers Census geographic level. Must contain values GEOID column data, compatible data type (character). GEOID2 Identifiers (characters numeric values) customized geographic level larger geographic Census geographic level. Census geographic level nested customized geographic level. NAME optional column names description customized geographic level.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate SVI for communities from census data using customized boundaries — get_svi_x","text":"tibble SVI rows representing customized geographic units (column name GEOID), columns indicating variable names (first two columns containing geographic information). detailed description variable names (column names), please refer CDC/ATSDR documentation.","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate SVI for communities from census data using customized boundaries — get_svi_x","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required cty2020 <- get_census_data(     year = 2020,     geography = \"county\",     exp = TRUE    )  get_svi_x(year = 2020, data = cty2020, xwalk = cty_cz_2020_xwalk) }"},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"reference table valid input state get_census_data() find_svi(). addition, state = \"US\" state = NULL also accepted nation-level data.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"","code":"state_valid"},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"a-data-frame-with-columns-and-rows-","dir":"Reference","previous_headings":"","what":"A data frame with 3 columns and 52 rows:","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"st_abbr 2-letter abbreviation states. state State full name. fips_code Federal Information Processing System (FIPS) Codes states.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"County-state reference file 2020 https://www.census.gov/programs-surveys/popest/geographies/reference-files.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of census variables and formula for SVI calculation — variable_calculation","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"datasets contains table SVI variable names, related census variable names corresponding calculation formula year 2012-2022. used construct SVI results variables starting \"E_\"(estimate) \"EP_\"(percentage) obtaining census data. Sometimes SVI variables directly linked census variables, times one census variable(s) included derive SVI variable. Two series calculation tables included different approaches construct EP_ variables. variable_cal_exp_ series dataset uses census variables explicitly denominators, whereas variable_e_ep_calculation_ series dataset retrieves percent ACS available (described CDC SVI documentation). Variables theme 5 (adjunct variables) follow CDC SVI documentation remain across series tables.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"","code":"variable_e_ep_calculation_2012  variable_e_ep_calculation_2013  variable_e_ep_calculation_2014  variable_e_ep_calculation_2015  variable_e_ep_calculation_2016  variable_e_ep_calculation_2017  variable_e_ep_calculation_2018  variable_e_ep_calculation_2019  variable_e_ep_calculation_2020  variable_e_ep_calculation_2021  variable_e_ep_calculation_2022  variable_cal_exp_2012  variable_cal_exp_2013  variable_cal_exp_2014  variable_cal_exp_2015  variable_cal_exp_2016  variable_cal_exp_2017  variable_cal_exp_2018  variable_cal_exp_2019  variable_cal_exp_2020  variable_cal_exp_2021  variable_cal_exp_2022"},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 33 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"a-data-frame-with-columns-and-various-number-of-rows-depending","dir":"Reference","previous_headings":"","what":"A data frame with 3 columns and various number of rows, depending","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"year: _variable_name prefix \"x\" followed year, eg. x2018_variable_name, column SVI variable name theme SVI variables categorized four themes/domains: socioeconomic, household composition/disability, minority status/language housing type/transportation. Theme 0 used 3 variables representing total counts, theme 5 used adjunct variables (included calculation). Adjunct variables included 2012 due unavailable data/documentation. _table_field_calculation prefix \"x\" followed year, eg. x2018_table_field_calculation, column contains corresponding census variable names, /calculation using SVI/census variables.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"CDC/ATSDR SVI Documentation https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"tables contains ZIP Code Tabulation Areas (ZCTAs), intersecting counties states (state name, abbreviation, state FIPS code) nested . used get_census_data() retrieving ZCTA-level census data state, tidycensus::get_acs() (CRAN version) currently support obtaining state-specific ZCTA-level data.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"","code":"zcta_state_xwalk2021  zcta_state_xwalk2020  zcta_state_xwalk2019  zcta_state_xwalk2022"},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"object class tbl_df (inherits tbl, data.frame) 538426 rows 5 columns. object class data.frame 519726 rows 5 columns. object class tbl_df (inherits tbl, data.frame) 538152 rows 5 columns.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"a-data-frame-with-columns-and-various-number-of-rows-depending-on-the-year-","dir":"Reference","previous_headings":"","what":"A data frame with 5 columns and various number of rows, depending on the year:","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"ZCTA 5 digit ZCTA code. st_code Federal Information Processing System (FIPS) Codes States. county County name within state ZCTA intersects/corresponds . state State full name corresponding FIPS code. st_abb Two-letter state abbreviation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"Census ZCTA-county relationship file (2010) https://www.census.gov/geographies/reference-files/time-series/geo/relationship-files.2010.html#list-tab-1709067297 Geocorr ZCTA-county relationship file (2020) https://mcdc.missouri.edu/applications/geocorr2022.html County-state reference file (2019, 2020, 2021, 2022) https://www.census.gov/programs-surveys/popest/geographies/reference-files.html","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/news/index.html","id":"findsvi-012","dir":"Changelog","previous_headings":"","what":"findSVI 0.1.2","title":"findSVI 0.1.2","text":"CRAN release: 2023-08-25 Wrapping data retrieval SVI calculation, find_svi() supports multiple entries year-state pairs. get_census_data() (find_svi()) uses zcta-state crosswalks support state-specific ZCTA-level data retrieval 2019-2021. (functionality supported tidycensus::get_acs() 2019 Census Bureau longer makes ZCTA shapefiles available state.) get_svi() replicates results CDC/ATSDR SVI database matching number decimals (#12). user-friendly CLI error messages functions (#3, #4, #7).","code":""}]
