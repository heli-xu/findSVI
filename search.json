[{"path":"https://heli-xu.github.io/findSVI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Heli Xu Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"get-census-data-with-geometry","dir":"Articles","previous_headings":"","what":"Get census data with geometry","title":"Mapping SVI for Spatial Analysis","text":"First, using get_census_data() obtain ZCTA-level data simple feature geometry PA 2020 (Census API required). , showing first 10 rows data. geometry = TRUE, ’ll get tibble additional column containing simple feature geometry (MULTIPOLYGON).","code":"pa_zcta_2020_geo_data <- get_census_data(   year = 2020,    state = \"PA\",    geography = \"zcta\",    geometry = TRUE) #> Simple feature collection with 10 features and 134 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -80.48268 ymin: 40.10397 xmax: -79.73383 ymax: 40.83308 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 135 #>    GEOID NAME        B06009_002E B06009_002M B09001_001E B09001_001M B11012_010E #>    <chr> <chr>             <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 15001 ZCTA5 15001        1655         417        5450         582         724 #>  2 15003 ZCTA5 15003         441         125        2352         245         250 #>  3 15004 ZCTA5 15004          62          43          63          70          21 #>  4 15005 ZCTA5 15005         293          92        1380         200          65 #>  5 15006 ZCTA5 15006          37          58          13          28           0 #>  6 15007 ZCTA5 15007           0          11          22          35           0 #>  7 15009 ZCTA5 15009         404         121        3253         384         206 #>  8 15010 ZCTA5 15010        1237         242        5636         444         719 #>  9 15012 ZCTA5 15012         638         180        2750         302         336 #> 10 15014 ZCTA5 15014         136          75         527          96         105 #> # ℹ 128 more variables: B11012_010M <dbl>, B11012_015E <dbl>, #> #   B11012_015M <dbl>, B16005_007E <dbl>, B16005_007M <dbl>, B16005_008E <dbl>, #> #   B16005_008M <dbl>, B16005_012E <dbl>, B16005_012M <dbl>, B16005_013E <dbl>, #> #   B16005_013M <dbl>, B16005_017E <dbl>, B16005_017M <dbl>, B16005_018E <dbl>, #> #   B16005_018M <dbl>, B16005_022E <dbl>, B16005_022M <dbl>, B16005_023E <dbl>, #> #   B16005_023M <dbl>, B16005_029E <dbl>, B16005_029M <dbl>, B16005_030E <dbl>, #> #   B16005_030M <dbl>, B16005_034E <dbl>, B16005_034M <dbl>, …"},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"get-svi-with-geometry","dir":"Articles","previous_headings":"","what":"Get SVI with geometry","title":"Mapping SVI for Spatial Analysis","text":"getting data ready, can supply tibble simple feature geometry get_svi(). get_svi() return full SVI table every SVI variables, intermediate percentile ranks, theme-specific SVIs overall SVI (consistent CDC/ATSDR SVI database, without MOE). visualization purposes, ’ll simplify table keep GEOID, geometry SVIs.","code":"pa_zcta_2020_geo_svi <- get_svi(   year = 2020,    data = pa_zcta_2020_geo_data   ) pa_zcta_2020_geo_svi %>% glimpse() #> Rows: 1,776 #> Columns: 64 #> $ GEOID       <chr> \"15001\", \"15003\", \"15004\", \"15005\", \"15006\", \"15007\", \"150… #> $ NAME        <chr> \"ZCTA5 15001\", \"ZCTA5 15003\", \"ZCTA5 15004\", \"ZCTA5 15005\"… #> $ geometry    <MULTIPOLYGON [°]> MULTIPOLYGON (((-80.43758 4..., MULTIPOLYGON … #> $ E_TOTPOP    <dbl> 31129, 11212, 380, 9191, 292, 629, 15114, 27205, 15243, 30… #> $ E_HU        <dbl> 16070, 6084, 207, 4275, 131, 167, 7057, 12699, 7709, 1671,… #> $ E_HH        <dbl> 14093, 5104, 138, 3948, 131, 167, 6509, 11363, 6883, 1450,… #> $ E_POV150    <dbl> 5567, 2656, 75, 916, 0, 387, 1904, 4761, 2639, 761, 24, 14… #> $ E_UNEMP     <dbl> 787, 212, 0, 123, 0, 0, 323, 811, 376, 41, 11, 201, 0, 116… #> $ E_HBURD     <dbl> 3037, 1234, 6, 609, 0, 51, 1424, 2322, 1186, 334, 39, 1729… #> $ E_NOHSDP    <dbl> 1655, 441, 62, 293, 37, 0, 404, 1237, 638, 136, 25, 542, 2… #> $ E_UNINSUR   <dbl> 1319, 534, 38, 250, 0, 19, 315, 923, 470, 175, 21, 454, 13… #> $ E_AGE65     <dbl> 6395, 2090, 42, 2534, 58, 414, 3718, 5815, 3595, 464, 277,… #> $ E_AGE17     <dbl> 5450, 2352, 63, 1380, 13, 22, 3253, 5636, 2750, 527, 348, … #> $ E_DISABL    <dbl> 4871, 1656, 61, 1288, 0, 295, 2196, 4584, 2629, 379, 94, 1… #> $ E_SNGPNT    <dbl> 815, 356, 21, 92, 0, 0, 271, 820, 348, 162, 35, 319, 7, 3,… #> $ E_LIMENG    <dbl> 142, 86, 0, 19, 0, 0, 57, 42, 86, 0, 0, 46, 182, 0, 0, 4, … #> $ E_MINRTY    <dbl> 5764, 1771, 30, 459, 0, 0, 869, 3819, 1048, 264, 65, 1684,… #> $ E_MUNIT     <dbl> 955, 196, 0, 134, 0, 0, 528, 811, 353, 48, 10, 1290, 0, 0,… #> $ E_MOBILE    <dbl> 537, 38, 25, 23, 0, 0, 18, 251, 445, 0, 0, 3, 0, 93, 24, 3… #> $ E_CROWD     <dbl> 94, 8, 0, 0, 0, 0, 23, 135, 22, 7, 0, 70, 9, 0, 0, 23, 52,… #> $ E_NOVEH     <dbl> 1189, 587, 0, 135, 0, 0, 335, 1243, 481, 136, 10, 781, 46,… #> $ E_GROUPQ    <dbl> 619, 26, 0, 213, 0, 0, 304, 1268, 144, 91, 0, 438, 0, 0, 0… #> $ EP_POV150   <dbl> 18.2, 23.7, 19.7, 10.2, 0.0, 61.5, 12.8, 18.3, 17.3, 26.0,… #> $ EP_UNEMP    <dbl> 4.8, 3.5, 0.0, 2.5, 0.0, 0.0, 4.5, 6.1, 5.0, 2.5, 1.8, 2.5… #> $ EP_HBURD    <dbl> 21.5, 24.2, 4.3, 15.4, 0.0, 30.5, 21.9, 20.4, 17.2, 23.0, … #> $ EP_NOHSDP   <dbl> 7.0, 5.5, 22.5, 4.1, 13.3, 0.0, 3.6, 6.6, 5.7, 6.2, 2.9, 4… #> $ EP_UNINSUR  <dbl> 4.3, 4.8, 10.0, 2.8, 0.0, 3.0, 2.1, 3.4, 3.1, 5.9, 1.7, 3.… #> $ EP_AGE65    <dbl> 20.5, 18.6, 11.1, 27.6, 19.9, 65.8, 24.6, 21.4, 23.6, 15.2… #> $ EP_AGE17    <dbl> 17.5, 21.0, 16.6, 15.0, 4.5, 3.5, 21.5, 20.7, 18.0, 17.3, … #> $ EP_DISABL   <dbl> 15.9, 14.8, 16.1, 14.3, 0.0, 46.9, 14.8, 17.1, 17.2, 12.8,… #> $ EP_SNGPNT   <dbl> 5.8, 7.0, 15.2, 2.3, 0.0, 0.0, 4.2, 7.2, 5.1, 11.2, 7.1, 4… #> $ EP_LIMENG   <dbl> 0.5, 0.8, 0.0, 0.2, 0.0, 0.0, 0.4, 0.2, 0.6, 0.0, 0.0, 0.3… #> $ EP_MINRTY   <dbl> 18.5, 15.8, 7.9, 5.0, 0.0, 0.0, 5.7, 14.0, 6.9, 8.6, 5.1, … #> $ EP_MUNIT    <dbl> 5.9, 3.2, 0.0, 3.1, 0.0, 0.0, 7.5, 6.4, 4.6, 2.9, 2.0, 17.… #> $ EP_MOBILE   <dbl> 3.3, 0.6, 12.1, 0.5, 0.0, 0.0, 0.3, 2.0, 5.8, 0.0, 0.0, 0.… #> $ EP_CROWD    <dbl> 0.7, 0.2, 0.0, 0.0, 0.0, 0.0, 0.4, 1.2, 0.3, 0.5, 0.0, 1.0… #> $ EP_NOVEH    <dbl> 8.4, 11.5, 0.0, 3.4, 0.0, 0.0, 5.1, 10.9, 7.0, 9.4, 2.0, 1… #> $ EP_GROUPQ   <dbl> 2.0, 0.2, 0.0, 2.3, 0.0, 0.0, 2.0, 4.7, 0.9, 3.0, 0.0, 2.9… #> $ EPL_POV150  <dbl> 0.5313, 0.7039, 0.5837, 0.2295, 0.0000, 0.9920, 0.3109, 0.… #> $ EPL_UNEMP   <dbl> 0.5595, 0.3761, 0.0000, 0.2593, 0.0000, 0.0000, 0.5259, 0.… #> $ EPL_HBURD   <dbl> 0.5174, 0.6615, 0.0490, 0.2234, 0.0000, 0.8627, 0.5436, 0.… #> $ EPL_NOHSDP  <dbl> 0.4001, 0.2798, 0.9393, 0.1896, 0.7911, 0.0000, 0.1635, 0.… #> $ EPL_UNINSUR <dbl> 0.4804, 0.5417, 0.8597, 0.2890, 0.0000, 0.3186, 0.2186, 0.… #> $ EPL_AGE65   <dbl> 0.5516, 0.4240, 0.0959, 0.8678, 0.5091, 0.9881, 0.7832, 0.… #> $ EPL_AGE17   <dbl> 0.3258, 0.5840, 0.2690, 0.1986, 0.0545, 0.0499, 0.6317, 0.… #> $ EPL_DISABL  <dbl> 0.5877, 0.4991, 0.5997, 0.4594, 0.0000, 0.9903, 0.4991, 0.… #> $ EPL_SNGPNT  <dbl> 0.6929, 0.7989, 0.9641, 0.2963, 0.0000, 0.0000, 0.5322, 0.… #> $ EPL_LIMENG  <dbl> 0.6555, 0.7469, 0.0000, 0.5312, 0.0000, 0.0000, 0.6226, 0.… #> $ EPL_MINRTY  <dbl> 0.8173, 0.7860, 0.6118, 0.4801, 0.0000, 0.0000, 0.5176, 0.… #> $ EPL_MUNIT   <dbl> 0.7801, 0.6724, 0.0000, 0.6684, 0.0000, 0.0000, 0.8199, 0.… #> $ EPL_MOBILE  <dbl> 0.4422, 0.2872, 0.7499, 0.2775, 0.0000, 0.0000, 0.2479, 0.… #> $ EPL_CROWD   <dbl> 0.5305, 0.3886, 0.0000, 0.0000, 0.0000, 0.0000, 0.4479, 0.… #> $ EPL_NOVEH   <dbl> 0.7071, 0.8234, 0.0000, 0.3613, 0.0000, 0.0000, 0.5105, 0.… #> $ EPL_GROUPQ  <dbl> 0.8031, 0.5585, 0.0000, 0.8212, 0.0000, 0.0000, 0.8031, 0.… #> $ SPL_theme1  <dbl> 2.4887, 2.5630, 2.4317, 1.1908, 0.7911, 2.1733, 1.7625, 2.… #> $ SPL_theme2  <dbl> 2.8135, 3.0529, 1.9287, 2.3533, 0.5636, 2.0283, 3.0688, 3.… #> $ SPL_theme3  <dbl> 0.8173, 0.7860, 0.6118, 0.4801, 0.0000, 0.0000, 0.5176, 0.… #> $ SPL_theme4  <dbl> 3.2630, 2.7301, 0.7499, 2.1284, 0.0000, 0.0000, 2.8293, 3.… #> $ RPL_theme1  <dbl> 0.5028, 0.5380, 0.4745, 0.0999, 0.0392, 0.3785, 0.2236, 0.… #> $ RPL_theme2  <dbl> 0.7418, 0.8473, 0.2520, 0.4597, 0.0148, 0.2985, 0.8593, 0.… #> $ RPL_theme3  <dbl> 0.8173, 0.7860, 0.6118, 0.4801, 0.0000, 0.0000, 0.5176, 0.… #> $ RPL_theme4  <dbl> 0.8224, 0.6515, 0.1266, 0.4631, 0.0000, 0.0000, 0.6850, 0.… #> $ SPL_themes  <dbl> 9.3825, 9.1320, 5.7221, 6.1526, 1.3547, 4.2016, 8.1782, 9.… #> $ RPL_themes  <dbl> 0.8059, 0.7707, 0.2287, 0.2707, 0.0136, 0.1022, 0.6118, 0.… svi <- pa_zcta_2020_geo_svi %>%    select(GEOID, geometry, contains(\"RPL_theme\")) svi %>% head(10)  #> Simple feature collection with 10 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -80.48268 ymin: 40.10397 xmax: -79.73383 ymax: 40.83308 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 7 #>    GEOID                    geometry RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 #>    <chr>          <MULTIPOLYGON [°]>      <dbl>      <dbl>      <dbl>      <dbl> #>  1 15001 (((-80.43758 40.55899, -80…     0.503      0.742       0.817      0.822 #>  2 15003 (((-80.2366 40.59886, -80.…     0.538      0.847       0.786      0.652 #>  3 15004 (((-80.38652 40.34327, -80…     0.474      0.252       0.612      0.127 #>  4 15005 (((-80.24356 40.65536, -80…     0.0999     0.460       0.480      0.463 #>  5 15006 (((-79.88531 40.63274, -79…     0.0392     0.0148      0          0     #>  6 15007 (((-79.93657 40.65095, -79…     0.378      0.298       0          0     #>  7 15009 (((-80.45619 40.71337, -80…     0.224      0.859       0.518      0.685 #>  8 15010 (((-80.48268 40.73145, -80…     0.478      0.894       0.761      0.922 #>  9 15012 (((-79.90417 40.15197, -79…     0.310      0.863       0.568      0.749 #> 10 15014 (((-79.74922 40.60994, -79…     0.557      0.195       0.633      0.658 #> # ℹ 1 more variable: RPL_themes <dbl>"},{"path":"https://heli-xu.github.io/findSVI/articles/SVI-mapping.html","id":"interactive-maps-for-overall-svi","dir":"Articles","previous_headings":"","what":"Interactive maps for overall SVI","title":"Mapping SVI for Spatial Analysis","text":"simple feature geometry, can visualize SVI patterns perform spatial SVI analysis mapping tool. , ’re using powerful package leaflet interactive maps. First ’ll examine missing value. Looks like ZCTAs missing values SVIs. (Upon checking full SVI table, can see individual SVI variables 0 ZCTAs.) ’ll remove ZCTAs better visualization. set interactive map overall SVI, leaflet() heavy lifting. , ’ll just add customized color palette labels appearance. interactive map, can visualize easily SVI varies different regions PA zoom examine specific ZCTAs interest, making helpful approach explore new ideas, patterns analyses.","code":"missing <- svi %>% filter(is.na(RPL_theme1))  missing %>% glimpse() #> Rows: 13 #> Columns: 7 #> $ GEOID      <chr> \"15260\", \"15616\", \"15691\", \"16312\", \"17077\", \"17120\", \"1782… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-79.95539 4..., MULTIPOLYGON (… #> $ RPL_theme1 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_theme2 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_theme3 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_theme4 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ RPL_themes <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA svi_clean <- svi %>% drop_na()  #above shows CRS NAD83, change to 4326 (WGS84) to avoid warning as below: #Warning: sf layer has inconsistent datum (+proj=longlat +datum=NAD83 +no_defs). #Need '+proj=longlat +datum=WGS84' st_crs(svi_clean) <- 4326 #> Warning: st_crs<- : replacing crs does not reproject data; use st_transform for #> that  #set color palette pal <- colorNumeric(   palette = c(\"orange\",\"navy\"),   domain = svi_clean$RPL_themes )  #set label zcta_label <- glue(\"<h3 style='margin: 0px'>{svi_clean$GEOID}<\/h3>                     overall SVI: {svi_clean$RPL_themes}\") %>%   map(~HTML(.x))  leaflet(svi_clean) %>%    addProviderTiles(providers$CartoDB.Voyager) %>%    addPolygons(color = \"white\",                weight = 0.5,               smoothFactor = 0.5,               opacity = 1,               fillColor = ~pal(RPL_themes),               fillOpacity = 0.8,               highlightOptions = highlightOptions(                 weight = 5,                 color = \"white\",                 fillOpacity = 0.8,                 bringToFront = TRUE),               label = zcta_label,               labelOptions = labelOptions(                 style = list(                   \"font-family\" = \"Fira Sans, sans-serif\",                   \"font-size\" = \"1.2em\"                 ))               ) %>%    addLegend(\"bottomleft\",             pal = pal,             values = ~RPL_themes,             title = \"Overall SVI in all ZCTAs in PA (2020)\",             #labFormat = labelFormat(prefix = \"$\"),             opacity = 1)"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"what-is-svi","dir":"Articles","previous_headings":"","what":"What is SVI","title":"Introduction to findSVI","text":"First introduced 2011 (Flanagan , Gregory EW, Hallisey EJ, Heitgerd JL, Lewis B.), CDC/ATSDR Social Vulnerability Index (SVI) serves tool assess resilience communities considering socioeconomic demographic factors. valuable information plays crucial role preparing managing public health emergencies, enables effective planning social services public assistance. CDC/ATSDR Social Vulnerability Index (CDC/ATSDR SVI) utilizes 16 U.S. census variables grouped 4 domains/themes, obtains relative vulnerability level using percentile ranks geographic unit within region. Communities higher SVI considered vulnerable public health crisis. details, please refer CDC/ATSDR SVI website.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"why-we-might-need-to-calculate-svi","dir":"Articles","previous_headings":"","what":"Why we might need to calculate SVI","title":"Introduction to findSVI","text":"CDC/ATSDR releases SVI biannually shapefile csv format, counties/census tracts level within individual state US. SVI database useful, sometimes prefer --date census data different geographic levels. example, ’d like address questions ZCTA-level SVI Pennsylvania 2021, census tract-level SVI within counties Pennsylvania 2020, might need calculate SVI census data . findSVI aims support flexible specific SVI analysis cases additional options years (2012-2021) geographic levels (eg. ZCTA/places, combining multiple states). document introduces datasets basic tools findSVI census data retrieval SVI calculation.","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"census-variables-and-calculation-table","dir":"Articles","previous_headings":"Data: census variables","what":"Census variables and calculation table","title":"Introduction to findSVI","text":"retrieve census data calculate SVI based CDC/ATSDR documentation, series lists tables containing census variables information included package. census_variables_(2012-2021): list contains year-specific census variables needed SVI calculation. variable_ep_calculation_(2012-2021): table contains SVI variable names, theme group corresponding census variable(s) calculation formula. datasets documented ?census_variables ?variable_calculation.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"zcta-state-relationship-file-crosswalk","dir":"Articles","previous_headings":"Data: census variables","what":"ZCTA-state relationship file (crosswalk)","title":"Introduction to findSVI","text":"Currently, tidycensus::get_acs() support requests state-specific ZCTA-level data starting 2019(subject table)/2020(tables). likely due changes Census API, ZCTAs subgeographies states (ZCTAs cross state boundaries). obtain state-specific ZCTA-level data, three atasets ZCTA--state crosswalks included help selecting ZCTAs state(s) interest retrieving ZCTA data national level. crosswalk files documented ?zcta_state_xwalk.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"retrieve-census-data-with-get_census_data","dir":"Articles","previous_headings":"","what":"Retrieve census data with get_census_data()","title":"Introduction to findSVI","text":"get_census_data() uses tidycensus::get_acs() pre-defined list variables retrieves ACS data SVI calculation. list census variables built function, changes according year interest. Importantly, Census API key required function work, can obtained online set tidycensus::census_api_key(\"KEY GOES \"). arguments largely tidycensus::get_acs(), including year, geography state. example, can retrieve ZCTA-level data Rhode Island 2018: (First 10 rows columns shown, rest columns census variables.) Note ZCTA-level 2018, data retrieving state supported Census API/tidycensus. requests, get_census_data() first retrieves ZCTA-level data whole country, uses ZCTA--state relationship file (crosswalk) select ZCTAs state(s) interest. results longer running time requests.","code":"data <- get_census_data(2018, \"zcta\", \"RI\") data[1:10, 1:10] #> # A tibble: 10 × 10 #>    GEOID NAME        B17001_002E B17001_002M B19301_001E B19301_001M B06009_002E #>    <chr> <chr>             <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 02802 ZCTA5 02802         154         190       24925       14640          80 #>  2 02804 ZCTA5 02804         130          91       39065        6412          56 #>  3 02806 ZCTA5 02806         520         183       61534        3820         383 #>  4 02807 ZCTA5 02807          73          33       39287        7937          19 #>  5 02808 ZCTA5 02808         162         166       29356        3819         272 #>  6 02809 ZCTA5 02809        1619         368       34252        2269        2077 #>  7 02812 ZCTA5 02812          31          52       41718        5771          72 #>  8 02813 ZCTA5 02813         605         271       42612        4889         411 #>  9 02814 ZCTA5 02814         722         253       37750        3056         381 #> 10 02815 ZCTA5 02815          13          21       71975       22744           0 #> # ℹ 3 more variables: B06009_002M <dbl>, B09001_001E <dbl>, B09001_001M <dbl>"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"compute-svi-with-get_svi","dir":"Articles","previous_headings":"","what":"Compute SVI with get_svi()","title":"Introduction to findSVI","text":"get_svi() takes year census data (retrieved get_census_data()) arguments, calculate SVI based CDC/ATSDR documentation. function uses built-variable_calculation tables populate SVI variables census variables directly, basic summation/percentage calculation census variables. SVI variable,geographic unit ranked others selected region, followed summing rankings variables within theme perform percentile ranking SVI theme overall SVI. example, obtain ZCTA-level SVI Rhode Island 2018: Columns include geographic unit information, individual SVI variables (“E_xx” “EP_xx”), intermediate percentile rankings (“EPL_xx” “SPL_xx”), theme-specific overall SVIs (“RPL_xx”).","code":"result <- get_svi(2018, data) glimpse(result) #> Rows: 77 #> Columns: 60 #> $ GEOID      <chr> \"02802\", \"02804\", \"02806\", \"02807\", \"02808\", \"02809\", \"0281… #> $ NAME       <chr> \"ZCTA5 02802\", \"ZCTA5 02804\", \"ZCTA5 02806\", \"ZCTA5 02807\",… #> $ E_TOTPOP   <dbl> 671, 2004, 16192, 827, 2565, 22258, 1208, 7780, 7673, 208, … #> $ E_HU       <dbl> 314, 947, 6393, 1856, 969, 9181, 402, 5173, 3350, 76, 14272… #> $ E_HH       <dbl> 223, 840, 6111, 429, 889, 8442, 402, 3200, 2903, 76, 13304,… #> $ E_POV      <dbl> 154, 130, 520, 73, 162, 1619, 31, 605, 722, 13, 2575, 143, … #> $ E_UNEMP    <dbl> 18, 12, 244, 21, 171, 424, 44, 330, 167, 0, 1016, 123, 459,… #> $ E_PCI      <dbl> 24925, 39065, 61534, 39287, 29356, 34252, 41718, 42612, 377… #> $ E_NOHSDP   <dbl> 80, 56, 383, 19, 272, 2077, 72, 411, 381, 0, 2011, 158, 523… #> $ E_AGE65    <dbl> 15, 351, 2680, 221, 267, 4578, 144, 1733, 1207, 16, 5520, 8… #> $ E_AGE17    <dbl> 220, 331, 4375, 143, 598, 3201, 323, 1265, 1489, 74, 6322, … #> $ E_DISABL   <dbl> 194, 200, 1453, 96, 184, 2234, 149, 818, 1172, 53, 5630, 39… #> $ E_SNGPNT   <dbl> 94, 47, 254, 36, 45, 447, 10, 202, 134, 0, 824, 176, 396, 9… #> $ E_MINRTY   <dbl> 87, 0, 1426, 49, 264, 1850, 146, 476, 518, 37, 2058, 606, 2… #> $ E_LIMENG   <dbl> 18, 0, 98, 0, 0, 416, 0, 0, 0, 0, 205, 47, 91, 0, 10, 14, 0… #> $ E_MUNIT    <dbl> 72, 0, 147, 90, 0, 592, 0, 38, 46, 0, 1119, 158, 1163, 60, … #> $ E_MOBILE   <dbl> 0, 13, 0, 37, 0, 0, 0, 232, 174, 0, 841, 98, 100, 231, 8, 0… #> $ E_CROWD    <dbl> 18, 0, 11, 10, 0, 71, 0, 68, 11, 0, 166, 44, 69, 15, 33, 0,… #> $ E_NOVEH    <dbl> 10, 13, 151, 11, 0, 530, 0, 90, 83, 0, 472, 0, 563, 29, 61,… #> $ E_GROUPQ   <dbl> 0, 0, 34, 39, 0, 3559, 0, 49, 10, 0, 452, 33, 59, 288, 20, … #> $ EP_POV     <dbl> 23.0, 6.5, 3.2, 8.8, 6.4, 8.6, 2.6, 7.8, 9.5, 6.3, 8.0, 2.4… #> $ EP_UNEMP   <dbl> 6.4, 1.0, 2.9, 4.6, 11.4, 3.6, 6.7, 7.4, 3.8, 0.0, 5.5, 3.3… #> $ EP_PCI     <dbl> 24925, 39065, 61534, 39287, 29356, 34252, 41718, 42612, 377… #> $ EP_NOHSDP  <dbl> 20.1, 3.9, 3.4, 2.8, 15.7, 14.0, 8.9, 7.0, 6.7, 0.0, 8.4, 3… #> $ EP_AGE65   <dbl> 2.2, 17.5, 16.6, 26.7, 10.4, 20.6, 11.9, 22.3, 15.7, 7.7, 1… #> $ EP_AGE17   <dbl> 32.8, 16.5, 27.0, 17.3, 23.3, 14.4, 26.7, 16.3, 19.4, 35.6,… #> $ EP_DISABL  <dbl> 28.9, 10.0, 9.0, 11.6, 7.2, 10.3, 12.5, 10.5, 15.3, 25.5, 1… #> $ EP_SNGPNT  <dbl> 42.2, 5.6, 4.2, 8.4, 5.1, 5.3, 2.5, 6.3, 4.6, 0.0, 6.2, 8.1… #> $ EP_MINRTY  <dbl> 13.0, 0.0, 8.8, 5.9, 10.3, 8.3, 12.1, 6.1, 6.8, 17.8, 6.3, … #> $ EP_LIMENG  <dbl> 3.1, 0.0, 0.6, 0.0, 0.0, 1.9, 0.0, 0.0, 0.0, 0.0, 0.7, 0.8,… #> $ EP_MUNIT   <dbl> 22.9, 0.0, 2.3, 4.8, 0.0, 6.4, 0.0, 0.7, 1.4, 0.0, 7.8, 6.6… #> $ EP_MOBILE  <dbl> 0.0, 1.4, 0.0, 2.0, 0.0, 0.0, 0.0, 4.5, 5.2, 0.0, 5.9, 4.1,… #> $ EP_CROWD   <dbl> 8.1, 0.0, 0.2, 2.3, 0.0, 0.8, 0.0, 2.1, 0.4, 0.0, 1.2, 2.0,… #> $ EP_NOVEH   <dbl> 4.5, 1.5, 2.5, 2.6, 0.0, 6.3, 0.0, 2.8, 2.9, 0.0, 3.5, 0.0,… #> $ EP_GROUPQ  <dbl> 0.0, 0.0, 0.2, 4.7, 0.0, 16.0, 0.0, 0.6, 0.1, 0.0, 1.4, 0.5… #> $ EPL_POV    <dbl> 0.9054, 0.4054, 0.1486, 0.5405, 0.3919, 0.5135, 0.0946, 0.4… #> $ EPL_UNEMP  <dbl> 0.6842, 0.1053, 0.1711, 0.4079, 0.9605, 0.2632, 0.7105, 0.8… #> $ EPL_PCI    <dbl> 0.8684, 0.4605, 0.0263, 0.4211, 0.7763, 0.6711, 0.3158, 0.2… #> $ EPL_NOHSDP <dbl> 0.9211, 0.2500, 0.1842, 0.1447, 0.8553, 0.8026, 0.5921, 0.4… #> $ EPL_AGE65  <dbl> 0.0789, 0.5132, 0.4474, 0.9605, 0.1842, 0.7895, 0.2105, 0.8… #> $ EPL_AGE17  <dbl> 0.9737, 0.2632, 0.9211, 0.3684, 0.8158, 0.1579, 0.9079, 0.2… #> $ EPL_DISABL <dbl> 1.0000, 0.1867, 0.1467, 0.4000, 0.1067, 0.2267, 0.4667, 0.2… #> $ EPL_SNGPNT <dbl> 0.9865, 0.4324, 0.2838, 0.7027, 0.3649, 0.3919, 0.1216, 0.5… #> $ EPL_MINRTY <dbl> 0.6447, 0.0000, 0.4211, 0.2237, 0.5000, 0.4079, 0.5921, 0.2… #> $ EPL_LIMENG <dbl> 0.8289, 0.0000, 0.4342, 0.0000, 0.0000, 0.7500, 0.0000, 0.0… #> $ EPL_MUNIT  <dbl> 0.9459, 0.0000, 0.2838, 0.3919, 0.0000, 0.4459, 0.0000, 0.2… #> $ EPL_MOBILE <dbl> 0.0000, 0.7973, 0.0000, 0.8378, 0.0000, 0.0000, 0.0000, 0.9… #> $ EPL_CROWD  <dbl> 1.0000, 0.0000, 0.2973, 0.8243, 0.0000, 0.4865, 0.0000, 0.7… #> $ EPL_NOVEH  <dbl> 0.4054, 0.1757, 0.2162, 0.2297, 0.0000, 0.5946, 0.0000, 0.2… #> $ EPL_GROUPQ <dbl> 0.0000, 0.0000, 0.2368, 0.8158, 0.0000, 0.9342, 0.0000, 0.4… #> $ SPL_theme1 <dbl> 3.3791, 1.2212, 0.5302, 1.5142, 2.9840, 2.2504, 1.7130, 1.9… #> $ SPL_theme2 <dbl> 3.0391, 1.3955, 1.7990, 2.4316, 1.4716, 1.5660, 1.7067, 1.9… #> $ SPL_theme3 <dbl> 1.4736, 0.0000, 0.8553, 0.2237, 0.5000, 1.1579, 0.5921, 0.2… #> $ SPL_theme4 <dbl> 2.3513, 0.9730, 1.0341, 3.0995, 0.0000, 2.4612, 0.0000, 2.6… #> $ RPL_theme1 <dbl> 0.9211, 0.2237, 0.0395, 0.3158, 0.8289, 0.6447, 0.4474, 0.6… #> $ RPL_theme2 <dbl> 1.0000, 0.1711, 0.3421, 0.7237, 0.2105, 0.2632, 0.3158, 0.3… #> $ RPL_theme3 <dbl> 0.8026, 0.0000, 0.4868, 0.1447, 0.2763, 0.5921, 0.3158, 0.1… #> $ RPL_theme4 <dbl> 0.4474, 0.1579, 0.2237, 0.8158, 0.0000, 0.4737, 0.0000, 0.6… #> $ SPL_themes <dbl> 10.2431, 3.5897, 4.2186, 7.2690, 4.9556, 7.4355, 4.0118, 6.… #> $ RPL_themes <dbl> 0.8553, 0.1184, 0.1579, 0.5263, 0.2237, 0.5526, 0.1447, 0.4…"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"wrapper-and-more-find_svi","dir":"Articles","previous_headings":"","what":"Wrapper and more: find_svi()","title":"Introduction to findSVI","text":"retrieve census data compute SVI one step, use find_svi(). get_census_data() accepts single year year (multiple states state) just like tidycensus::get_acs(), find_svi() accepts pairing vectors year state geography level. allows processing multiple year-state combinations one function, separate data retrieval SVI calculation every year-state entry returning summarised SVI table pairs year-state values. One important difference data retrieval find_svi() get_census_data() year-state combinations always evaluated “one year one state” – , option get census data multiple states (one year) get_census_data() disabled find_svi(). exception one--one rule, single year supplied year, can set state = NULL default perform nation-level data retrieval SVI calculation. SVI table output, find_svi() default returns summarised SVI table GEOID, theme-specific SVIs SVI 4 themes year-state combination. Alternatively, ’s option return full SVI table every SVI variable intermediate ranking values (get_svi()) setting full.table = TRUE. options, corresponding year state information included two separate columns table.","code":""},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"single-year-state-entry","dir":"Articles","previous_headings":"Wrapper and more: find_svi()","what":"Single year-state entry","title":"Introduction to findSVI","text":"Using example , obtain ZCTA-level census data calculate SVI Rhode Island 2018 one step: glimpse first 10 rows summarised SVI table, additional columns indicating year state information. default, summarised table keeps GEOID SVIs. Set full.table = TRUE complete SVI table individual SVI variables census data (like result get_svi() shown previous section).","code":"onestep_result <- find_svi(2018, \"RI\", \"zcta\") onestep_result %>% head(10) #> # A tibble: 10 × 8 #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 02802     0.921       1          0.803      0.447     0.855   2018 RI    #>  2 02804     0.224       0.171      0          0.158     0.118   2018 RI    #>  3 02806     0.0395      0.342      0.487      0.224     0.158   2018 RI    #>  4 02807     0.316       0.724      0.145      0.816     0.526   2018 RI    #>  5 02808     0.829       0.210      0.276      0         0.224   2018 RI    #>  6 02809     0.645       0.263      0.592      0.474     0.553   2018 RI    #>  7 02812     0.447       0.316      0.316      0         0.145   2018 RI    #>  8 02813     0.618       0.382      0.171      0.632     0.460   2018 RI    #>  9 02814     0.5         0.487      0.224      0.342     0.382   2018 RI    #> 10 02815     0.0263      0.513      0.342      0         0.0789  2018 RI"},{"path":"https://heli-xu.github.io/findSVI/articles/findSVI.html","id":"multiple-year-state-entries","dir":"Articles","previous_headings":"Wrapper and more: find_svi()","what":"Multiple year-state entries","title":"Introduction to findSVI","text":"multiple year-state combinations, supply two vectors year state arguments ’ll treated pairs. example, obtain county-level SVI New Jersey Pennsylvania 2017 2018, respectively: result, table summarising county-level SVI New Jersey 2017 Pennsylvania 2018, retrieving census data two year-state pairs (first 5 rows SVI results pair shown ). , data retrieval SVI calculation (percentile ranking) performed separately 2017-NJ 2018-PA, resulting SVIs combined summarised table. R functions accepts vectors arguments, another way supply year state pairs extract columns table. Suppose table called info_table containing year-state information ’d like include analysis: extract specific columns interest info_table year state arguments: , showing first 3 rows results year-state combination, ’re actually getting table SVIs counties 6 year-state pairs columns info_table. likely make things easier especially ’s long list year-state combinations process.","code":"summarise_results <- find_svi(   year = c(2017, 2018),   state = c(\"NJ\", \"PA\"),   geography = \"county\" )   summarise_results %>%    group_by(year, state) %>%    slice_head(n = 5) #> # A tibble: 10 × 8 #> # Groups:   year, state [2] #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 34001      0.95      0.8        0.65        1          0.95   2017 NJ    #>  2 34003      0.2       0.3        0.55        0.45       0.25   2017 NJ    #>  3 34005      0.3       0.5        0.35        0.4        0.3    2017 NJ    #>  4 34007      0.7       0.9        0.55        0.6        0.75   2017 NJ    #>  5 34009      0.65      0.6        0.1         0.55       0.45   2017 NJ    #>  6 42001      0.212     0.242      0.697       0.227      0.182  2018 PA    #>  7 42003      0.136     0.0758     0.742       0.576      0.212  2018 PA    #>  8 42005      0.621     0.530      0.0152      0.167      0.227  2018 PA    #>  9 42007      0.182     0.409      0.530       0.348      0.197  2018 PA    #> 10 42009      0.712     0.606      0.0758      0.288      0.394  2018 PA #>   year state #> 1 2017    AZ #> 2 2018    FL #> 3 2014    FL #> 4 2018    PA #> 5 2013    MA #> 6 2020    KY all_results <- find_svi(   year = info_table$year,   state = info_table$state,   geography = \"county\" )  all_results %>%    group_by(year, state) %>%    slice_head(n = 3) #> # A tibble: 18 × 8 #> # Groups:   year, state [6] #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 25001      0.231     0.462      0.0769     0           0      2013 MA    #>  2 25003      0.769     0.769      0.308      0.692       0.692  2013 MA    #>  3 25005      0.923     0.923      0.615      0.538       0.846  2013 MA    #>  4 12001      0.333     0          0.485      0.727       0.242  2014 FL    #>  5 12003      0.485     0.803      0.0606     0.424       0.454  2014 FL    #>  6 12005      0.242     0.652      0.197      0.394       0.288  2014 FL    #>  7 04001      1         0.929      0.857      0.714       1      2017 AZ    #>  8 04003      0.214     0.714      0.571      0.429       0.357  2017 AZ    #>  9 04005      0.357     0          0.214      0.857       0.286  2017 AZ    #> 10 12001      0.439     0          0.606      0.636       0.242  2018 FL    #> 11 12003      0.485     0.894      0.0758     0.439       0.439  2018 FL    #> 12 12005      0.318     0.803      0.318      0.5         0.470  2018 FL    #> 13 42001      0.212     0.242      0.697      0.227       0.182  2018 PA    #> 14 42003      0.136     0.0758     0.742      0.576       0.212  2018 PA    #> 15 42005      0.621     0.530      0.0152     0.167       0.227  2018 PA    #> 16 21001      0.580     0.109      0.538      0.689       0.445  2020 KY    #> 17 21003      0.664     0.782      0.277      0.353       0.555  2020 KY    #> 18 21005      0.235     0.622      0.487      0.0084      0.118  2020 KY"},{"path":"https://heli-xu.github.io/findSVI/articles/geo_context_of_svi.html","id":"nationwide-and-statewide-svi","dir":"Articles","previous_headings":"","what":"Nationwide and statewide SVI","title":"Geographic Context of SVI","text":"Although use findSVI nationwide- statewide-SVI, may convenient download data CDC/ATSDR Social Vulnerability Index (SVI) database, especially nationwide census tract-level data geometry. obtaining nationwide statewide(Pennsylvania) SVI either findSVI CDC’s database, filter result county keep data Philadelphia.","code":"#source: https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html #choose map data (recently changed to ESTI geodatabase), unzip files  # nationwide us_svi <- st_read(\"../../SVI2020_US_tract.gdb/\")  # statewide (PA) pa_svi <- st_read(\"../../SVI2020_PENNSYLVANIA_tract.gdb/\") # old format: pa_svi <- st_read(\"pa_ct_2020_shapefile/SVI2020_PENNSYLVANIA_tract.shp\")  # alternative: findSVI # us_data <- get_census_data(2020,  #   state = \"US\", #\"PA\" for statewide data #   geography = \"tract\",  #   geometry = TRUE) #  # us_svi <- get_svi(2020, us_data) # nationwide us_svi_phl <- us_svi %>%   select(1:7, contains(\"RPL_THEME\")) %>%   rename(GEOID = FIPS,     #format switched to ESRI gdb, col name change -7/28/23     geometry = Shape) %>%     #CDC use -999 as NAs   filter(RPL_THEMES >= 0,     ST_ABBR == \"PA\",     COUNTY == \"Philadelphia\")  glimpse(us_svi_phl) #> Rows: 388 #> Columns: 13 #> $ ST         <chr> \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\",… #> $ STATE      <chr> \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvan… #> $ ST_ABBR    <chr> \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\",… #> $ STCNTY     <chr> \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"4210… #> $ COUNTY     <chr> \"Philadelphia\", \"Philadelphia\", \"Philadelphia\", \"Philadelph… #> $ GEOID      <chr> \"42101000101\", \"42101000102\", \"42101000200\", \"42101000300\",… #> $ LOCATION   <chr> \"Census Tract 1.01, Philadelphia County, Pennsylvania\", \"Ce… #> $ RPL_THEME1 <dbl> 0.2486, 0.2251, 0.6340, 0.1153, 0.3515, 0.0017, 0.0473, 0.7… #> $ RPL_THEME2 <dbl> 0.1972, 0.0037, 0.0497, 0.2564, 0.2988, 0.0013, 0.0688, 0.0… #> $ RPL_THEME3 <dbl> 0.4678, 0.2809, 0.8235, 0.6105, 0.5988, 0.3492, 0.3249, 0.7… #> $ RPL_THEME4 <dbl> 0.4840, 0.8570, 0.9504, 0.9106, 0.9205, 0.3731, 0.6343, 0.9… #> $ RPL_THEMES <dbl> 0.2888, 0.1676, 0.6587, 0.4253, 0.5832, 0.0044, 0.1433, 0.7… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.152 39...., MULTIPOLYGON (… # statewide (PA) pa_svi_phl <- pa_svi %>%   select(1:7, contains(\"RPL_THEME\")) %>%   rename(GEOID = FIPS) %>%   filter(RPL_THEMES>= 0,     COUNTY == \"Philadelphia\")  glimpse(pa_svi_phl) #> Rows: 388 #> Columns: 13 #> $ ST         <chr> \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\", \"42\",… #> $ STATE      <chr> \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvan… #> $ ST_ABBR    <chr> \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\",… #> $ STCNTY     <chr> \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"42101\", \"4210… #> $ COUNTY     <chr> \"Philadelphia\", \"Philadelphia\", \"Philadelphia\", \"Philadelph… #> $ GEOID      <chr> \"42101000101\", \"42101000102\", \"42101000200\", \"42101000300\",… #> $ LOCATION   <chr> \"Census Tract 1.01, Philadelphia County, Pennsylvania\", \"Ce… #> $ RPL_THEME1 <dbl> 0.3105, 0.2976, 0.7757, 0.1388, 0.4349, 0.0029, 0.0567, 0.8… #> $ RPL_THEME2 <dbl> 0.2015, 0.0029, 0.0464, 0.2955, 0.2479, 0.0012, 0.0620, 0.1… #> $ RPL_THEME3 <dbl> 0.7213, 0.5299, 0.9150, 0.8115, 0.8057, 0.6070, 0.5797, 0.8… #> $ RPL_THEME4 <dbl> 0.5494, 0.9005, 0.9729, 0.9576, 0.9582, 0.3605, 0.6789, 0.9… #> $ RPL_THEMES <dbl> 0.3802, 0.2253, 0.7677, 0.5244, 0.6817, 0.0059, 0.1658, 0.8… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.152 39...., MULTIPOLYGON (…"},{"path":"https://heli-xu.github.io/findSVI/articles/geo_context_of_svi.html","id":"county-specific-svi","dir":"Articles","previous_headings":"","what":"County-specific SVI","title":"Geographic Context of SVI","text":"retrieving data calculation geographic level state, need use get_census_data() followed get_svi(). (nation- state-level data processing without geometry, easiest option one-step find_svi().)","code":"phl_ct_2020_data <- get_census_data(   2020,    state = \"PA\",   county = \"Philadelphia\",   geography = \"tract\",   geometry = TRUE )  phl_ct_svi_2020 <- get_svi(2020, phl_ct_2020_data)%>%   select(GEOID, contains(\"RPL_theme\")) %>%   drop_na() glimpse(phl_ct_svi_2020) #> Rows: 390 #> Columns: 7 #> $ GEOID      <chr> \"42101000101\", \"42101000102\", \"42101000200\", \"42101000300\",… #> $ RPL_theme1 <dbl> 0.1080, 0.1414, 0.4267, 0.0437, 0.2057, 0.0026, 0.0180, 0.5… #> $ RPL_theme2 <dbl> 0.2128, 0.0103, 0.1333, 0.2282, 0.2641, 0.0026, 0.1179, 0.1… #> $ RPL_theme3 <dbl> 0.1769, 0.0436, 0.5359, 0.3051, 0.2923, 0.0769, 0.0615, 0.4… #> $ RPL_theme4 <dbl> 0.3846, 0.7282, 0.9154, 0.9128, 0.9436, 0.3308, 0.8436, 0.9… #> $ RPL_themes <dbl> 0.1385, 0.0846, 0.4692, 0.2538, 0.3974, 0.0000, 0.1333, 0.5… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.152 39...., MULTIPOLYGON (…  # matching id from nation/statewide SVI for mapping match_id <- pa_svi_phl$GEOID  phl_svi <- phl_ct_svi_2020 %>%    filter(GEOID %in% match_id)"},{"path":"https://heli-xu.github.io/findSVI/articles/geo_context_of_svi.html","id":"angles-of-a-story","dir":"Articles","previous_headings":"","what":"3 angles of a story","title":"Geographic Context of SVI","text":"visualization, ’ll create maps color scale (using tmap).  can see, SVI values (actual color) vary among three maps depending percentile ranking performed obtain SVI, generally show pattern (tracts darker/lighter map). Overall, total areas included percentile ranking affect resulting SVI values, provide different perspectives look story. another note, studying social vulnerability within smaller region, especially metropolitan areas/cities, may helpful consider geographic context interpreting SVI better understand disparities among communities.","code":"nation <- us_svi_phl %>%   select(GEOID, geometry, RPL_THEMES) %>%   drop_na() %>%   #using NAD83 in tmap   tm_shape(projection = sf::st_crs(26915))+   tm_polygons(\"RPL_THEMES\",     palette = c(\"orange\",\"navy\"),     style = \"cont\",     breaks = c(0, 0.25, 0.5, 0.75, 1),     title = \"SVI (by tract)\")+   tm_layout(title = \"Nationwide SVI: \\nPhiladelphia subset\",     title.size = 1,     title.position = c(\"left\", \"TOP\"),     legend.position = c(\"RIGHT\", \"bottom\"),     legend.title.size = 0.9,     legend.width = 2)  state <- pa_svi_phl %>%   select(GEOID, geometry, RPL_THEMES) %>%   drop_na() %>%   tm_shape(projection = sf::st_crs(26915))+   tm_polygons(\"RPL_THEMES\",     palette = c(\"orange\",\"navy\"),     style = \"cont\",     breaks = c(0, 0.25, 0.5, 0.75, 1),     title = \"SVI (by tract)\")+   tm_layout(title = \"Statewide SVI: \\nPhiladelphia subset\",     title.size = 1,     title.position = c(\"left\", \"TOP\"),     legend.position = c(\"RIGHT\", \"bottom\"),     legend.title.size = 0.9,     legend.width = 2)  county <- phl_svi %>%   select(GEOID, geometry, RPL_themes) %>%   drop_na() %>%   tm_shape(projection = sf::st_crs(26915))+   tm_polygons(\"RPL_themes\",     palette = c(\"orange\",\"navy\"),     style = \"cont\",     breaks = c(0, 0.25, 0.5, 0.75, 1),     title = \"SVI (by tract)\")+   tm_layout(title = \"County-specific SVI: \\nPhiladelphia\",     title.size = 1,     title.position = c(\"left\", \"TOP\"),     legend.position = c(\"RIGHT\", \"bottom\"),     legend.title.size = 0.9,     legend.width = 2)  plots <- list(nation, state, county)  current.mode <- tmap_mode(\"plot\") #> tmap mode set to plotting  tmap_arrange(   plots,   nrow = 1,   width = c(0.34, 0.33, 0.33) )"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"zcta-level-svi-in-philadelphia-for-2020","dir":"Articles","previous_headings":"","what":"ZCTA-level SVI in Philadelphia for 2020","title":"SVI and health outcome","text":"retrieving census data geometry, ’ll use get_census_data() get_svi() obtain SVI. ’ll keep GEOID(ZCTA) SVI-related columns resulting SVI table.","code":"phl_zcta_data_geo_2020 <- get_census_data(   2020,   geography = \"zcta\",   state = \"PA\",   county = \"Philadelphia\",   geometry = TRUE )  phl_zcta_svi_geo_2020 <- get_svi(2020,   data = phl_zcta_data_geo_2020) %>%   select(GEOID, contains(\"RPL_theme\"))  phl_zcta_svi_geo_2020 %>% glimpse() #> Rows: 48 #> Columns: 7 #> $ GEOID      <chr> \"19102\", \"19103\", \"19104\", \"19106\", \"19107\", \"19109\", \"1911… #> $ RPL_theme1 <dbl> 0.0444, 0.0222, 0.6889, 0.0000, 0.3333, NA, 0.5778, NA, 0.1… #> $ RPL_theme2 <dbl> 0.0222, 0.2222, 0.2000, 0.1111, 0.0667, NA, 0.8667, NA, 0.4… #> $ RPL_theme3 <dbl> 0.0889, 0.1778, 0.5556, 0.0444, 0.4000, NA, 0.5111, NA, 0.1… #> $ RPL_theme4 <dbl> 0.9556, 0.9333, 0.9778, 0.7111, 1.0000, NA, 0.5778, NA, 0.1… #> $ RPL_themes <dbl> 0.1778, 0.2667, 0.6889, 0.0444, 0.3778, NA, 0.7111, NA, 0.2… #> $ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((-75.16854 3..., MULTIPOLYGON (…"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"zcta-level-covid-19-data-in-philadelphia","dir":"Articles","previous_headings":"","what":"ZCTA-level COVID-19 data in Philadelphia","title":"SVI and health outcome","text":"Disease-related data ZCTA level usually easily accessible privacy reasons. , ’ll use data COVID-19 Health Inequities Cities Dashboard, great resource released Drexel University’s Urban Health Collaborative Big Cities Health Coalition (BCHC). addition data available download, dashboard provides informative visualizations COVID-19 related outcomes inequities time across BCHC cities. downloading raw data, can select Philadelphia city variables interest (hospitalization per 100k).","code":"#source:https://github.com/Drexel-UHC/covid_inequities_project #bchc_raw <- read_csv(\"../../byZCTA_bchc.csv\")  phl_hosp <- bchc_raw %>%   filter(city == \"Philadelphia\") %>%   mutate(GEOID = paste(zcta), .after = zcta) %>%   select(GEOID, hosp_per_100k)  glimpse(phl_hosp) #> Rows: 46 #> Columns: 2 #> $ GEOID         <chr> \"19102\", \"19103\", \"19104\", \"19106\", \"19107\", \"19111\", \"1… #> $ hosp_per_100k <dbl> 194.288, 846.618, 1280.807, 405.019, 1555.831, 1133.411,…"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"joining-data-for-visualzation","dir":"Articles","previous_headings":"","what":"Joining data for visualzation","title":"SVI and health outcome","text":"ZCTA-level SVI COVID-19 data ready, can join together GEOID(ZCTA), keeping spatial information.","code":"phl_svi_covid <- phl_hosp %>%   left_join(phl_zcta_svi_geo_2020, by = \"GEOID\") %>%   #although geometry sticky, after wrangling, class() become df   st_as_sf(sf_column_name = \"geometry\")  phl_svi_covid %>% head(10) #> Simple feature collection with 10 features and 7 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.24074 ymin: 39.92578 xmax: -74.97371 ymax: 40.13799 #> Geodetic CRS:  NAD83 #> # A tibble: 10 × 8 #>    GEOID hosp_per_100k RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes #>    <chr>         <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #>  1 19102          194.     0.0444     0.0222     0.0889      0.956     0.178  #>  2 19103          847.     0.0222     0.222      0.178       0.933     0.267  #>  3 19104         1281.     0.689      0.2        0.556       0.978     0.689  #>  4 19106          405.     0          0.111      0.0444      0.711     0.0444 #>  5 19107         1556.     0.333      0.0667     0.4         1         0.378  #>  6 19111         1133.     0.578      0.867      0.511       0.578     0.711  #>  7 19114         1336.     0.178      0.422      0.156       0.111     0.2    #>  8 19115         1502.     0.378      0.822      0.289       0.822     0.533  #>  9 19116         1226.     0.4        0.733      0.244       0.622     0.489  #> 10 19118         1038.     0.156      0.289      0.2         0.267     0.133  #> # ℹ 1 more variable: geometry <MULTIPOLYGON [°]>"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"maps","dir":"Articles","previous_headings":"Joining data for visualzation","what":"Maps","title":"SVI and health outcome","text":"visualize spatial pattern directly, can plot SVI COVID-19 data Philadelphia neighborhoods (ZCTAs) directly maps: SVI COVID-19 hospitalizations Philadelphia Neighborhoods (ZCTAs). COVID-19 data cumulative till 8/2022.","code":"covid_hosp <- phl_svi_covid %>%   select(GEOID, geometry, hosp_per_100k) %>%   drop_na() %>%    tm_shape(projection = sf::st_crs(26915))+   tm_polygons(\"hosp_per_100k\",     style = \"quantile\",     title = \"Hospitalizations/100k\")+   tm_layout(title = \"COVID-19 Hospitalizations\",     title.size = 1,     title.position = c(\"left\", \"TOP\"),     legend.position = c(\"RIGHT\", \"bottom\"),     legend.title.size = 0.9,     legend.width = 2)  svi <- phl_svi_covid %>%   select(GEOID, geometry, RPL_themes) %>%   drop_na() %>%   tm_shape(projection = sf::st_crs(26915))+   tm_polygons(\"RPL_themes\",     style = \"quantile\",     title = \"Overall SVI (2020)\",     palette = \"Blues\")+   tm_layout(title = \"Social Vulnerability\",     title.size = 1,     title.position = c(\"left\", \"TOP\"),     legend.position = c(\"RIGHT\", \"bottom\"),     legend.title.size = 0.9,     legend.width = 2)  plots <- list(svi, covid_hosp)  current.mode <- tmap_mode(\"plot\") #> tmap mode set to plotting #> tmap mode set to plotting  tmap_arrange(   plots,    nrow = 1,   width = c(0.5, 0.5)   )"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"correlation","dir":"Articles","previous_headings":"Joining data for visualzation","what":"Correlation","title":"SVI and health outcome","text":"look possible correlation SVI COVID-19 hospitalizations, ’ll use scatter plot visualize relationships:  correlation coefficient 0.7030584, overall SVI shown strongly associated COVID-19 hospitalizations Philadelphia neighborhoods, higher hospitalization rate found neighborhoods higher social vulnerability. consistent story COVID-19 Health Inequities Cities Dashboard, found socially vulnerable neighborhoods 129.4% higher hospitalizations per 100k compared least socially vulnerable neighborhoods.","code":"phl_svi_covid %>%   ggplot(aes(x = RPL_themes, y = hosp_per_100k)) +   geom_point()+   labs(     title = \"Social Vulnerability and COVID-19 Hospitalizations \\nin Philadelphia Neighborhoods\",     caption = \"COVID-19 data are cumulative till 8/2022\",      x = \"Overall SVI (2020)\",     y = \"Hospitalizations per 100k\") +   theme_bw()+   theme(     text = element_text(size = 13),     plot.title = element_text(size = 14, face = \"bold\"),     axis.title = element_text(size = 12, face = \"bold\"),     legend.title = element_text(size = 13),     plot.caption = element_text(size = 9, color = \"#4D4948\")   )"},{"path":"https://heli-xu.github.io/findSVI/articles/svi-covid.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"SVI and health outcome","text":"Diez Roux, ., Kolker, J., Barber, S., Bilal, U., Mullachery, P., Schnake-Mahl, ., McCulley, E., Vaidya, V., Ran, L., Rollins, H., Furukawa, ., Koh, C., Sharaf, ., Dureja, K. (2021). COVID-19 Health Inequities Cities Dashboard. Drexel University: Urban Health Collaborative. http://www.covid-inequities.info/.","code":""},{"path":"https://heli-xu.github.io/findSVI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Heli Xu. Author, maintainer, copyright holder.","code":""},{"path":"https://heli-xu.github.io/findSVI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xu H (2023). findSVI: Calculate Social Vulnerability Index Communities. https://github.com/heli-xu/findSVI, https://heli-xu.github.io/findSVI/.","code":"@Manual{,   title = {findSVI: Calculate Social Vulnerability Index for Communities},   author = {Heli Xu},   year = {2023},   note = {https://github.com/heli-xu/findSVI, https://heli-xu.github.io/findSVI/}, }"},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"findsvi-","dir":"","previous_headings":"","what":"Calculate Social Vulnerability Index for Communities","title":"Calculate Social Vulnerability Index for Communities","text":"goal findSVI calculate regional CDC/ATSDR Social Vulnerability Index (SVI) geographic level interest using US census data American Community Survey.","code":""},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Calculate Social Vulnerability Index for Communities","text":"CDC/ATSDR releases SVI biannually counties/census tracts level US individual state (can downloaded ). findSVI aims support flexible specific SVI analysis additional options years (2012-2021) geographic levels (e.g., ZCTA/places, combining multiple states). find SVI one multiple year-state pair(s): find_svi(): retrieves US census data (Census API key required) calculates SVI based CDC/ATSDR SVI documentation year-state pair geography level. cases, find_svi() easiest option. ’d like include simple feature geometry customized requests census data retrieval (e.g., different geography level year-state pair, multiple states one year), can process individual entry using following: get_census_data(): retrieves US census data (Census API key required); get_svi(): calculates SVI census data supplied. Essentially, find_svi() wrapper function get_census_data() get_svi() also supports iteration 1-year--1-state pairs geography level.","code":""},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Social Vulnerability Index for Communities","text":"Install findSVI package via CRAN: Alternatively, can install development version findSVI GitHub :","code":"install.packages(\"findSVI\") # install.packages(\"devtools\") devtools::install_github(\"heli-xu/findSVI\")"},{"path":"https://heli-xu.github.io/findSVI/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calculate Social Vulnerability Index for Communities","text":"(First 5 rows results 2017-NJ 2018-PA shown.) (First 10 rows columns shown, rest columns census variables SVI calculation.)","code":"library(findSVI) library(dplyr)  summarise_results <- find_svi(   year = c(2017, 2018),   state = c(\"NJ\", \"PA\"),   geography = \"county\" ) summarise_results %>%    group_by(year, state) %>%    slice_head(n = 5) #> # A tibble: 10 × 8 #> # Groups:   year, state [2] #>    GEOID RPL_theme1 RPL_theme2 RPL_theme3 RPL_theme4 RPL_themes  year state #>    <chr>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> <dbl> <chr> #>  1 34001      0.95      0.8        0.65        1          0.95   2017 NJ    #>  2 34003      0.2       0.3        0.55        0.45       0.25   2017 NJ    #>  3 34005      0.3       0.5        0.35        0.4        0.3    2017 NJ    #>  4 34007      0.7       0.9        0.55        0.6        0.75   2017 NJ    #>  5 34009      0.65      0.6        0.1         0.55       0.45   2017 NJ    #>  6 42001      0.212     0.242      0.697       0.227      0.182  2018 PA    #>  7 42003      0.136     0.0758     0.742       0.576      0.212  2018 PA    #>  8 42005      0.621     0.530      0.0152      0.167      0.227  2018 PA    #>  9 42007      0.182     0.409      0.530       0.348      0.197  2018 PA    #> 10 42009      0.712     0.606      0.0758      0.288      0.394  2018 PA data <- get_census_data(2020, \"county\", \"PA\") data[1:10, 1:10] #> # A tibble: 10 × 10 #>    GEOID NAME    B0600…¹ B0600…² B0900…³ B0900…⁴ B1101…⁵ B1101…⁶ B1101…⁷ B1101…⁸ #>    <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 42001 Adams …    7788     602   20663      NA    1237     215     482     171 #>  2 42003 Allegh…   45708    1713  228296      49   24311    1147    5378     525 #>  3 42005 Armstr…    3973     305   12516       9     912     161     247      85 #>  4 42007 Beaver…    7546     640   31915      NA    3380     380     787     174 #>  5 42009 Bedfor…    3996     317    9386      11     468      99     213      50 #>  6 42011 Berks …   36488    1356   93714      44    8812     662    1695     304 #>  7 42013 Blair …    7292     679   24920      19    2552     363     544     169 #>  8 42015 Bradfo…    4395     362   13358      NA     969     177     428     117 #>  9 42017 Bucks …   25651    1306  128008      53    8222     749    3174     581 #> 10 42019 Butler…    6118     468   37577      NA    2121     337     813     198 #> # … with abbreviated variable names ¹​B06009_002E, ²​B06009_002M, ³​B09001_001E, #> #   ⁴​B09001_001M, ⁵​B11012_010E, ⁶​B11012_010M, ⁷​B11012_015E, ⁸​B11012_015M result <- get_svi(2020, data) glimpse(restult) #> Rows: 67 #> Columns: 63 #> $ GEOID       <chr> \"42001\", \"42003\", \"42005\", \"42007\", \"42009\", \"42011\", \"420… #> $ NAME        <chr> \"Adams County, Pennsylvania\", \"Allegheny County, Pennsylva… #> $ E_TOTPOP    <dbl> 102627, 1218380, 65356, 164781, 48154, 419062, 122495, 607… #> $ E_HU        <dbl> 42525, 602416, 32852, 79587, 24405, 167514, 56960, 30691, … #> $ E_HH        <dbl> 39628, 545695, 28035, 72086, 19930, 156389, 51647, 25084, … #> $ E_POV150    <dbl> 13573, 212117, 13566, 28766, 10130, 77317, 27397, 13731, 5… #> $ E_UNEMP     <dbl> 2049, 32041, 1735, 4249, 1033, 12196, 2765, 1331, 14477, 4… #> $ E_HBURD     <dbl> 9088, 133524, 5719, 15764, 3952, 40982, 12146, 5520, 57197… #> $ E_NOHSDP    <dbl> 7788, 45708, 3973, 7546, 3996, 36488, 7292, 4395, 25651, 6… #> $ E_UNINSUR   <dbl> 5656, 46333, 2632, 6242, 3310, 25627, 6155, 3992, 25208, 6… #> $ E_AGE65     <dbl> 20884, 230745, 14496, 35351, 10950, 72293, 25372, 12948, 1… #> $ E_AGE17     <dbl> 20663, 228296, 12516, 31915, 9386, 93714, 24920, 13358, 12… #> $ E_DISABL    <dbl> 13860, 163671, 11431, 25878, 7797, 57961, 20278, 8731, 653… #> $ E_SNGPNT    <dbl> 1719, 29689, 1159, 4167, 681, 10507, 3096, 1397, 11396, 29… #> $ E_LIMENG    <dbl> 1318, 9553, 130, 606, 64, 16570, 388, 172, 11502, 449, 185… #> $ E_MINRTY    <dbl> 11624, 269795, 2096, 18205, 1672, 123611, 7120, 2733, 1089… #> $ E_MUNIT     <dbl> 821, 82729, 1180, 4563, 635, 11010, 3629, 1011, 25508, 660… #> $ E_MOBILE    <dbl> 2882, 4147, 3289, 3012, 3491, 4628, 4094, 4419, 4764, 6464… #> $ E_CROWD     <dbl> 468, 4697, 238, 693, 217, 1878, 451, 472, 2916, 489, 446, … #> $ E_NOVEH     <dbl> 1726, 72338, 2058, 5824, 961, 13331, 4216, 2086, 11711, 49… #> $ E_GROUPQ    <dbl> 4140, 33976, 795, 2933, 481, 13171, 3289, 736, 9462, 5592,… #> $ EP_POV150   <dbl> 13.8, 17.9, 21.0, 17.7, 21.4, 19.0, 22.9, 22.9, 9.7, 13.2,… #> $ EP_UNEMP    <dbl> 3.9, 4.9, 5.5, 5.1, 4.5, 5.6, 4.7, 4.7, 4.2, 4.6, 5.2, 10.… #> $ EP_HBURD    <dbl> 22.9, 24.5, 20.4, 21.9, 19.8, 26.2, 23.5, 22.0, 23.8, 19.4… #> $ EP_NOHSDP   <dbl> 10.8, 5.2, 8.2, 6.2, 11.3, 12.8, 8.3, 10.2, 5.7, 4.6, 8.0,… #> $ EP_UNINSUR  <dbl> 5.6, 3.8, 4.1, 3.8, 6.9, 6.2, 5.1, 6.6, 4.1, 3.3, 4.1, 3.2… #> $ EP_AGE65    <dbl> 20.3, 18.9, 22.2, 21.5, 22.7, 17.3, 20.7, 21.3, 18.7, 18.8… #> $ EP_AGE17    <dbl> 20.1, 18.7, 19.2, 19.4, 19.5, 22.4, 20.3, 22.0, 20.4, 20.0… #> $ EP_DISABL   <dbl> 13.7, 13.6, 17.6, 15.8, 16.3, 14.0, 16.8, 14.5, 10.5, 12.8… #> $ EP_SNGPNT   <dbl> 4.3, 5.4, 4.1, 5.8, 3.4, 6.7, 6.0, 5.6, 4.7, 3.8, 5.3, 8.1… #> $ EP_LIMENG   <dbl> 1.4, 0.8, 0.2, 0.4, 0.1, 4.2, 0.3, 0.3, 1.9, 0.3, 0.1, 0.0… #> $ EP_MINRTY   <dbl> 11.3, 22.1, 3.2, 11.0, 3.5, 29.5, 5.8, 4.5, 17.4, 5.6, 7.6… #> $ EP_MUNIT    <dbl> 1.9, 13.7, 3.6, 5.7, 2.6, 6.6, 6.4, 3.3, 10.1, 7.9, 5.7, 2… #> $ EP_MOBILE   <dbl> 6.8, 0.7, 10.0, 3.8, 14.3, 2.8, 7.2, 14.4, 1.9, 7.7, 4.7, … #> $ EP_CROWD    <dbl> 1.2, 0.9, 0.8, 1.0, 1.1, 1.2, 0.9, 1.9, 1.2, 0.6, 0.8, 1.2… #> $ EP_NOVEH    <dbl> 4.4, 13.3, 7.3, 8.1, 4.8, 8.5, 8.2, 8.3, 4.9, 6.4, 11.0, 9… #> $ EP_GROUPQ   <dbl> 4.0, 2.8, 1.2, 1.8, 1.0, 3.1, 2.7, 1.2, 1.5, 3.0, 5.1, 1.7… #> $ EPL_POV150  <dbl> 0.0758, 0.2727, 0.5303, 0.2424, 0.5606, 0.3788, 0.6818, 0.… #> $ EPL_UNEMP   <dbl> 0.1212, 0.4242, 0.6818, 0.5000, 0.2576, 0.6970, 0.3636, 0.… #> $ EPL_HBURD   <dbl> 0.5303, 0.6970, 0.2424, 0.4394, 0.1970, 0.8636, 0.5909, 0.… #> $ EPL_NOHSDP  <dbl> 0.7273, 0.0152, 0.2424, 0.1061, 0.8182, 0.9091, 0.2727, 0.… #> $ EPL_UNINSUR <dbl> 0.5152, 0.1061, 0.1364, 0.1061, 0.7424, 0.6667, 0.3939, 0.… #> $ EPL_AGE65   <dbl> 0.4848, 0.2727, 0.7879, 0.7121, 0.8788, 0.0909, 0.5606, 0.… #> $ EPL_AGE17   <dbl> 0.5909, 0.1970, 0.2576, 0.3333, 0.3939, 0.9091, 0.6212, 0.… #> $ EPL_DISABL  <dbl> 0.2576, 0.2273, 0.7727, 0.5000, 0.5909, 0.3333, 0.6667, 0.… #> $ EPL_SNGPNT  <dbl> 0.2273, 0.6364, 0.1515, 0.7424, 0.0455, 0.8636, 0.7879, 0.… #> $ EPL_LIMENG  <dbl> 0.7576, 0.6515, 0.0909, 0.2879, 0.0303, 0.9697, 0.1667, 0.… #> $ EPL_MINRTY  <dbl> 0.6515, 0.8636, 0.0303, 0.6364, 0.0455, 0.9242, 0.2879, 0.… #> $ EPL_MUNIT   <dbl> 0.1515, 0.9545, 0.4242, 0.6970, 0.1970, 0.7727, 0.7576, 0.… #> $ EPL_MOBILE  <dbl> 0.4394, 0.0303, 0.6818, 0.2121, 0.9091, 0.1515, 0.5000, 0.… #> $ EPL_CROWD   <dbl> 0.4091, 0.1818, 0.0909, 0.2576, 0.3333, 0.4091, 0.1818, 0.… #> $ EPL_NOVEH   <dbl> 0.0000, 0.9848, 0.4545, 0.5909, 0.0455, 0.6818, 0.6061, 0.… #> $ EPL_GROUPQ  <dbl> 0.6667, 0.4697, 0.0758, 0.2879, 0.0455, 0.5455, 0.4394, 0.… #> $ SPL_theme1  <dbl> 1.9698, 1.5152, 1.8333, 1.3940, 2.5758, 3.5152, 2.3029, 2.… #> $ SPL_theme2  <dbl> 2.3182, 1.9849, 2.0606, 2.5757, 1.9394, 3.1666, 2.8031, 2.… #> $ SPL_theme3  <dbl> 0.6515, 0.8636, 0.0303, 0.6364, 0.0455, 0.9242, 0.2879, 0.… #> $ SPL_theme4  <dbl> 1.6667, 2.6211, 1.7272, 2.0455, 1.5304, 2.5606, 2.4849, 2.… #> $ RPL_theme1  <dbl> 0.2424, 0.1667, 0.1970, 0.1364, 0.5455, 0.9242, 0.3636, 0.… #> $ RPL_theme2  <dbl> 0.3788, 0.2121, 0.2273, 0.5758, 0.1667, 0.9091, 0.6970, 0.… #> $ RPL_theme3  <dbl> 0.6515, 0.8636, 0.0303, 0.6364, 0.0455, 0.9242, 0.2879, 0.… #> $ RPL_theme4  <dbl> 0.1212, 0.5606, 0.1515, 0.2576, 0.0455, 0.5152, 0.4848, 0.… #> $ SPL_themes  <dbl> 6.6062, 6.9848, 5.6514, 6.6516, 6.0911, 10.1666, 7.8788, 8… #> $ RPL_themes  <dbl> 0.2273, 0.2879, 0.0909, 0.2424, 0.1667, 0.9545, 0.5152, 0.…"},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"List of census variables for SVI calculation — census_variables","title":"List of census variables for SVI calculation — census_variables","text":"datasets contains list census variable names year 2012-2021.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of census variables for SVI calculation — census_variables","text":"","code":"census_variables_2012  census_variables_2013  census_variables_2014  census_variables_2015  census_variables_2016  census_variables_2017  census_variables_2018  census_variables_2019  census_variables_2020  census_variables_2021"},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of census variables for SVI calculation — census_variables","text":"object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6. object class list length 6.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"a-list-of-census-variables-grouped-into-sublists-named-t-t-or-t-t-for-","dir":"Reference","previous_headings":"","what":"a list of census variables, grouped into sublists named t0-t5 or t0-t4 (for 2012).","title":"List of census variables for SVI calculation — census_variables","text":"t1-t4 represent 4 themes corresponding SVI variables categorized : Socioeconomic Household Composition/Disability Minority Status/Language Housing Type/Transportation t0 represents 3 census variables total counts, corresponding SVI variables categorized theme. t5 contains census variables SVI \"adjunct variables\", included reference used SVI calculation. 2012, adjunct variables included, variable listed 2014 documentation 2012 Census data, adjunct variables 2010 documentation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/census_variables.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List of census variables for SVI calculation — census_variables","text":"CDC/ATSDR SVI Documentation https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/findSVI-package.html","id":null,"dir":"Reference","previous_headings":"","what":"findSVI: Calculate Social Vulnerability Index for Communities — findSVI-package","title":"findSVI: Calculate Social Vulnerability Index for Communities — findSVI-package","text":"Developed CDC/ATSDR (Centers Disease Control Prevention/ Agency Toxic Substances Disease Registry), Social Vulnerability Index (SVI) serves tool assess resilience communities taking account socioeconomic demographic factors. Provided year(s), region(s) geographic level interest, 'findSVI' retrieves required variables US census data calculates SVI communities specified area based CDC/ATSDR SVI documentation. Reference calculation methods: Flanagan , Gregory EW, Hallisey EJ, Heitgerd JL, Lewis B (2011) doi:10.2202/1547-7355.1792 .","code":""},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/findSVI-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"findSVI: Calculate Social Vulnerability Index for Communities — findSVI-package","text":"Maintainer: Heli Xu xuheli91@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"find_svi() like wrapper get_census_data() get_svi() retrieves census data produces SVI one multiple years(s) state(s). multiple year-state entries, SVI obtained percentile rankings entry summarised one table. Note Census API key required function work, can obtained https://api.census.gov/data/key_signup.html set using tidycensus::census_api_key().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"","code":"find_svi(year, state = NULL, geography, key = NULL, full.table = FALSE)"},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"year vector containing years interest (available 2012-2021). Length >=1. Acting pairs state, year length state. exception single year entry (length 1), providing one state interest, supply state = NULL default state = 'US' retrieves processes nation level data obtain SVI. state vector containing states interest. Length >=0. Length 0 (state = NULL), state = 'US' must used single year argument, SVI calculated nation-level census data. cases, state must elements year (length). geography One geography level interest year-state combination (e.g.\"county\", \"zcta\", \"tract\"). key Census API key. Obtain one https://api.census.gov/data/key_signup.html. set , use tidycensus::census_api_key(\"KEY GOES \"), include argument. full.table Default FALSE, returning SVI table \"GEOID\", SVI theme themes. set TRUE, full SVI table individual SVI variables intermediate ranking calculations also included addition theme-related SVIs (similar style tables CDC/ATSDR database).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"tibble summarised SVI one multiple year-state combination(s) interest. Rows represent geographic units, columns represent SVI theme themes. Additional two columns end indicate corresponding state year information. full.table = TRUE, estimated count percentage values individual SVI variables also included. description variable names (column names), please refer CDC/ATSDR documentation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/find_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve census data and calculate SVI for one or multiple year(s)/state(s) — find_svi","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required # For one year-state entry (all counties of AZ in 2019) find_svi(       year = 2019,       state = \"AZ\",       geography = \"county\"    )   # For multiple year-state entries (all ZCTAs of DE in 2017 and DC in 2018) find_svi(       year = c(2017, 2018),       state = c(\"DE\", \"DC\"),       geography = \"zcta\"    )  }"},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve American Community Survey data for SVI variables — get_census_data","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"function uses tidycensus::get_acs() pre-defined list variables retrieves ACS data SVI calculation. Note Census API key required function work, can obtained https://api.census.gov/data/key_signup.html set using tidycensus::census_api_key().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"","code":"get_census_data(   year,   geography,   state = NULL,   county = NULL,   key = NULL,   geometry = FALSE,   ... )"},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"year year interest (available 2012-2021). geography geography interest (eg. state, county, zcta, tract) state (Optional) Specify state interest. data multiple states retrieved together, ranking SVI calculation performed among states. state = NULL default, state = 'US' return nation-level data. county (Optional) Specify county(s) interest, must combined value supplied \"state\". key Census API key. Obtain one https://api.census.gov/data/key_signup.html. Include argument set key using tidycensus::census_api_key(\"KEY GOES \"). geometry Default FALSE regular tibble census data. set TRUE, returns tibble additional geometry column containing simple feature geometry. ... arguments; details please see tidycensus::get_acs()","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"tibble ACS data row represents enumeration (geographic) unit column represents census variable (\"wide\" form).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_census_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve American Community Survey data for SVI variables — get_census_data","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required  get_census_data(year = 2018,   geography = \"county\",   state = \"PA\") }"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SVI for communities in a region from census data — get_svi","title":"Calculate SVI for communities in a region from census data — get_svi","text":"get_svi() calculates constructs SVI table geographic level interest based CDC/ATSDR SVI documentation. Briefly, taking account 4 themes census variables represent challenges socioeconomic status, household characteristics, racial ethnic minority status housing/transportation, SVI uses percentile ranking within region indicate relative social vulnerability geographic units (communities) region.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SVI for communities in a region from census data — get_svi","text":"","code":"get_svi(year, data)"},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SVI for communities in a region from census data — get_svi","text":"year year interest (available 2014-2021), must match year specified retrieving census data. data census data retrieved get_census_data().","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate SVI for communities in a region from census data — get_svi","text":"tibble SVI rows representing geographic units, columns indicating variable names (first two columns containing geographic information). detailed description variable names (column names), please refer CDC/ATSDR documentation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/get_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate SVI for communities in a region from census data — get_svi","text":"","code":"if (FALSE) { # Sys.getenv(\"CENSUS_API_KEY\") != \"\" # Census API key required  pa2018 <- get_census_data(     year = 2018,     geography = \"county\",     state = \"PA\")   get_svi(2018, pa2018) }"},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"reference table valid input state get_census_data() find_svi(). addition, state = \"US\" state = NULL also accepted nation-level data.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"","code":"state_valid"},{"path":[]},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"a-data-frame-with-columns-and-rows-","dir":"Reference","previous_headings":"","what":"A data frame with 3 columns and 52 rows:","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"st_abbr 2-letter abbreviation states. state State full name. fips_code Federal Information Processing System (FIPS) Codes states.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/state_valid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of valid full names/abbreviations/FIPS codes of 52 states — state_valid","text":"County-state reference file 2020 https://www.census.gov/programs-surveys/popest/geographies/reference-files.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of census variables and formula for SVI calculation — variable_calculation","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"datasets contains table SVI variable names, related census variable names corresponding calculation formula year 2012-2021. used construct SVI results variables starting \"E_\"(estimate) \"EP_\"(percentage) obtaining census data. Sometimes SVI variables directly linked census variables, times one census variable(s) included derive SVI variable.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"","code":"variable_e_ep_calculation_2012  variable_e_ep_calculation_2013  variable_e_ep_calculation_2014  variable_e_ep_calculation_2015  variable_e_ep_calculation_2016  variable_e_ep_calculation_2017  variable_e_ep_calculation_2018  variable_e_ep_calculation_2019  variable_e_ep_calculation_2020  variable_e_ep_calculation_2021"},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 35 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 51 rows 3 columns.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"a-data-frame-with-columns-and-various-number-of-rows-depending-on-the-year-","dir":"Reference","previous_headings":"","what":"A data frame with 3 columns and various number of rows, depending on the year:","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"_variable_name prefix \"x\" followed year, eg. x2018_variable_name, column SVI variable name theme SVI variables categorized four themes/domains: socioeconomic, household composition/disability, minority status/language housing type/transportation. Theme 0 used 3 variables representing total counts, theme 5 used adjunct variables (included calculation). Adjunct variables included 2012 due unavailable data/documentation. _table_field_calculation prefix \"x\" followed year, eg. x2018_table_field_calculation, column contains corresponding census variable names, /calculation using SVI/census variables.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/variable_calculation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of census variables and formula for SVI calculation — variable_calculation","text":"CDC/ATSDR SVI Documentation https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"tables contains ZIP Code Tabulation Areas (ZCTAs), intersecting counties states (state name, abbreviation, state FIPS code) nested . used get_census_data() retrieving ZCTA-level census data state, tidycensus::get_acs() (CRAN version) currently support obtaining state-specific ZCTA-level data.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"","code":"zcta_state_xwalk2021  zcta_state_xwalk2020  zcta_state_xwalk2019"},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"object class tbl_df (inherits tbl, data.frame) 542995 rows 5 columns. object class data.frame 523727 rows 5 columns.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"a-data-frame-with-columns-and-various-number-of-rows-depending-on-the-year-","dir":"Reference","previous_headings":"","what":"A data frame with 5 columns and various number of rows, depending on the year:","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"ZCTA 5 digit ZCTA code. st_code Federal Information Processing System (FIPS) Codes States. county County name within state ZCTA intersects/corresponds . state State full name corresponding FIPS code. st_abb Two-letter state abbreviation.","code":""},{"path":"https://heli-xu.github.io/findSVI/reference/zcta_state_xwalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Relationship file (crosswalk) for ZCTAs by state — zcta_state_xwalk","text":"Census ZCTA-county relationship file (2010) https://www.census.gov/geographies/reference-files/time-series/geo/relationship-files.2010.html#list-tab-1709067297 Geocorr ZCTA-county relationship file (2020) https://mcdc.missouri.edu/applications/geocorr2022.html County-state reference file (2019, 2020, 2021) https://www.census.gov/programs-surveys/popest/geographies/reference-files.html","code":""},{"path":"https://heli-xu.github.io/findSVI/news/index.html","id":"findsvi-012","dir":"Changelog","previous_headings":"","what":"findSVI 0.1.2","title":"findSVI 0.1.2","text":"Wrapping data retrieval SVI calculation, find_svi() supports multiple entries year-state pairs. get_census_data() (find_svi()) uses zcta-state crosswalks support state-specific ZCTA-level data retrieval 2019-2021. (functionality supported tidycensus::get_acs() 2019 Census Bureau longer makes ZCTA shapefiles available state.) get_svi() replicates results CDC/ATSDR SVI database matching number decimals (#12). user-friendly CLI error messages functions (#3, #4, #7).","code":""}]
